;; -*- coding: euc-jp; mode: scheme -*-
;; test kagoiri-musume script.
;; $Id: test.scm.in,v 1.8 2005/10/15 03:03:58 cut-sea Exp $

(use gauche.test)
(use gauche.collection)
(use file.util)
(use text.tree)
(use sxml.ssax)
(use sxml.sxpath)
(use kahua)
(use kahua.test.xml)
(use kahua.test.worker)

(test-start "kagoiri-musume")

(define GOSH "##GOSH##")

(sys-system "rm -rf _tmp _work")
(sys-mkdir "_tmp" #o755)
(sys-mkdir "_work" #o755)
(sys-mkdir "_work/plugins" #o755)

(for-each (lambda (f)
	    (copy-file #`"../plugins/,f" #`"_work/plugins/,f"))
	  (list "css.scm" "kagoiri-musume.scm" "sendmail.scm"))

(define *config* "test.conf")
(kahua-init *config*)

(define *dbname* "_work/db")

(define-class <session-state-dummy> ()
  ((user :init-value #f)))

(define with-testenv
  (case-lambda
   ((thunk)
    (parameterize (kahua-current-context
		   `(("session-state" ,(make <session-state-dummy>))))
      (with-db (db *dbname*) (thunk))))
   ((login-name thunk)
    (with-testenv
     (lambda ()
       (or (kahua-user-exists? login-name)
	   (kahua-add-user login-name ""))

       ;; make user environment and set as as current user.
       (set! (kahua-current-user) login-name)
       (thunk))))))

#|
;;------------------------------------------------------------
;; Setting Up kagoiri-musume
(test-section "setting up classes")

(use kahua-server)
(add-load-path "../")
(load "kagoiri-musume/version.kahua")
(load "kagoiri-musume/local.kahua")
(load "kagoiri-musume/class.kahua")

(with-db (db *dbname*)
    (test* "create email"
	   #t
	   (let1 email (make <email> :address "dummy@kagoiri-musume.org")
	     (is-a? email <email>)))

    (test* "add-fan system-admin role kago"
	   #t
	   (let1 kago (add-fan "kago" "kago" "kago@kagoiri-musume.org" 'admin 'user)
	     (is-a? kago <fan>)))

    (test* "lucky-fan? check"
	   #t
	   (let1 kago (find-kahua-instance <fan> "kago")
	     (lucky-fan? kago)))

    (test* "add-fan normal user role cut-sea"
	   #t
	   (let1 cut-sea (add-fan "cut-sea" "love-machine" "cut-sea@kagoiri-musume.org" 'user)
	     (is-a? cut-sea <fan>)))

    ;; for make-kahua-collection, db-sync is necessary
    (kahua-db-sync db)

    (test* "all-fans"
	   2
	   (length (all-fans)))

    (test* "code-of method for fan"
	   "kago"
	   (let1 kago (find-kahua-instance <fan> "kago")
	     (code-of kago)))

    (test* "disp-name-of method for fan"
	   "cut-sea"
	   (let1 cut-sea (find-kahua-instance <fan> "cut-sea")
	     (disp-name-of cut-sea)))

    (test* "kahua-user class check"
	   #t
	   (let* ((kago (find-kahua-instance <fan> "kago"))
		  (user (login-user-of kago)))
	     (is-a? user <kahua-user>)))

    (test* "kahua-user check"
	   "kago"
	   (let* ((kago (find-kahua-instance <fan> "kago"))
		  (user (login-user-of kago)))
	     (ref user 'login-name)))

    (test* "email class check"
	   #t
	   (let* ((kago (find-kahua-instance <fan> "kago"))
		  (mail (email-of kago)))
	     (is-a? mail <email>)))

    (test* "email address check"
	   "kago@kagoiri-musume.org"
	   (let1 kago (find-kahua-instance <fan> "kago")
	     (email-address-of kago)))


    (test* "add priority"
	   #t
	   (let1 p (make <priority> :code "normal" :disp-name "普通" :level 1)
	     (is-a? p <priority>)))

    (test* "priority code check"
	   "normal"
	   (let1 p (find-kahua-instance <priority> "normal")
	     (code-of p)))
   
    (test* "priority display name check"
	   "普通"
	   (let1 p (find-kahua-instance <priority> "normal")
	     (disp-name-of p)))
   
    (test* "priority level check"
	   1
	   (let1 p (find-kahua-instance <priority> "normal")
	     (level-of p)))
   
    (test* "priority default delete flag check"
	   #f
	   (let1 p (find-kahua-instance <priority> "normal")
	     (delete-of p)))
   
    (test* "add priority with delete"
	   #t
	   (let1 p (make <priority> :code "high" :disp-name "高" :level 4 :delete #t)
	     (is-a? p <priority>)))

    (test* "priority code check with delete"
	   "high"
	   (let1 p (find-kahua-instance <priority> "high")
	     (code-of p)))
   
    (test* "priority display name check with delete"
	   "高"
	   (let1 p (find-kahua-instance <priority> "high")
	     (disp-name-of p)))
   
    (test* "priority level check with delete"
	   4
	   (let1 p (find-kahua-instance <priority> "high")
	     (level-of p)))
   
    (test* "priority default delete flag check with delete"
	   #t
	   (let1 p (find-kahua-instance <priority> "high")
	     (delete-of p)))

    (test* "priority delete flag change"
	   #f
	   (let1 p (find-kahua-instance <priority> "high")
	     (set! (delete-of p) #f)
	     (delete-of p)))

    ;; for make-kahua-collection, db-sync is necessary
    (kahua-db-sync db)

    (test* "all-priorities"
	   2
	   (length (all-priorities)))

    
    (test* "add status"
	   #t
	   (let1 s (make <status> :code "open" :disp-name "OPEN")
	     (is-a? s <status>)))

    (test* "status code check"
	   "open"
	   (let1 s (find-kahua-instance <status> "open")
	     (code-of s)))

    (test* "status display name check"
	   "OPEN"
	   (let1 s (find-kahua-instance <status> "open")
	     (disp-name-of s)))

    (test* "status delete flag check"
	   #f
	   (let1 s (find-kahua-instance <status> "open")
	     (delete-of s)))

    (test* "add status with delete"
	   #t
	   (let1 s (make <status> :code "completed" :disp-name "COMPLETED" :delete #t)
	     (is-a? s <status>)))

    (test* "status code check with delete"
	   "completed"
	   (let1 s (find-kahua-instance <status> "completed")
	     (code-of s)))

    (test* "status display name check with delete"
	   "COMPLETED"
	   (let1 s (find-kahua-instance <status> "completed")
	     (disp-name-of s)))

    (test* "status delete flag check with delete"
	   #t
	   (let1 s (find-kahua-instance <status> "completed")
	     (delete-of s)))

    (test* "status delete flag change"
	   #f
	   (let1 s (find-kahua-instance <status> "completed")
	     (set! (delete-of s) #f)
	     (delete-of s)))

    ;; for make-kahua-collection, db-sync is necessary
    (kahua-db-sync db)

    (test* "all-statuss"
	   2
	   (length (all-statuss)))


    (test* "add type"
	   #t
	   (let1 t (make <type> :code "bug" :disp-name "バグ")
	     (is-a? t <type>)))

    (test* "type code check"
	   "bug"
	   (let1 t (find-kahua-instance <type> "bug")
	     (code-of t)))

    (test* "type display name check"
	   "バグ"
	   (let1 t (find-kahua-instance <type> "bug")
	     (disp-name-of t)))

    (test* "type delete flag check"
	   #f
	   (let1 t (find-kahua-instance <type> "bug")
	     (delete-of t)))

    (test* "add type with delete"
	   #t
	   (let1 t (make <type> :code "task" :disp-name "タスク" :delete #t)
	     (is-a? t <type>)))

    (test* "type code check with delete"
	   "task"
	   (let1 t (find-kahua-instance <type> "task")
	     (code-of t)))

    (test* "type display name check with delete"
	   "タスク"
	   (let1 t (find-kahua-instance <type> "task")
	     (disp-name-of t)))

    (test* "type delete flag check with delete"
	   #t
	   (let1 t (find-kahua-instance <type> "task")
	     (delete-of t)))

    (test* "type delete flag change"
	   #f
	   (let1 t (find-kahua-instance <type> "task")
	     (set! (delete-of t) #f)
	     (delete-of t)))

    ;; for make-kahua-collection, db-sync is necessary
    (kahua-db-sync db)

    (test* "all-types"
	   2
	   (length (all-types)))


    (test* "add category"
	   #t
	   (let1 c (make <category> :code "section" :disp-name "セクション")
	     (is-a? c <category>)))

    (test* "category code check"
	   "section"
	   (let1 c (find-kahua-instance <category> "section")
	     (code-of c)))

    (test* "type display name check"
	   "セクション"
	   (let1 c (find-kahua-instance <category> "section")
	     (disp-name-of c)))

    (test* "type delete flag check"
	   #f
	   (let1 c (find-kahua-instance <category> "section")
	     (delete-of c)))

    (test* "add type with delete"
	   #t
	   (let1 c (make <category> :code "global" :disp-name "全体" :delete #t)
	     (is-a? c <category>)))

    (test* "type code check with delete"
	   "global"
	   (let1 c (find-kahua-instance <category> "global")
	     (code-of c)))

    (test* "type display name check with delete"
	   "全体"
	   (let1 c (find-kahua-instance <category> "global")
	     (disp-name-of c)))

    (test* "type delete flag check with delete"
	   #t
	   (let1 c (find-kahua-instance <category> "global")
	     (delete-of c)))

    (test* "type delete flag change"
	   #f
	   (let1 c (find-kahua-instance <category> "global")
	     (set! (delete-of c) #f)
	     (delete-of c)))

    ;; for make-kahua-collection, db-sync is necessary
    (kahua-db-sync db)

    (test* "all-categories"
	   2
	   (length (all-categories)))

  )
|#

;;------------------------------------------------------------
;; Run kagoiri-musume
(test-section "kahua-server kagoiri-musume.kahua")

(with-worker
 (w `(,GOSH "-I.." "-I##KAHUA_LIB##" "kahua-server.scm" "-c" ,*config*
	    "../kagoiri-musume/kagoiri-musume.kahua"))

 (test* "run kagoiri-musume.kahua" #t (worker-running? w))

 (test* "kagoiri-musume top"
	'(html
	  (head (title ?_) (meta ?@) (link ?@))
	  (body (table
		 (tr (td (h1 ?_))
		     (td (a (@ (href ?&)) "トップ"))
		     (td (a ?@ "システム管理"))
		     (td (a ?@ "ユニット一覧"))
		     (td (a ?@ "[[login]]"))))
		(hr)
		(h2 ?_)
		(ul 
		 (li (a ?@ "システム設定管理画面"))
		 (li (a ?@ "ユニット一覧")))))
        (call-worker/gsid w '() '() (lambda (h b) (tree->string b)))
        (make-match&pick w))

 (test* "kagoiri-musume top link click"
	'(html
	  (head (title ?_) (meta ?@) (link ?@))
	  (body (table
		 (tr (td (h1 ?_))
		     (td (a ?@ "トップ"))
		     (td (a (@ (href ?&)) "システム管理"))
		     (td (a ?@ "ユニット一覧"))
		     (td (a ?@ "[[login]]"))))
		(hr)
		(h2 ?_)
		(ul 
		 (li (a ?@ "システム設定管理画面"))
		 (li (a ?@ "ユニット一覧")))))
        (call-worker/gsid w '() '() (lambda (h b) (tree->string b)))
        (make-match&pick w))

 (test* "kagoiri-musume system admin link click without login"
	'(html
	  (head
	   (title ?_) (meta ?@) (link ?@))
	  (body
	   (table
	    (tr (td (h1 ?_))
		(td (a ?@ "トップ"))
		(td (a ?@ "システム管理"))
		(td (a ?@ "ユニット一覧"))
		(td (a ?@ "[[login]]"))))
	   (hr)
	   (h1 ?_)
	   (h3 "システム管理者のアカウントが必要です")
	   (form (@ (action ?&) ?*)
		 (table
		  (tr 
		   (th "Login Name")
		   (td (input (@ (!permute
				  (value "")
				  (type "text")
				  (name "name"))))))
		  (tr
		   (th "Password")
		   (td (input (@ (!permute
				  (value "") 
				  (type "password")
				  (name "pass")))))))
		 (input (@ (!permute
			    (value "login")
			    (type "submit")
			    (name "submit")))))))
        (call-worker/gsid w '() '() (lambda (h b) (tree->string b)))
        (make-match&pick w))

 (test* "kagoiri-musume system admin link click without admin role account"
	'(html
	  (head
	   (title ?_) (meta ?@) (link ?@))
	  (body
	   (table
	    (tr (td (h1 ?_))
		(td (a ?@ "トップ"))
		(td (a ?@ "システム管理"))
		(td (a ?@ "ユニット一覧"))
		(td (a ?@ "[[login]]"))))
	   (hr)
	   (h1 ?_)
	   (h3 "システム管理者のアカウントが必要です")
	   (form (@ (action ?&) ?*)
		 (table
		  (tr 
		   (th "Login Name")
		   (td (input (@ (!permute
				  (value "")
				  (type "text")
				  (name "name"))))))
		  (tr
		   (th "Password")
		   (td (input (@ (!permute
				  (value "") 
				  (type "password")
				  (name "pass")))))))
		 (input (@ (!permute
			    (value "login")
			    (type "submit")
			    (name "submit")))))))
        (call-worker/gsid
	 w
	 '()
	 '(("name" "cut-sea") ("pass" "cutsea"))
	 (lambda (h b) (tree->string b)))
        (make-match&pick w))

 (test* "kagoiri-musume system admin link click with login"
	'(html
	  (head
	   (title ?_) (meta ?@) (link ?@))
	  (body
	   (table
	    (tr (td (h1 "籠入娘。 - Groupie System"))
		(td (a ?@ "トップ"))
		(td (a ?@ "システム管理"))
		(td (a ?@ "ユニット一覧"))
		(td (a ?@ "パスワード変更"))
		(td (a (@ (href ?&)) "[[Logout]]"))
		(td (form ?@ "検索:" (input (@ (type "text") (size "10") (name "word")))))
		(td " Now login:" (a ?@ "kago"))))
	   (hr) (h2 "籠入娘。システム設定管理画面") (hr)
	   (form ?@
		 (table
		  (thead "登録ユーザ一覧")
		  (tr (th "管理者権限") (th "ログイン名") (th "メールアドレス") (th "隠密"))
		  (tr (td) (td "cut-sea") (td "cut-sea@kagoiri.org") (td))
		  (tr (td "＊") (td "kago") (td "cut-sea@kagoiri.org") (td)))
		 (table
		  (tr (th "管理者権限") (th "ログイン名") (th "パスワード") (th "メールアドレス") (th "隠密"))
		  (tr (td (input (@ (type "checkbox") (name "admin"))))
		      (td (input (@ (type "text") (name "login-name"))))
		      (td (input (@ (type "password") (name "passwd"))))
		      (td (input (@ (type "text") (name "mail-address"))))
		      (td (input (@ (type "checkbox") (name "delete")))))
		  (tr (td (input (@ (value "ファン登録") (type "submit") (name "submit")))))))
	   (hr)
	   (form ?@
		 (table
		  (thead "登録ユニット一覧")
		  (tr (th "ユニット名") (th "概要") (th "活動状態"))))
	   (hr) 
	   (form ?@
		 (table
		  (thead "登録優先度一覧")
		  (tr (th "優先度ID") (th "表示名") (th "レベル") (th "無効"))
		  (tr (td "high") (td "高") (td "4") (td))
		  (tr (td "low") (td "低") (td "2") (td))
		  (tr (td "normal") (td "普通") (td "3") (td))
		  (tr (td "super") (td "超高") (td "5") (td)))
		 (table
		  (tr (th "優先度ID") (th "表示名") (th "レベル") (th "無効"))
		  (tr (td (input (@ (type "text") (name "id"))))
		      (td (input (@ (type "text") (name "disp"))))
		      (td (select (@ (name "level"))
				  (option (@ (value "1")) "1")
				  (option (@ (value "2")) "2")
				  (option (@ (value "3")) "3")
				  (option (@ (value "4")) "4")
				  (option (@ (value "5")) "5")))
		      (td (input (@ (type "checkbox") (name "delete")))))
		  (tr (td (input (@ (value "登録") (type "submit") (name "submit")))))))
	   (hr)
	   (form ?@
		 (table
		  (thead "登録ステータス一覧")
		  (tr (th "ステータスID") (th "表示名") (th "無効"))
		  (tr (td "completed") (td "COMPLETED") (td))
		  (tr (td "on-hold") (td "ON HOLD") (td))
		  (tr (td "open") (td "OPEN") (td))
		  (tr (td "rejected") (td "REJECTED") (td))
		  (tr (td "taken") (td "TAKEN") (td)))
		 (table
		  (tr (th "ステータスID") (th "表示名") (th "無効"))
		  (tr (td (input (@ (type "text") (name "id"))))
		      (td (input (@ (type "text") (name "disp"))))
		      (td (input (@ (type "checkbox") (name "delete")))))
		  (tr (td (input (@ (value "登録") (type "submit") (name "submit")))))))
	   (hr)
	   (form ?@
		 (table
		  (thead "登録タイプ一覧")
		  (tr (th "タイプID") (th "表示名") (th "無効"))
		  (tr (td "bug") (td "バグ") (td))
		  (tr (td "discuss") (td "議論") (td))
		  (tr (td "etc") (td "その他") (td))
		  (tr (td "report") (td "報告") (td))
		  (tr (td "request") (td "変更要望") (td))
		  (tr (td "task") (td "タスク") (td))
		  (tr (td "term") (td "用語") (td)))
		 (table
		  (tr (th "タイプID") (th "表示名") (th "無効"))
		  (tr (td (input (@ (type "text") (name "id"))))
		      (td (input (@ (type "text") (name "disp"))))
		      (td (input (@ (type "checkbox") (name "delete")))))
		  (tr (td (input (@ (value "登録") (type "submit") (name "submit")))))))
	   (hr)
	   (form ?@
		 (table
		  (thead "登録カテゴリ一覧")
		  (tr (th "カテゴリID") (th "表示名") (th "無効"))
		  (tr (td "global") (td "全体") (td))
		  (tr (td "infra") (td "インフラ") (td))
		  (tr (td "master") (td "マスタ") (td))
		  (tr (td "section") (td "セクション") (td)))
		 (table
		  (tr (th "カテゴリID") (th "表示名") (th "無効"))
		  (tr (td (input (@ (type "text") (name "id"))))
		      (td (input (@ (type "text") (name "disp"))))
		      (td (input (@ (type "checkbox") (name "delete")))))
		  (tr (td (input (@ (value "登録") (type "submit") (name "submit")))))))
	   (hr)))
        (call-worker/gsid
	 w
	 '()
	 '(("name" "kago") ("pass" "kago"))
	 (lambda (h b) (tree->string b)))
        (make-match&pick w))

 (test* "kagoiri-musume logout"
	`(("Status" "302 Moved")
	  ("x-kahua-cgsid" "logout"))
	(call-worker/gsid w 
			  '()
			  '(("name" "kago") ("pass" "kago"))
			  (lambda (h b)
			    (remove
			     (lambda (c) (or (equal? "Location" (car c))
					     (equal? "x-kahua-sgsid" (car c))))
			     h))))

 )

(test-end)
