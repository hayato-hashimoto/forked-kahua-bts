;; -*- coding: euc-jp; mode: kahua -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: group.kahua,v 1.6 2006/03/12 11:33:46 shibata Exp $
;;
;;
(kahua-add-hook! 'initial (cut make-kahua-collection <group>))

(define-class <group> (<kahua-persistent-base>)
  ((name      :allocation :persistent
              :accessor name-of
              :init-keyword :name :init-value "")
   (parents    :allocation :persistent
              :init-keyword :parents
              :init-value '()
              :accessor parents-of)
   (groups    :allocation :persistent
              :init-keyword :groups
              :init-value '()
              :accessor groups-of)
   (members   :allocation :persistent
              :init-keyword :members
              :init-value '())
   (%obj-hash :allocation :class
              :init-value (make-hash-table 'string=?))
   ))

(define-method initialize ((obj <group>) initargs)
  (next-method)
  (hash-table-put! (ref obj '%obj-hash)
                   (ref obj 'name) obj))

(define-method write-object ((obj <group>) port)
  (format port "#<group ~s>" (name-of obj)))

(define (group-hash)
  (class-slot-ref <group> '%obj-hash))

(define (top-group)
  (group-name->obj "*TOP*"))

(define (group-name->obj name)
  (hash-table-get (group-hash) name #f))

(define-entry-method admin-system ("user" "csv")
  (kagoiri-page
   (h1/ "CSVインポート")
   (form/cont/
    (@/ (enctype "multipart/form-data"))
    (@@/ (cont parse-csv))
    (input/ (@/ (type "file") (name "file")))
    (input/ (@/ (type "submit") (name "import"))))))

(define parse-csv
  (entry-lambda (:keyword file)
    (if (not (null? file))
        (edit-group (csv->list (car file)))
      (h1/ "ファイルを指定してください."))))


(define (valid-groups groups)
  ;; 系列が同じグループから末端の
  ;; グループ以外を取り除く
  (let loop ((valid groups)
             (rest groups))
    (if (null? rest)
        valid
      (loop (lset-difference eq? valid
                  (parent-groups (car rest)))
            (cdr rest)))))

(define-method parent-groups ((obj <group>))
  ;; 複数の親には未対応
  (let1 parents (ref obj 'parents)
    (if (not (null? parents))
        (cons (car parents)
              (parent-groups (car parents)))
      '())))

(define-syntax uniq-push!
  (syntax-rules ()
    ((_ place item)
     (update! place (lambda (ls) (if (memq item ls) ls (cons item ls)))))
    ((_ place item cmpfn)
     (update! place (lambda (ls) (if (member item ls cmpfn) ls (cons item ls)))))))

(define-method join! ((obj <group>) (obj2 <group>))
  (uniq-push! (ref obj2 'parents) obj)
  (uniq-push! (ref obj 'groups) obj2))

(define-method drop-out! ((obj <group>) (obj2 <group>))
  (update! (ref obj2 'parents) (cut delete! obj <> eq?))
  (update! (ref obj 'groups) (cut delete! obj2 <> eq?)))

(define-method update-parents! ((obj <group>) (groups <list>))
  (receive (removed added)
      (lset-added+removed (parents-of obj)
                          groups)
    (for-each (cut drop-out! <> obj) removed)
    (for-each (cut join! <> obj) added)))

(define-method join! ((obj <group>) (user <fan>))
  (uniq-push! (ref obj 'members) user)
  (uniq-push! (ref user 'groups) obj))

(define-method drop-out! ((obj <group>) (user <fan>))
  (update! (ref obj 'members) (cut delete! user <> eq?))
  (update! (ref user 'groups) (cut delete! obj <> eq?)))

(define-method update-groups! ((obj <fan>) (groups <list>))
  (receive (removed added)
      (lset-added+removed (groups-of obj)
                          groups)
    (for-each (cut drop-out! <> obj) removed)
    (for-each (cut join! <> obj)  added)))

(define (lset-added+removed list1 list2)
  (values (lset-difference eq? list1 list2)
          (lset-difference eq? list2 list1)))


(define (node->group! node parents)
      (let* ((name (car node))
             (children (cdr node))
             (obj (or (group-name->obj name)
                      (make <group> :name name))))
        (update-parents! obj parents)
        ;; (slot-set! obj 'parents parents)
        (map (cut join! <> obj) parents)
        (slot-set! obj 'groups
                   (map (cut node->group! <> (list obj)) children))
        obj))

(define (create-groups&assign-member recordes)

  (define skip-title cdr)

  (define name-ref (cut ref <> 1))
  (define mail-ref (cut ref <> 4))
  (define (id-ref line) (car (string-split (mail-ref line) #\@)))
  (define (groups-ref line) (map (compose group-name->obj
                                         (cut string-drop <> 3))
                                (drop line 9)))

  ((entry-lambda (:keyword grouptree)
     (node->group! (call-with-input-string grouptree read) '())

     (let ((non-user '())
           (update-user '()))

       (for-each
        (lambda (line)
          (let* ((id (id-ref line))
                 (name (name-ref line))
                 (mail (mail-ref line))
                 (groups (groups-ref line))
                 (user (kahua-find-user id)))
            (if user
                (begin
                  (slot-set! user 'name name)
                  (update-groups! user (valid-groups groups))
                  (push! update-user user))
              (push! non-user
                     (list id name mail (valid-groups groups))))))
        (skip-title recordes))

       (kagoiri-page
        (h1/ "インポート結果")
        (h2/ "以下のユーザは登録されていません")
        (table/
         (tr/
          (map/ th/ '("ID" "名前" "メールアドレス" "グループ";;  "追加"
                      )))
         (map/
          (lambda (userinfo)
            (tr/
             (td/ (ref userinfo 0))
             (td/ (ref userinfo 1))
             (td/ (ref userinfo 2))
             (td/ (node-set
                   (intersperse ", "
                                (map name-of (ref userinfo 3)))))
             ;; (td/ (input/ (@/ (type "checkbox")
;;                               (name "user_no")
;;                               (value (ref userinfo 0)))))
             ))
          non-user))
        (h2/ "以下のユーザを更新しました．")
        (table/
         (tr/
          (map/ th/ '("ID" "名前" "メールアドレス" "グループ")))
         (map/
          (lambda (user)
            (tr/
             (td/ (key-of user))
             (td/ (name-of user))
             (td/ (address-of (email-of user)))
             (td/ (node-set
                   (intersperse ", "
                                (map name-of (groups-of user)))))))
          update-user)
         ))))))

(define (edit-group recordes)

  (define (normalize-group-name name)
    (string-drop name 3))

  (define (load-groups records)
    (let1 group-hash (make-hash-table 'string=?)
      (for-each
       (lambda (r)
         (for-each
          (lambda (g)
            (let1 name (normalize-group-name g)
              (hash-table-update! group-hash name (cut + 1 <>) 0)))
          (drop r 9)))
       (cdr records))
      (hash-table-keys group-hash)))

  (let1 groups (load-groups recordes)

    (kagoiri-page
     (h1/ "グループ構造設定")
     (fieldset/
      (legend/ "グループ構造")
      (form/cont/
       (@/ (onsubmit "group_edit_submit()"))
       (@@/ (cont (cut create-groups&assign-member recordes)))
       (input/ (@/ (type "hidden") (name "grouptree") (id "grouptree") (value "")))
       (input/ (@/ (type "submit") (value "保存"))))
      (div/ (@/ (id "root-box"))))
     (fieldset/
      (legend/ "グループ構造の点線枠へDrag&Dropして下さい")
      (div/ (@/ (id "main-box"))
            (node-set
             (map-with-index 
              (lambda (idx name)
                (div/ (@/ (class "box"))
                      name
                      (div/ (@/  (id #`"box-,|idx|x")
                                 (class "box2")))))
              groups))))
     (script/ (@/ (type "text/javascript"))
              "function draggable () {"
              "Sortable.create('root-box', {dropOnEmpty:true, constraint:false,tag:'div',containment:false,onChange:update_height});"
              "Sortable.create('main-box', {dropOnEmpty:true, constraint:false,tag:'div',containment:false});"
              (map/
               (lambda (idx)
                 #`"Sortable.create('box-,|idx|x',, {dropOnEmpty:true,, constraint:false,,tag:'div',,containment:false,,onChange:update_height});")
               (iota (length groups)))
              "}"
              "Event.observe(window, 'load', draggable);")
     )))

;; TODO: define-entry-method bug fix
;; (define-entry-method admin-system ("group" "tree-edit")
(define-entry-method group-edit ()
  (define (make-dragbox g)
    (div/ (@/ (class "box") )
          (name-of g)
          (div/ (@/ (id (key-of g)) (class "box2"))
                (map/ make-dragbox (groups-of g)))))

  (define edit-groups
    (entry-lambda (:keyword grouptree)
      (node->group! (call-with-input-string grouptree read) '())
      ;; (redirect/cont (cont admin-system "group" "tree-edit"))
      (redirect/cont (cont group-edit))))


  (let1 root (top-group)
    (if root
        (kagoiri-page
         (h1/ "グループ構造設定")
         (fieldset/
          (legend/ "グループ構造")
          (form/cont/
           (@/ (onsubmit "group_edit_submit()"))
           (@@/ (cont edit-groups))
           (input/ (@/ (type "hidden") (name "grouptree") (id "grouptree") (value "")))
           (input/ (@/ (type "submit") (value "保存"))))
          (div/ (@/ (id "root-box"))
                (map/ make-dragbox (groups-of root))))
         (script/ (@/ (type "text/javascript"))
                  "function draggable () {"
                  "update_height();"
                  "Sortable.create('root-box', {dropOnEmpty:true, constraint:false,tag:'div',containment:false,onChange:update_height});"
                  (map/
                   (lambda (g)
                     (if (eq? root g)
                         ""
                       #`"Sortable.create(',(key-of g)',, {dropOnEmpty:true,, constraint:false,,tag:'div',,containment:false,,onChange:update_height});"))
                   (make-kahua-collection <group>))
                  "}"
                  "Event.observe(window, 'load', draggable);")
         )
      (kagoiri-page
       (h1/ "no group"))
      )))
