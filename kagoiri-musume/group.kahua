(define-class <group> (<kahua-persistent-base>)
  ((name      :allocation :persistent
              :init-keyword :name :init-value "")
   (parents    :allocation :persistent
              :init-keyword :parents
              :init-value #f)
   (groups    :allocation :persistent
              :init-keyword :groups
              :init-value '())
   (members   :allocation :persistent
              :init-keyword :members
              :init-value '())))



(define-entry (user-admin)
  (kagoiri-page
   (h1/ "CSVインポート")
   (form/cont/
    (@/ (enctype "multipart/form-data"))
    (@@/ (cont parse-csv))
    (input/ (@/ (type "file") (name "file")))
    (input/ (@/ (type "submit") (name "import"))))))

(define parse-csv
  (entry-lambda (:keyword file)

    (define (normalize-group-name name)
      (string-drop name 3))

    (define (load-groups records)
      (let1 group-hash (make-hash-table 'string=?)
        (for-each
         (lambda (r)
           (for-each
            (lambda (g)
              (let1 name (normalize-group-name g)
                (hash-table-update! group-hash name (cut + 1 <>) 0)))
            (drop r 9)))
         (cdr records))
        (hash-table-keys group-hash)))

    (when file
      (let1 groups (load-groups (csv->list (car file)))
        (edit-group groups)
        ))))

(define make-groups
  (entry-lambda (:keyword grouptree)

    (define (iter node parents)
      (let* ((name (car node))
             (children (cdr node))
             (obj (make <group>
                    :name name
                    :parents parents)))
        (slot-set! obj 'groups
                   (map (cut iter <> (list obj)) children))
        obj))

    (iter (call-with-input-string grouptree read) '())

    (h1/ (x->string grouptree))))

(define (edit-group groups)
  (kagoiri-page
   (h1/ "グループ構造設定")
   (fieldset/
    (legend/ "グループ構造")
    (form/cont/
     (@/ (onsubmit "group_edit_submit()"))
     (@@/ (cont make-groups))
     (input/ (@/ (type "hidden") (name "grouptree") (id "grouptree") (value "")))
     (input/ (@/ (type "submit") (value "保存"))))
    (div/ (@/ (id "root-box"))))
   (fieldset/
    (legend/ "グループ構造の点線枠へDrag&Dropして下さい")
    (div/ (@/ (id "main-box"))
          (node-set
           (map-with-index 
            (lambda (idx name)
              (div/ (@/  (id #`"box-,|idx|")
                         (class "box"))
                    name
                    (div/ (@/  (id #`"box-,|idx|x")
                               (class "box2")))))
            groups))))
   (script/ (@/ (type "text/javascript"))
            "function draggable () {"
            "Sortable.create('root-box', {dropOnEmpty:true, constraint:false,tag:'div',containment:false,onChange:update_height});"
            "Sortable.create('main-box', {dropOnEmpty:true, constraint:false,tag:'div',containment:false});"
            (map/
             (lambda (idx)
               #`"Sortable.create('box-,|idx|x',, {dropOnEmpty:true,, constraint:false,,tag:'div',,containment:false,,onChange:update_height});")
             (iota (length groups)))
            "}"
            "Event.observe(window, 'load', draggable);")
         ))

