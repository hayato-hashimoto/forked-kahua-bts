;; -*- coding: utf8; mode: kahua -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: page.kahua,v 1.44 2006/12/14 07:21:05 cut-sea Exp $
;;
(load "kagoiri-musume/util.kahua")
(load "kagoiri-musume/version.kahua")

(define-if-not-bound *kagoiri-musume-title*
  "籠入娘。 - Groupie System")

(define-constant *content-type*
  (format "text/html; charset=~a"
	  (case (gauche-character-encoding)
	    ((utf8) 'EUC-JP)
	    ((utf-8)  'UTF-8)
	    ((sjis)   'Shift_JIS)
	    (else     'EUC-JP))))	; Fit w/ kahua.cgi.in

;
; page base
;
(define (page-base . body)
  (error-log-write 'Logging 5 "page-base logging.")
  (html/
   (head/ (title/ *kagoiri-musume-title*)
	  (meta/ (@/ (http-equiv "Content-type")
		     (content *content-type*)))
	  (link/ (@/ (rel "stylesheet") (type "text/css")
		     (href (kahua-static-document-url
			    "kagoiri-musume/kagoiri-musume.css"))))
          (with-ie/
           (link/ (@/ (rel "stylesheet") (type "text/css") (media "screen")
                      (href (kahua-static-document-url
                             "kagoiri-musume/fixed4ie.css")))))
          (script/ (@/ (type "text/javascript")
                       (src (kahua-static-document-url
                             "kagoiri-musume/javascripts/prototype.js"))))
          (script/ (@/ (type "text/javascript")
                       (src (kahua-static-document-url
                             "kagoiri-musume/javascripts/scriptaculous.js"))))
          (script/ (@/ (type "text/javascript"))
                   (format "var kahua_self_uri_full = '~a';" (kahua-self-uri-full))
                   (format "var kahua_loading_msg = '~a';" ($$ "読み込み中")))
          (script/ (@/ (type "text/javascript")
                       (src (kahua-static-document-url
                             "kagoiri-musume/javascripts/async.js"))))
          (script/ (@/ (type "text/javascript")
                       (src (kahua-static-document-url
                             "kagoiri-musume/javascripts/kagoiri-musume.js"))))
          )
   (body/
    (node-set body)
    (div/ (@/ (id "bottom-pane"))
	  (p/ &copy #`" 2006 Kahua Project    Kagoiri Musume ver ,*kagoiri-musume-version*")))))

;
; simple page for no permission check
;
(define (simple-page . body)
  (page-base
   (h1/ *kagoiri-musume-title*)
   (hr/)
   (node-set body)))

;
; kagoiri-musume-page-template
;
(define (kagoiri-page . body)
  (page-base
   ;; navi-link
   (div/ (@/ (id "header"))
         (h1/ (@/ (class "title")) (a/cont/ *kagoiri-musume-title*))
         (div/
          (@/ (id "header-action"))
          (unless/ (kahua-current-user)
	    (a/cont/ (@/ (class "clickable"))
		     (@@/ (cont mypage))
		     ($$ "Login")))
          (when/ (kahua-current-user)
	    (node-set/
	     (when/ (admin?)
	       (a/cont/
		(@/ (class "clickable"))
		(@@/ (cont admin-system))
		($$ "システム管理")))
	     (span/ ($$ " Now login:")
		    (a/cont/ (@/ (class "clickable"))
			     (@@/ (cont mypage))
			     (kahua-current-user-name)))))
          (when/ (kahua-current-user)
	    (a/cont/
	     (@/ (class "clickable"))
	     (@@/ (cont logout)) ($$ "Logout")))
          (when/ (kahua-current-user)
	    (form/cont/ (@/ (class "searchbox"))
			(@@/ (cont search))
			(input/ (@/ (type "text") (name "word") (size 10)))
			(input/ (@/ (type "submit") (value ($$ "検索"))))))))
   (div/ (@/ (id "body"))
         (node-set body))))

;
; partial continuation login page
;
(define (login-pc-page cont checker message . errmsg)
  (let/pc k
    (when cont
      (set! k cont))
    (kagoiri-page
     (h1/ ($$ "籠入娘。へようこそ！"))
     (h3/ message)
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword name pass)
                    (let1 user (and-let* ((kuser (kahua-check-user name pass)))
				  (checker kuser))
		       (if user
			   (k user)
			   (login-pc-page k checker message))))))
      (table/
       (tr/ (th/ "Login Name")
	    (td/ (input/ (@/ (type "text") (name "name") (id "focus")
			     (value "")))))
       (tr/ (th/ "Password")
	    (td/ (input/ (@/ (type "password") (name "pass")
			     (value ""))))))
      (input/ (@/ (type "submit") (name "submit") (value "login")))
      (map/ (lambda (m)
	      (p/ (@/ (class "warning")) m))
	    errmsg)))))

(define-entry (logout)
  (error-log-write 'Logging 5 #`"logout")
  (set! (kahua-current-user) #f)
  (redirect-page))

;
; redirect page
;
(define (redirect-page . path)
  (let1 path (get-optional path "")
    (html/ (extra-header/
	    (@/ (name "Status") (value "302 Found")))
	   (extra-header/
	    (@/ (name "Location")
		(value (kahua-self-uri-full path)))))))


(define-method navigation/ ((unit <unit>))
  (node-set/
   (div/ (@/ (id "navigation"))
         (a/cont/ ($$ "トップ"))
         " > "
         (span/ (@/ (class "current"))
                (link-of unit)))
   (navigation-action/

    (pa$ equal? "new")
    (link-of unit :action "new" :body ($$ "娘加入"))

    string->number
    (link-of unit :body ($$ "一覧"))

    (pa$ equal? "edit")
    (link-of unit :action "edit" :body ($$ "設定")))))


(define-method navigation/ ((musume <musume>))
  (node-set/
   (div/ (@/ (id "navigation"))
         (a/cont/ ($$ "トップ"))
         " > "
         (link-of (unit-of musume))
         " > "
         (span/ (@/ (class "current"))
                (link-of musume)))
   (navigation-action/
    not
    (a/cont/
     (@@/ (cont add-bookmark musume))
     (span/ (@/ (id "bookmark-button"))
            ($$ "ブックマーク追加")))

    string->number
    (link-of (unit-of musume) :body ($$ "一覧"))

    (pa$ equal? "edit")
    (link-of musume :action "edit" :body ($$ "設定")))))

(define-method navigation/ nodes
  (node-set/
   (div/ (@/ (id "navigation"))
         (span/ (@/ (class "current"))
                (a/cont/ ($$ "トップ")))
         (when/ (not (null? nodes))
           (apply node-set/
                  " > "
                  (intersperse " > "
                               nodes))))
   (navigation-action/
    (pa$ equal? "new")
    (link-of :action "new" :body ($$ "ユニット結成"))

    not
    (link-of :body ($$ "一覧"))
    )))

(define-method navigation/ ((fan <fan>) name)
  (node-set/
   (div/ (@/ (id "navigation"))
         (span/ (@/ (class "current"))
                (a/cont/ ($$ "トップ")))
         " > "
         (span/ (@/ (class "label"))
                "マイページ")
         " > "
         (span/ (@/ (class "label"))
                name))
   (navigation-action/
    (pa$ equal? "calender")
    (a/cont/ (@@/ (cont mypage "calender")) ($$ "カレンダー"))
    (pa$ equal? "todo")
    (a/cont/ (@@/ (cont mypage "todo")) ($$ "TODO"))
    (pa$ equal? "recent")
    (a/cont/ (@@/ (cont mypage "recent")) ($$ "最近の更新"))
    (pa$ equal? "bookmark")
    (a/cont/ (@@/ (cont mypage "bookmark")) ($$ "ブックマーク"))
    (pa$ equal? "")
    (a/cont/ (@@/ (cont change-passwd)) ($$ "パスワード変更"))
    )))

(define (navigation-action/ . node-pairs)
  (let* ((path-info (kahua-context-ref "x-kahua-path-info"))
         (name (and (not (null? path-info))
                    (last path-info))))
    ;; ブラウザが'display:inline-box'をサポートするまでは
    ;; tableで対応
    (table/
     (@/ (id "navigation-action"))
     (tr/
      (node-set
       (let loop ((node-pairs node-pairs)
                  (nodes '()))
         (if (null? node-pairs)
             (reverse nodes)
	     (loop (cddr node-pairs)
		   (cons
		    (td/ (@/ (class (and ((car node-pairs) name) "current")))
			 (cadr node-pairs))
		    nodes)))))))))
