;; -*- coding: euc-jp; mode: scheme -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: kagoiri-musume.kahua,v 1.67 2005/10/01 09:21:47 shibata Exp $
;;
;; include
;; use
(use gauche.charconv)
(use gauche.logger)
(use rfc.base64)
(use srfi-13)
(use srfi-19)
(use util.list)
(use srfi-1)
(use gauche.collection)
(use gauche.sequence)

(use sendmail)

(load "kagoiri-musume/version.kahua")
(load "kagoiri-musume/local.kahua")
(load "kagoiri-musume/class.kahua")
(load "kagoiri-musume/search.kahua")

; logging
;

;
; page base
;
(define (page-base . body)
  (html/
   (head/ (title/ *kagoiri-musume-title*)
	  (meta/ (@/ (http-equiv "Content-type")
		     (content "text/html; charset=euc-jp")))
	  (link/ (@/ (rel "stylesheet") (type "text/css")
		     (href (kahua-static-document-url
			    "kagoiri-musume/kagoiri-musume.css")))))
   (body/
    (node-set body))))

;
; simple page for no permission check
;
(define (simple-page . body)
  (page-base
   (h1/ *kagoiri-musume-title*)
   (hr/)
   (node-set body)))

;
; kagoiri-musume-page-template
;
(define (kagoiri-page . body)
  (page-base
   ;; navi-link
   (table/ (tr/ (td/ (h1/ *kagoiri-musume-title*))
		(td/ (a/cont/
		      (@@/ (cont kagoiri)) "トップ"))
		(td/ (a/cont/
		      (@@/ (cont admin-system)) "システム管理"))
		(td/ (a/cont/
		      (@@/ (cont unit-list)) "ユニット一覧"))
                (if (not (kahua-current-user))
		    (td/
                     (a/cont/ (@@/ (cont mypage))
                              "[[login]]"))"")
		(if (kahua-current-user)
		    (td/ (a/cont/
			  (@@/ (cont change-passwd)) "パスワード変更")) "")
		(if (kahua-current-user)
		    (td/ (a/cont/
			  (@@/ (cont logout)) "[[Logout]]")) "")
                (if (kahua-current-user)
                    (td/ (form/cont/
                        (@@/ (cont search))
                        "検索:"
                        (input/ (@/ (type "text") (name "word") (size 10))))) "")
		(if (kahua-current-user)
		    (td/
                     " Now login:"
                     (a/cont/ (@@/ (cont mypage))
                              (ref (kahua-current-user) 'login-name))) "")
                ))
   (hr/)
   (node-set body)))

;
; permission check page
;
; [checker]
; checker is a predicate for <kahua-user> object.
; return value is #f or <kahua-user> object.
; So, at default, this template check whether kahua-user or not,
; therefore, you write additional check.
; If you care only kahua-user or not, you set identity as checker.
;
(define-syntax permission-check-page
  (syntax-rules ()
    ((_ checker msg body ...)
     (begin
       (or (and (kahua-current-user)
                (checker (kahua-current-user)))
           ;; new account set
           (set! (kahua-current-user)
               (ref (login-pc-page #f checker msg) 'login-name)))
       (kagoiri-page (node-set (list body ...)))))))


;
; maybe, redirect-page will called at the end of begin-body.
;
(define-syntax permission-check-logic
  (syntax-rules ()
    ((_ checker msg begin-body)
     (begin
       (or (and (kahua-current-user)
                (checker (kahua-current-user)))
           ;; new account set
           (set! (kahua-current-user)
               (ref (login-pc-page #f checker msg) 'login-name)))
       begin-body))))

;
; partial continuation login page
;
(define (login-pc-page cont checker message . errmsg)
  (let/pc k
      (if cont
	  (set! k cont))
    (kagoiri-page
     (h1/ "籠入娘。へようこそ")
     (h3/ message)
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword name pass)
		     (let1 user (and-let* ((kuser (kahua-check-user name pass)))
				  (checker kuser))
		       (if user
			   (k user)
			   (login-pc-page k checker message))))))
      (table/
       (tr/ (th/ "Login Name")
	    (td/ (input/ (@/ (type "text") (name "name")
			     (value "")))))
       (tr/ (th/ "Password")
	    (td/ (input/ (@/ (type "password") (name "pass")
			     (value ""))))))
      (input/ (@/ (type "submit") (name "submit") (value "login")))
      (map/ (lambda (m)
	      (p/ (@/ (class "warning")) m))
	    errmsg)))))

(define-entry (logout)
  (set! (kahua-current-user) #f)
  (redirect-page))

;
; redirect page
;
(define (redirect-page . path)
  (let1 path (get-optional path "")
    (html/ (extra-header/
	    (@/ (name "Status") (value "302 Moved")))
	   (extra-header/
	    (@/ (name "Location")
		(value (string-append (kahua-self-uri-full) path)))))))

;
; No Check
;
(define-entry (kagoiri)
  (kagoiri-page
   (h2/ "籠入娘。へようこそ！")
   (ul/ (li/ (a/cont/ (@@/ (cont admin-system)) "システム設定管理画面"))
	(li/ (a/cont/ (@@/ (cont unit-list)) "ユニット一覧")))
   ))

(define-entry (admin-system)
  (permission-check-page
   ;; checker: admin role?
   (lambda (u)
     (if (kahua-user-has-role? u '(admin))
	 u #f))
   "システム管理者のアカウントが必要です"
   (h2/ "籠入娘。システム設定管理画面")

   (hr/)

   ;;暫定コード
   (a/cont/ (@@/ (cont (lambda ()
			 (make-kahua-collection <unit>)
			 (make-kahua-collection <musume>)
			 (make-kahua-collection <music>)
			 (redirect-page "admin-system"))))
	    "クラス変更初期化ボタン")
   (hr/)

   (form/cont/
    (@@/ (cont (entry-lambda (:keyword login-name passwd email admin delete)
		   (if (not (string-null? login-name))
		       (if (not (kahua-find-user login-name))
			   ;; new creation
			   (if (equal? "on" admin)
			       (add-fan login-name passwd email 'admin 'user)
			       (add-fan login-name passwd email 'user))
			   ;; modify user
			   (let ((fan-prop (find-kahua-instance <fan-property> login-name))
				 (fan (find-kahua-instance <kahua-user> login-name)))
			     (if (not (string-null? email))
				 (set! (email-of fan-prop) email))
			     (set! (ref fan 'role-alist) (if (equal? "on" admin)
							     '(admin user)
							     '(user)))
			     (set! (get-delete-flag fan-prop) (if (equal? "on" delete) #t #f))
			     ))
		       )
		 (redirect-page "admin-system"))))
    (table/
     (thead/ "登録ユーザ一覧")
     (tr/ (th/ "管理者権限") (th/ "ログイン名") (th/ "メールアドレス") (th/ "隠密"))
     (map/ (lambda (f)
	     (tr/ (td/ (if (member 'admin
				   (ref (kahua-find-user (fan-name-of f)) 'role-alist))
			   "＊" ""))
		  (td/ (fan-name-of f)) (td/ (email-of f))
		  (td/ (if (get-delete-flag f) "＊" ""))))
	   (filter (lambda (f)
		     (not (equal? "   " (fan-name-of f))))
		   (make-kahua-collection <fan-property>))))
    (table/
     (tr/ (th/ "管理者権限") (th/ "ログイン名") (th/ "パスワード") (th/ "メールアドレス") (th/ "隠密"))
     (tr/ (td/ (input/ (@/ (type "checkbox") (name "admin")) "off"))
	  (td/ (input/ (@/ (type "text") (name "login-name")) ""))
	  (td/ (input/ (@/ (type "password") (name "passwd")) ""))
	  (td/ (input/ (@/ (type "text") (name "email")) ""))
	  (td/ (input/ (@/ (type "checkbox") (name "delete")) "off")))
     (tr/ (td/ (input/ (@/ (type "submit") (name "submit") (value "ファン登録"))))))
    (div/ (@/ (class "message")) "既存ログイン名で登録するとパスワード以外変更できます"))

   (hr/)

   (form/cont/
    (@@/ (cont (entry-lambda (:keyword u fallout)
		   (redirect-page "admin-system"))))
    (table/
     (thead/ "登録ユニット一覧")
     (tr/ (th/ "ユニット名") (th/ "概要") (th/ "活動状態"))
     (node-set
      (map (lambda (u)
	     (tr/ (td/ (unit-name-of u))
		  (td/ (description-of u))
		  (td/ (a/cont/ (@@/ (cont (lambda ()
					     (set! (fallout-of u) (not (fallout-of u)))
					     (redirect-page "admin-system"))))
				(if (fallout-of u) "休止" "活動")))))
	   (make-kahua-collection <unit>)))))

   (hr/)

   (form/cont/
    (@@/ (cont (entry-lambda (:keyword id disp level delete)
		   (if (not (find-kahua-instance <priority> id))
		       (make <priority>
			 :priorityid id
			 :disp-name disp
			 :level (x->integer level)
			 :delete (if (equal? "on" delete) #t #f))
		       (let1 p (find-kahua-instance <priority> id)
			 (if (not (string-null? disp))
			     (set! (disp-name-of p) disp))
			 (set! (level-of p) (x->integer level))
			 (set! (delete-of p) (if (equal? "on" delete) #t #f))))
		 (redirect-page "admin-system"))))
    (table/
     (thead/ "登録優先度一覧")
     (tr/ (th/ "優先度ID") (th/ "表示名") (th/ "レベル") (th/ "無効"))
     (map/ (lambda (p)
	     (tr/ (td/ (priorityid-of p)) (td/ (disp-name-of p))
		  (td/ (x->string (level-of p)))
		  (td/ (if (delete-of p) "＊" ""))))
	   (map identity
		(make-kahua-collection <priority>))))
    (table/ (tr/ (th/ "優先度ID") (th/ "表示名") (th/ "無効"))
	    (tr/ (td/ (input/ (@/ (type "text") (name "id")) ""))
		 (td/ (input/ (@/ (type "text") (name "disp")) ""))
		 (td/ (select/ (@/ (name "level"))
			       (map/ (lambda (l)
				       (option/ (@/ (value l)) l))
				     '("1" "2" "3" "4" "5"))))
		 (td/ (input/ (@/ (type "checkbox") (name "delete")) "off")))
	    (tr/ (td/ (input/ (@/ (type "submit") (name "submit") (value "登録")))))))

   (hr/)

   (form/cont/
    (@@/ (cont (entry-lambda (:keyword id disp delete)
		   (if (not (find-kahua-instance <status> id))
		       (make <status>
			 :statusid id
			 :disp-name disp
			 :delete (if (equal? "on" delete) #t #f))
		       (let1 s (find-kahua-instance <status> id)
			 (if (not (string-null? disp))
			     (set! (disp-name-of s) disp))
			 (set! (delete-of s) (if (equal? "on" delete) #t #f))))
		 (redirect-page "admin-system"))))
    (table/
     (thead/ "登録ステータス一覧")
     (tr/ (th/ "ステータスID") (th/ "表示名") (th/ "無効"))
     (map/ (lambda (s)
	     (tr/ (td/ (statusid-of s)) (td/ (disp-name-of s))
		  (td/ (if (delete-of s) "＊" ""))))
	   (map identity
		(make-kahua-collection <status>))))
    (table/ (tr/ (th/ "ステータスID") (th/ "表示名") (th/ "無効"))
	    (tr/ (td/ (input/ (@/ (type "text") (name "id")) ""))
		 (td/ (input/ (@/ (type "text") (name "disp")) ""))
		 (td/ (input/ (@/ (type "checkbox") (name "delete")) "off")))
	    (tr/ (td/ (input/ (@/ (type "submit") (name "submit") (value "登録")))))))

   (hr/)

   (form/cont/
    (@@/ (cont (entry-lambda (:keyword id disp delete)
		   (if (not (find-kahua-instance <type> id))
		       (make <type>
			 :typeid id
			 :disp-name disp
			 :delete (if (equal? "on" delete) #t #f))
		       (let1 t (find-kahua-instance <type> id)
			 (if (not (string-null? disp))
			     (set! (disp-name-of t) disp))
			 (set! (delete-of t) (if (equal? "on" delete) #t #f))))
		 (redirect-page "admin-system"))))
    (table/
     (thead/ "登録タイプ一覧")
     (tr/ (th/ "タイプID") (th/ "表示名") (th/ "無効"))
     (map/ (lambda (t)
	     (tr/ (td/ (typeid-of t)) (td/ (disp-name-of t))
		  (td/ (if (delete-of t) "＊" ""))))
	   (map identity
		(make-kahua-collection <type>))))
    (table/ (tr/ (th/ "タイプID") (th/ "表示名") (th/ "無効"))
	    (tr/ (td/ (input/ (@/ (type "text") (name "id")) ""))
		 (td/ (input/ (@/ (type "text") (name "disp")) ""))
		 (td/ (input/ (@/ (type "checkbox") (name "delete")) "off")))
	    (tr/ (td/ (input/ (@/ (type "submit") (name "submit") (value "登録")))))))

   (hr/)

   (form/cont/
    (@@/ (cont (entry-lambda (:keyword id disp delete)
		   (if (not (find-kahua-instance <category> id))
		       (make <category>
			 :categoryid id
			 :disp-name disp
			 :delete (if (equal? "on" delete) #t #f))
		       (let1 c (find-kahua-instance <category> id)
			 (if (not (string-null? disp))
			     (set! (disp-name-of c) disp))
			 (set! (delete-of c) (if (equal? "on" delete) #t #f))))
		 (redirect-page "admin-system"))))
    (table/
     (thead/ "登録カテゴリ一覧")
     (tr/ (th/ "カテゴリID") (th/ "表示名") (th/ "無効"))
     (map/ (lambda (c)
	     (tr/ (td/ (categoryid-of c)) (td/ (disp-name-of c))
		  (td/ (if (delete-of c) "＊" ""))))
	   (map identity
		(make-kahua-collection <category>))))
    (table/ (tr/ (th/ "カテゴリID") (th/ "表示名") (th/ "無効"))
	    (tr/ (td/ (input/ (@/ (type "text") (name "id")) ""))
		 (td/ (input/ (@/ (type "text") (name "disp")) ""))
		 (td/ (input/ (@/ (type "checkbox") (name "delete")) "off")))
	    (tr/ (td/ (input/ (@/ (type "submit") (name "submit") (value "登録")))))))
   (hr/)

   ))

(define-entry (unit-list)
  (permission-check-page identity "ユニット一覧は一般ユーザアカウントが必要です"
   (h2/ "ユニット一覧")
   (table/ (@/ (class "listing"))
           (thead/
    (tr/ (th/) (th/)
	 (th/ "ユニット名")
	 (th/ "概要")
	 (th/ "ファン")))
           (tbody/
            (node-set
    (map-with-index (lambda (idx u)
	    (tr/ (@/ (class (if (odd? idx) "odd" "even")))
                       (td/ (a/cont/
		       (@@/ (cont unit-edit (key-of u)))
		       "編集"))
		 (td/ (a/cont/
                       (@/ (onClick "return confirm('本当に削除しますか？')?true:false"))
		       (@@/ (cont unit-fallout (key-of u)))
		       "削除"))
		 (td/ (a/cont/
		       (@@/ (cont musume-list (key-of u)))
		       (unit-name-of u))
                      (format " (~a)"
                              (- (ref u 'next-musume-no) 1)))
		 (td/ (description-of u))
		 (td/ (string-join (filter-map (lambda (f)
                                                 (and (not (equal? "   " f))
                                                      (fan-name-of f)))
					   (fans-of u)) " , "))))
	  (all-units)))))
   (hr/)
   (h2/ "新ユニット結成")
   (form/cont/
    (@@/ (cont (entry-lambda (:keyword name desc)
		   (and (not (string-null? name))
			(or (find-kahua-instance <unit> name)
			    (make <unit>
			      :unit-name name
			      :description desc
			      :fans (id-list->obj-list <fan-property> (kahua-context-ref* "fans"))
			      :priorities (id-list->obj-list <priority> (kahua-context-ref* "priority"))
			      :statuss (id-list->obj-list <status> (kahua-context-ref* "status"))
			      :types (id-list->obj-list <type> (kahua-context-ref* "type"))
			      :categories (id-list->obj-list <category> (kahua-context-ref* "category"))
			      )))
		 (redirect-page "unit-list"))))
    (table/
     (tr/ (th/ "優先度")
	  (th/ "ステータス")
	  (th/ "タイプ")
	  (th/ "カテゴリ"))
     (tr/ (td/
	   (select/ (@/ (name "priority") (size "5") (multiple "true"))
		    (map/ (lambda (p)
			    (option/ (@/ (value (priorityid-of p)))
				     (disp-name-of p)))
			  (all-priorities))))
	  (td/
	   (select/ (@/ (name "status") (size "5") (multiple "true"))
		    (map/ (lambda (s)
			    (option/ (@/ (value (statusid-of s)))
				     (disp-name-of s)))
			  (all-statuss))))
	  (td/
	   (select/ (@/ (name "type") (size "5") (multiple "true"))
		    (map/ (lambda (t)
			    (option/ (@/ (value (typeid-of t)))
				     (disp-name-of t)))
			  (all-types))))
	  (td/
	   (select/ (@/ (name "category") (size "5") (multiple "true"))
		    (map/ (lambda (c)
			    (option/ (@/ (value (categoryid-of c)))
				     (disp-name-of c)))
			  (all-categories))))))
    (table/
     (tr/ (td/ "ユニット名")
	  (td/
	   (textarea/ (@/ (type "text") (name "name")
			  (rows 1) (cols 32)) "")))
     (tr/ (td/ "概要")
	  (td/
	   (textarea/ (@/ (type "text") (name "desc")
			  (rows 10) (cols 80)) "")))
     (tr/ (td/ "ファン")
	  (td/
	   (select/ (@/ (name "fans") (size "5") (multiple "true"))
		    (map/ (lambda (f)
			    (option/ (@/ (value f)) f))
			  (all-fans)))))
     )
    (input/ (@/ (type "submit") (name "submit") (value "新ユニット結成"))))
   ))


(define-entry (unit-edit unit-id)
  (let1 unit (find-kahua-instance <unit> unit-id)
    (permission-check-page
     (lambda (u)
       (if (viewable? unit u)
	   u #f))
     #`"『,(unit-name-of unit)』のファンとしてのアカウントが必要です"
     (h2/ #`"『,(unit-name-of unit)』ユニット編集")
     (hr/)
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword name desc)
		     (begin
		       (if (not (string-null? name))
			   (set! (unit-name-of unit) name))
		       (set! (description-of unit) desc)
		       (set! (fans-of unit) (id-list->obj-list <fan-property> (kahua-context-ref* "fans")))
		       (set! (priorities-of unit) (id-list->obj-list <priority> (kahua-context-ref* "priority")))
		       (set! (statuss-of unit) (id-list->obj-list <status> (kahua-context-ref* "status")))
		       (set! (types-of unit) (id-list->obj-list <type> (kahua-context-ref* "type")))
		       (set! (categories-of unit) (id-list->obj-list <category> (kahua-context-ref* "category")))
		       (redirect-page "unit-list"))
		   (redirect-page "unit-list"))))
      (table/
       (tr/ (th/ "優先度")
	    (th/ "ステータス")
	    (th/ "タイプ")
	    (th/ "カテゴリ"))
       (tr/ (td/
	     (select/ (@/ (name "priority") (size "5") (multiple "true"))
		      (map/ (lambda (p)
                              (option/ (@/ (value (priorityid-of p))
                                           (selected (has-priority? unit p)))
                                       (disp-name-of p)))
			    (all-priorities))))
	    (td/
	     (select/ (@/ (name "status") (size "5") (multiple "true"))
		      (map/ (lambda (s)
                              (option/ (@/ (value (statusid-of s))
                                           (selected (has-status? unit s)))
                                       (disp-name-of s)))
			    (all-statuss))))
	    (td/
	     (select/ (@/ (name "type") (size "5") (multiple "true"))
		      (map/ (lambda (t)
                              (option/ (@/ (value (typeid-of t))
                                           (selected (has-type? unit t)))
                                       (disp-name-of t)))
			    (all-types))))
	    (td/
	     (select/ (@/ (name "category") (size "5") (multiple "true"))
		      (map/ (lambda (c)
                              (option/ (@/ (value (categoryid-of c))
                                           (selected (has-category? unit c)))
                                       (disp-name-of c)))
			    (all-categories))))))
      (table/
       (tr/ (td/ "ユニット名")
	    (td/
	     (textarea/ (@/ (type "text") (name "name")
			    (rows 1) (cols 32))
			(unit-name-of unit))))
       (tr/ (td/ "概要")
	    (td/
	     (textarea/ (@/ (type "text") (name "desc")
			    (rows 10) (cols 80))
			(description-of unit))))
       (tr/ (td/ "ファン")
	    (td/
	     (select/ (@/ (name "fans") (size "5") (multiple "true"))
		      (map/ (lambda (f)
                              (let1 fan-name (fan-name-of f)
                                (option/ (@/ (value fan-name)
                                             (selected (fan-to? unit f)))
                                         fan-name)))
                            (filter lucky-fan?
                                    (make-kahua-collection <fan-property>))))))
       )
      (input/ (@/ (type "submit") (name "submit") (value "確定"))))
     )))

; TODO: check account
;
(define-entry (unit-fallout unit-id)
  (let1 unit (find-kahua-instance <unit> unit-id)
    (define checker (lambda (u)
		      (if (memq (find-kahua-instance <fan-property> (ref u 'login-name))
                                (fans-of unit))
			  u #f)))
    (let1 user (or (and (kahua-current-user)
			(checker (kahua-current-user)))
		   (login-pc-page #f checker))
      (permission-check-logic
       checker
       #`"『,(unit-name-of unit)』のファンとしてのアカウントが必要です"
       (begin
	 (if (checker user)
	     (set! (ref unit 'fallout) #t))
	 (redirect-page "unit-list"))))))

(define-entry (musume-list unit-id :keyword priority status assign type limit)
  (let* ((*default-limit* 200)
	 (*limits-list* '("" "20" "50" "200" "500" "1000"))
	 (*limit* (or limit (x->string *default-limit*)))
         (*status-dict* (make-hash-table 'string=?)))
    (let* ((p-filter (if (or (not priority)
			     (equal? "*all*" priority))
			 identity
			 (lambda (m) (equal? (priorityid-of (priority-of m)) priority))))
	   (s-filter (if (or (not status)
			     (equal? "*all*" status))
			 identity
			 (lambda (m) (equal? (statusid-of (status-of m)) status))))
	   (a-filter (if (or (not assign)
			     (equal? "   " assign))
			 identity
			 (lambda (m) (equal? (fan-name-of (assign-of m)) assign))))
	   (t-filter (if (or (not type)
			     (equal? "*all*" type))
			 identity
			 (lambda (m) (equal? (typeid-of (type-of m)) type))))
	   (and-filter (lambda (m)
                         (let1 statusid (statusid-of (status-of m))
                           (hash-table-put!
                            *status-dict*
                            statusid
                            (+ (hash-table-get *status-dict* statusid 0) 1)))
                         (and (p-filter m)
                              (s-filter m)
                              (a-filter m)
                              (t-filter m))))
	   (limiter (if (string-null? *limit*)
			identity
			(lambda (ms)
			  (take* ms (x->integer *limit*))))))
      (let1 unit (find-kahua-instance <unit> unit-id)
	(permission-check-page
	 (lambda (u)
	   (if (viewable? unit u)
	       u #f))
	 #`"『,(unit-name-of unit)』のファンであるアカウントが必要です"
	 (ul/ (li/ (a/cont/ (@@/ (cont musume-list unit-id)) "娘。一覧"))
	      (li/ (a/cont/ (@@/ (cont musume-new unit-id)) "新しい娘。")))
         (form/cont/
          (@@/ (cont search `(unit-id ,unit-id)))
          "ユニット内検索:"
          (input/ (@/ (type "text") (name "word") (size 10)))
          (input/ (@/ (type "submit") (value "検索"))))
	 (h2/ (unit-name-of unit) " - 娘。一覧")
	 (form/cont/ (@@/ (cont musume-list unit-id))
		     (table/
		      (tr/ (th/ "優先度")
			   (th/ "ステータス")
			   (th/ "アサイン")
			   (th/ "タイプ")
			   (th/ "表示上限"))
		      (tr/
		       (td/
			(select/
			 (@/ (name "priority"))
			 (node-set
			  (cons (option/ (@/ (value "*all*")) "全て")
				(map (lambda (p)
				       (if (equal? (priorityid-of p) priority)
					   (option/ (@/ (value (priorityid-of p)) (selected "true"))
						    (disp-name-of p))
					   (option/ (@/ (value (priorityid-of p)))
						    (disp-name-of p))))
                                     (priorities-of unit))))))
		       (td/
			(select/
			 (@/ (name "status"))
			 (node-set
			  (cons (option/ (@/ (value "*all*")) "全て")
				(map (lambda (s)
				       (if (equal? (statusid-of s) status)
					   (option/ (@/ (value (statusid-of s)) (selected "true"))
						    (disp-name-of s))
					   (option/ (@/ (value (statusid-of s)))
						    (disp-name-of s))))
                                     (statuss-of unit))))))
		       (td/
			(select/
			 (@/ (name "assign"))
			 (map/ (lambda (a)
				 (if (equal? (fan-name-of a) assign)
				     (option/ (@/ (value (fan-name-of a)) (selected "true"))
					      (fan-name-of a))
				     (option/ (@/ (value (fan-name-of a)))
					      (fan-name-of a))))
				    (fans-of unit))))
		       (td/
			(select/
			 (@/ (name "type"))
			 (node-set
			  (cons (option/ (@/ (value "*all*")) "全て")
				(map (lambda (t)
				       (if (equal? (typeid-of t) type)
					   (option/ (@/ (value (typeid-of t)) (selected "true"))
						    (disp-name-of t))
					   (option/ (@/ (value (typeid-of t)))
						    (disp-name-of t))))
                                     (types-of unit))))))
		       (td/
			(select/
			 (@/ (name "limit"))
			 (map/ (lambda (l)
				 (if (equal? *limit* l)
				     (option/ (@/ (value l) (selected "true")) l)
				     (option/ (@/ (value l)) l)))
			       *limits-list*)))
		       (td/ (input/ (@/ (type "submit") (name "submit") (value "絞り込み"))))
		       ))
		     ;; data table
		     (let1 musumes (limiter (sort (filter and-filter
							  (all-musumes unit))
						  (lambda (m1 m2)
						    (> (mno-of m1) (mno-of m2)))))
		       (table/ (@/ (class "listing"))
			(thead/ (cond ((= 0 (length musumes)) "萌えられる娘。がいません(T^T)")
				      ((= 1 (length musumes)) "ただひとりの娘。に萌えました")
				      ((> 100 (length musumes)) #`",(length musumes)人の娘。に萌えました")
				      ((> 500 (length musumes)) #`",(length musumes)人もの娘。に萌えました(萌えすぎです)")
				      (else #`"なんと,(length musumes)人もの娘。に萌えまつきました orz"))
                                (div/ (@/ (id "status-num"))
                                 (map/ (lambda (s)
                                         (let1 statusid (statusid-of s)
                                           (span/ (a/cont/ (@@/ (cont musume-list unit-id  `(status ,statusid)))
                                                           (disp-name-of s))
                                                  (format "(~a) " (hash-table-get *status-dict* statusid 0)))))
                                       (statuss-of unit)))
                                (tr/ (th/ "No.")
                                     (th/ "タイトル")
                                     (th/ "優先度")
                                     (th/ "ステータス")
                                     (th/ "アサイン")
                                     (th/ "タイプ")
                                     (th/ "登録日")))
                        (tbody/
			(map/ (lambda (m)
                                (let1 status (status-of m)
				(tr/ (@/ (class #`"status-,(statusid-of status)"))
                                     (td/ (a/cont/
					   (@@/ (cont musume-edit (key-of m)))
					   (x->string (mno-of m))))
				     (td/ (a/cont/
					   (@@/ (cont melody-list (key-of (unit-id-of m)) (key-of m)))
					   (mname-of m))
                                          (format " (~a)" (length (musics-of m))))
				     (td/ (disp-name-of
                                           (priority-of m)))
				     (td/ (disp-name-of
                                           status))
				     (td/ (fan-name-of
                                           (assign-of m)))
				     (td/ (disp-name-of
                                           (type-of m)))
				     (td/ (sys-strftime "%Y/%m/%d"
							(sys-localtime (ref m 'ctime)))))))
			      musumes)))
		     )))))))

(define-entry (musume-new unit-id)
  (let1 unit (find-kahua-instance <unit> unit-id)
    (permission-check-page
     (lambda (u)
       (if (viewable? unit u)
	   u #f))
     #`"『,(unit-name-of unit)』のファンであるアカウントが必要です"
     (ul/ (li/ (a/cont/ (@@/ (cont musume-list unit-id)) "娘。一覧"))
	  (li/ (a/cont/ (@@/ (cont musume-new unit-id)) "新しい娘。")))
     (h2/ (unit-name-of unit) " - 新しい娘。")
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword name priority status assign type category melody)
		     (if (not (string-null? name))
			 (begin
			   (if (string-null? melody) (set! melody name))
			   (set! melody (string-join (string-split melody "\r\n") "\n"))
			   (let1 musume (make <musume>
					  :unit-id unit
					  :musume-name name
					  :priority (id->obj <priority> priority)
					  :status (id->obj <status> status)
					  :assign (id->obj <fan-property> assign)
					  :type (id->obj <type> type)
					  :category (id->obj <category> category))
			     (let1 music (make <music>
					   :musume-id musume
					   :melody melody
					   :fan-id (id->obj <fan-property> (kahua-current-user-name)))
			       (and-let* ((fans (filter (lambda (fan)
                                                          (not (equal? "   " (fan-name-of fan))))
                                                        (fans-of unit))))
				 (let ((subject  (string-append
						  "=?ISO-2022-JP?B?"
						  (string-join
						   (string-split
						    (base64-encode-string
						     (ces-convert
						      #`"[,(unit-name-of unit)] ,(mno-of musume):,(mname-of musume)"
						      "eucjp" "iso2022jp")) #\newline) "")
						  "?="))
				       (body  (string-join
					       (list
						#`"ポスト: ,(fan-id-of music)"
						#`"日時: ,(sys-strftime \"%Y/%m/%d %H:%M:%S\" (sys-localtime (ref music 'ctime)))"
						#`"ステータス: ,(disp-name-of (status-of musume))"
						#`"優先度: ,(disp-name-of (priority-of musume))"
						#`"タイプ: ,(disp-name-of (type-of musume))"
						#`"カテゴリ: ,(disp-name-of (category-of musume))"
						#`"アサイン: ,(assign-of musume)"
						#`"コメント:,|melody|"
						""
						#`"URL: ,(kahua-self-uri-full)melody-list/,(key-of unit)/,(key-of musume)")
					       "\n")))
				   (for-each (lambda (fan)
					       (sendmail (ref fan 'email)
							 *kagoiri-musume-email*
							 subject
							 body))
					     fans)))))))
		   (redirect-page #`"musume-list/,|unit-id|"))))
      (table/
       (tr/ (th/ "優先度")
	    (th/ "ステータス")
	    (th/ "タイプ")
	    (th/ "カテゴリ")
	    (th/ "アサイン"))
       (tr/
	(td/
	 (select/ (@/ (name "priority"))
		  (map/ (lambda (p)
			  (option/ (@/ (value (priorityid-of p)))
				   (disp-name-of p)))
                        (priorities-of unit))))
	(td/
	 (select/ (@/ (name "status"))
		  (map/ (lambda (s)
			  (option/ (@/ (value (statusid-of s)))
				   (disp-name-of s)))
                        (statuss-of unit))))
	(td/
	 (select/ (@/ (name "type"))
		  (map/ (lambda (t)
			  (option/ (@/ (value (typeid-of t)))
				   (disp-name-of t)))
                        (types-of unit))))
	(td/
	 (select/ (@/ (name "category"))
		  (map/ (lambda (c)
			  (option/ (@/ (value (categoryid-of c)))
				   (disp-name-of c)))
                        (categories-of unit))))
	(td/
	 (select/ (@/ (name "assign"))
		  (map/ (lambda (a)
			  (option/ (@/ (value (fan-name-of a)))
				   (fan-name-of a)))
                        (fans-of unit))))

	(td/ (input/ (@/ (type "submit") (name "submit") (value "新しい娘。加入"))))))
      (table/ (tr/ (td/ "タイトル")
		   (td/ (textarea/ (@/ (type "text") (name "name")
				       (rows 1) (cols 32)) "")))
	      (tr/ (td/ "内容")
		   (td/ (textarea/ (@/ (type "text") (name "melody")
				       (rows 20) (cols 80)) ""))))
      (input/ (@/ (type "submit") (name "submit") (value "新しい娘。加入"))))
     )))

(define-entry (musume-view)
  (permission-check-page identity "ちょいまってや"
   "娘。の閲覧"))

(define-entry (musume-edit musume-id)
  (let* ((musume (find-kahua-instance <musume> musume-id))
	 (unit (unit-id-of musume)))
    (permission-check-page
     identity
     #`"『,(unit-name-of unit)』のファンであるアカウントが必要です"
     (h3/ #`"『,(unit-name-of unit)』の『,(mname-of musume) 』を編集する。")
     "工事中"
     )
    ))

(define-entry (melody-list unit-id musume-id)
  (let ((unit (find-kahua-instance <unit> unit-id))
        (musume (find-kahua-instance <musume> musume-id)))
    (permission-check-page
     (lambda (u)
       (if (viewable? unit u)
	   u #f))
     #`"『,(unit-name-of unit)』のファンであるアカウントが必要です"
     (ul/ (li/ (a/cont/ (@@/ (cont musume-list unit-id)) "娘。一覧"))
	  (li/ (a/cont/ (@@/ (cont musume-new unit-id)) "新しい娘。")))
     (h3/ (unit-name-of unit) " - "
	  (x->string (mno-of musume)) "："
	  (mname-of musume) " - "
	  (disp-name-of
           (status-of musume)))
     (let1 musics (reverse (all-musics musume))
       (map/ (lambda (n f t m)
	       (dl/
		(dt/ #`"#,|n|. ,(sys-strftime \"%Y/%m/%d %H:%M:%S\" (sys-localtime t))[,(fan-name-of f)]")
		(dd/ (pre/ m))))
	     (map (lambda (m) (seq-no-of m)) musics)
	     (map (lambda (m) (fan-id-of m)) musics)
	     (map (lambda (m) (ref m 'ctime)) musics)
	     (map melody-of musics)))
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword melody priority status type assign)
		   (if (not (string-null? melody))
		       (begin
			 (set! melody (string-join (string-split melody "\r\n") "\n"))
			 (let1 music (make <music>
				       :musume-id musume
				       :melody melody
				       :fan-id (current-fan))
			     (set! (priority-of musume) (id->obj <priority> priority))
			     (set! (status-of musume) (id->obj <status> status))
			     (set! (type-of musume) (id->obj <type> type))
			     (set! (assign-of musume) (id->obj <fan-property> assign))
			     (and-let* ((fans (filter (lambda (fan)
                                                          (not (equal? "   " (fan-name-of fan))))
                                                        (fans-of unit))))
			       (let ((subject (string-append
					       "=?ISO-2022-JP?B?"
					       (string-join
						(string-split
						 (base64-encode-string
						  (ces-convert
						   #`"[,(unit-name-of unit)] ,(mno-of musume):,(mname-of musume)"
						   "eucjp" "iso2022jp")) #\newline) "")
					       "?="))
				     (body (string-join
					    (list
					     #`"ポスト: ,(fan-name-of (fan-id-of music))"
					     #`"日時: ,(sys-strftime \"%Y/%m/%d %H:%M:%S\" (sys-localtime (ref music 'ctime)))"
					     #`"ステータス: ,(disp-name-of (status-of musume))"
					     #`"優先度: ,(disp-name-of (priority-of musume))"
					     #`"タイプ: ,(disp-name-of (type-of musume))"
					     #`"カテゴリ: ,(disp-name-of (category-of musume))"
					     #`"アサイン: ,(fan-name-of (assign-of musume))"
					     #`"コメント:,|melody|"
					     ""
					     #`"URL: ,(kahua-self-uri-full)melody-list/,|unit-id|/,|musume-id|")
					    "\n")))
				 (for-each (lambda (fan)
					     (sendmail (ref fan 'email)
						       *kagoiri-musume-email*
						       subject
						       body))
					   fans)))))
                     (begin
			 (set! (priority-of musume) (id->obj <priority> priority))
			 (set! (status-of musume) (id->obj <status> status))
			 (set! (type-of musume) (id->obj <type> type))
			 (set! (assign-of musume) (id->obj <fan-property> assign))))
		   (redirect-page #`"melody-list/,|unit-id|/,|musume-id|"))))
      (table/
       (tr/ (th/ "優先度") (th/ "ステータス") (th/ "タイプ") (th/ "アサイン"))
       (tr/ (td/
	     (select/ (@/ (name "priority"))
		      (map/ (lambda (p)
			      (if (eq? p
                                       (priority-of musume))
				  (option/ (@/ (value (priorityid-of p))
					       (selected "true"))
					   (disp-name-of p))
				  (option/ (@/ (value (priorityid-of p)))
					   (disp-name-of p))))
			    ;; sequencial for time.
                            (priorities-of unit))))
	    (td/
	     (select/ (@/ (name "status"))
		      (map/ (lambda (s)
			      (if (eq? s
                                       (status-of musume))
				  (option/ (@/ (value (statusid-of s))
					       (selected "true"))
					   (disp-name-of s))
				  (option/ (@/ (value (statusid-of s)))
					   (disp-name-of s))))
			    ;; sequencial for time.
                            (statuss-of unit))))
	    (td/
	     (select/ (@/ (name "type"))
		      (map/ (lambda (t)
			      (if (eq? t
                                       (type-of musume))
				  (option/ (@/ (value (typeid-of t))
					       (selected "true"))
					   (disp-name-of t))
				  (option/ (@/ (value (typeid-of t)))
					   (disp-name-of t))))
                            (types-of unit))))
	    (td/
	     (select/ (@/ (name "assign"))
		      (map/ (lambda (a)
			      (if (eq? a
                                       (assign-of musume))
				  (option/ (@/ (value (fan-name-of a))
					       (selected "true"))
					   (fan-name-of a))
				  (option/ (@/ (value (fan-name-of a)))
					   (fan-name-of a))))
                            (fans-of unit))))
	    (td/ (input/ (@/ (type "submit") (name "submit") (value "コミット"))))
	    ))

      (textarea/ (@/ (type "text") (name "melody")
		     (rows 20) (cols 80)) "")
      (input/ (@/ (type "submit") (name "submit") (value "コミット"))))
     )))

(define-entry (mypage)
  (permission-check-page
   identity
   "マイページは一般ユーザアカウントが必要です"
    (fieldset/
     (legend/ "TODO")
     (let1 musumes (let1 fan (current-fan)
                     (filter
                      (lambda (musume)
                        (eq? (assign-of musume) fan))
                      (make-kahua-collection <musume>)))
       (format "~a item(s)" (length musumes))
       (table/ (@/ (class "listing"))
               (thead/ (tr/ (th/ "タイトル")
                            (th/ "優先度")
                            (th/ "ステータス")
                            (th/ "タイプ")
                            (th/ "登録日")))
               (tbody/
                (map/ (lambda (m)
                        (let1 status (status-of m)
                          (tr/ (@/ (class #`"status-,(statusid-of status)"))
                               (td/ (label-of m))
                               (td/ (disp-name-of (priority-of m)))
                               (td/ (disp-name-of status))
                               (td/ (disp-name-of (type-of m)))
                               (td/ (sys-strftime "%Y/%m/%d"
                                                  (sys-localtime (ref m 'ctime)))))))
                      musumes)))))))

(define (change-passwd . message)
  (let* ((cuser (kahua-current-user))
	 (cuser-name (ref cuser 'login-name)))
    (permission-check-page
     identity
     #`"パスワード変更には一般ユーザのアカウントが必要です"
     (h3/ #`",|cuser-name| さんのパスワード変更")
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword old-pw new-pw new-again-pw)
		   (cond ((or (equal? "" new-pw)
			      (equal? "" new-again-pw)
			      (not (equal? new-pw new-again-pw)))
			  (change-passwd "新パスワードが不正です"))
			 ((not (kahua-check-user cuser-name old-pw))
			  (change-passwd "旧パスワードが不正です"))
			 (else
			  (kahua-user-password-change-force cuser new-pw)
			  (message-only-page #`",|cuser-name| さんのパスワードを変更しました"))))))
      (table/
       (tr/ (th/ "旧パスワード")
	    (td/ (input/ (@/ (type "password") (name "old-pw")
			     (value "")) "")))
       (tr/ (th/ "新パスワード")
	    (td/ (input/ (@/ (type "password") (name "new-pw")
			     (value "")) "")))
       (tr/ (th/ "新パスワード(確認)")
	    (td/ (input/ (@/ (type "password") (name "new-again-pw")
			     (value "")) ""))))
      (input/ (@/ (type "submit") (name "submit") (value "変更")))
      (p/ (@/ (class "warning")) (node-set message))
      ))))

(define (message-only-page . message)
  message
  (kagoiri-page
   (div/ (@/ (class "msgbox"))
	 (h3/ (node-set message)))))



;
; initialization
;

(initialize-main-proc kagoiri)
