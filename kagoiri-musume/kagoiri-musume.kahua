;; -*- coding: euc-jp; mode: scheme -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: kagoiri-musume.kahua,v 1.34 2005/09/24 15:04:38 cut-sea Exp $
;;
;; include
;; use
(use gauche.charconv)
(use gauche.logger)
(use rfc.base64)
(use srfi-13)
(use srfi-19)
(use util.list)
(use gauche.collection)

(use sendmail)

(load "kagoiri-musume/version.kahua")
(load "kagoiri-musume/local.kahua")
(load "kagoiri-musume/class.kahua")

; logging
;
(log-open (kahua-logpath "kagoiri-musume.log"))
(log-format "~A: open" (kahua-logpath "kagoiri-musume.log"))

;
; page base
;
(define (page-base . body)
  (html/
   (head/ (title/ *kagoiri-musume-title*)
	  (meta/ (@/ (http-equiv "Content-type")
		     (content "text/html; charset=euc-jp")))
	  (link/ (@/ (rel "stylesheet") (type "text/css")
		     (href (kahua-static-document-url
			    "kagoiri-musume/kagoiri-musume.css")))))
   (body/
    (node-set body))))

;
; simple page for no permission check
;
(define (simple-page . body)
  (page-base
   (h1/ *kagoiri-musume-title*)
   (hr/)
   (node-set body)))

;
; kagoiri-musume-page-template
;
(define (kagoiri-page . body)
  (page-base
   ;; navi-link
   (table/ (tr/ (td/ (h1/ *kagoiri-musume-title*))
		(td/ (a/cont/
		      (@@/ (cont kagoiri)) "トップ"))
		(td/ (a/cont/
		      (@@/ (cont admin-system)) "システム管理"))
		(td/ (a/cont/
		      (@@/ (cont unit-list)) "ユニット一覧"))
		(if (kahua-current-user)
		    (td/ (a/cont/
			  (@@/ (cont change-passwd)) "パスワード変更")) "")
		(if (kahua-current-user)
		    (td/ (a/cont/
			  (@@/ (cont logout)) "[[Logout]]")) "")
		(if (kahua-current-user)
		    (td/ #`" Now login: ,(ref (kahua-current-user) 'login-name)") "")
		))
   (hr/)
   (node-set body)))

;
; permission check page
;
; [checker]
; checker is a predicate for <kahua-user> object.
; return value is #f or <kahua-user> object.
; So, at default, this template check whether kahua-user or not,
; therefore, you write additional check.
; If you care only kahua-user or not, you set identity as checker.
;
(define (permission-check-page checker . body)
  (let1 user (or (and (kahua-current-user)
		      (checker (kahua-current-user)))
		 (login-pc-page #f checker))
    ;; new account set
    ((setter kahua-current-user) (ref user 'login-name))
    (kagoiri-page (node-set body))))

;
; maybe, redirect-page will called at the end of begin-body.
;
(define (permission-check-logic checker begin-body)
  (let1 user (or (and (kahua-current-user)
		      (checker (kahua-current-user)))
		 (login-pc-page #f checker))
    ((setter kahua-current-user) (ref user 'login-name))
    begin-body))


;
; partial continuation login page
;
(define (login-pc-page cont checker . message)
  (let/pc k
      (if cont
	  (set! k cont))
    (kagoiri-page
     (h1/ "籠入娘。へようこそ")
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword name pass)
		     (let1 user (and-let* ((kuser (kahua-check-user name pass)))
				  (checker kuser))
		       (if user
			   (k user)
			   (login-pc-page k checker "アカウントが必要です"))))))
      (table/
       (tr/ (th/ "Login Name")
	    (td/ (input/ (@/ (type "text") (name "name")
			     (value "")))))
       (tr/ (th/ "Password")
	    (td/ (input/ (@/ (type "password") (name "pass")
			     (value ""))))))
      (input/ (@/ (type "submit") (name "submit") (value "login")))
      (h5/ (node-set message))))))

(define-entry (logout)
  (set! (kahua-current-user) #f)
  (redirect-page))

;
; redirect page
;
(define (redirect-page . path)
  (let1 path (get-optional path "")
    (html/ (extra-header/
	    (@/ (name "Status") (value "302 Moved")))
	   (extra-header/
	    (@/ (name "Location")
		(value (string-append (kahua-self-uri-full) path)))))))

;
; No Check
;
(define-entry (kagoiri)
  (kagoiri-page
   (h2/ "籠入娘。へようこそ！")
   (ul/ (li/ (a/cont/ (@@/ (cont admin-system)) "システム設定管理画面"))
	(li/ (a/cont/ (@@/ (cont unit-list)) "ユニット一覧")))
   ))

(define-entry (admin-system)
  (permission-check-page
   ;; checker: admin role?
   (lambda (u)
     (if (kahua-user-has-role? u '(admin))
	 u #f))
   (h2/ "籠入娘。システム設定管理画面")
   "工事中"
   ))

(define-entry (unit-list)
  (permission-check-page identity
   (h2/ "ユニット一覧")
   (table/
    (tr/ (th/) (th/)
	 (th/ "ユニット名")
	 (th/ "概要")
	 (th/ "ファン"))
    (map/ (lambda (u)
	    (tr/ (td/ (a/cont/
		       (@@/ (cont unit-edit (key-of u)))
		       "編集"))
		 (td/ (a/cont/
		       (@@/ (cont unit-fallout (key-of u)))
		       "削除"))
		 (td/ (a/cont/
		       (@@/ (cont musume-list (key-of u)))
		       (unit-name-of u)))
		 (td/ (description-of u))
		 (td/ (string-join (fans-of u) " , "))))
	  (all-units)))
   (hr/)
   (h2/ "新ユニット結成")
   (form/cont/
    (@@/ (cont (entry-lambda (:keyword name desc)
		   (and (not (string-null? name))
			(or (find-kahua-instance <unit> name)
			    (make <unit>
			      :unit-name name
			      :description desc
			      :fans (kahua-context-ref* "fans")
			      :priorities (kahua-context-ref* "priority")
			      :statuss (kahua-context-ref* "status")
			      :types (kahua-context-ref* "type")
			      :categories (kahua-context-ref* "category")
			      )))
		 (redirect-page "unit-list"))))
    (table/
     (tr/ (th/ "優先度")
	  (th/ "ステータス")
	  (th/ "タイプ")
	  (th/ "カテゴリ"))
     (tr/ (td/
	   (select/ (@/ (name "priority") (size "5") (multiple "true"))
		    (map/ (lambda (p)
			    (option/ (@/ (value (priorityid-of p)))
				     (disp-name-of p)))
			  (all-priorities))))
	  (td/
	   (select/ (@/ (name "status") (size "5") (multiple "true"))
		    (map/ (lambda (s)
			    (option/ (@/ (value (statusid-of s)))
				     (disp-name-of s)))
			  (all-statuss))))
	  (td/
	   (select/ (@/ (name "type") (size "5") (multiple "true"))
		    (map/ (lambda (t)
			    (option/ (@/ (value (typeid-of t)))
				     (disp-name-of t)))
			  (all-types))))
	  (td/
	   (select/ (@/ (name "category") (size "5") (multiple "true"))
		    (map/ (lambda (c)
			    (option/ (@/ (value (categoryid-of c)))
				     (disp-name-of c)))
			  (all-categories))))))
    (table/
     (tr/ (td/ "ユニット名")
	  (td/
	   (textarea/ (@/ (type "text") (name "name")
			  (rows 1) (cols 32)) "")))
     (tr/ (td/ "概要")
	  (td/
	   (textarea/ (@/ (type "text") (name "desc")
			  (rows 10) (cols 80)) "")))
     (tr/ (td/ "ファン")
	  (td/
	   (select/ (@/ (name "fans") (size "5") (multiple "true"))
		    (map/ (lambda (f)
			    (option/ (@/ (value f)) f))
			  (all-fans)))))
     )
    (input/ (@/ (type "submit") (name "submit") (value "新ユニット登録"))))
   ))


(define-entry (unit-edit unit-id)
  (let1 unit (find-kahua-instance <unit> unit-id)
    (permission-check-page
     (lambda (u)
       (if (member (ref u 'login-name) (fans-of unit))
	   u #f))
     (h2/ "ユニット編集")
     (hr/)
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword name desc)
		     (begin
		       (if (not (string-null? name))
			   (set! (unit-name-of unit) name))
		       (set! (description-of unit) desc)
		       (set! (fans-of unit) (kahua-context-ref* "fans"))
		       (set! (priorities-of unit) (kahua-context-ref* "priority"))
		       (set! (statuss-of unit) (kahua-context-ref* "status"))
		       (set! (types-of unit) (kahua-context-ref* "type"))
		       (set! (categories-of unit) (kahua-context-ref* "category"))
		       (redirect-page "unit-list"))
		   (redirect-page "unit-list"))))
      (table/
       (tr/ (th/ "優先度")
	    (th/ "ステータス")
	    (th/ "タイプ")
	    (th/ "カテゴリ"))
       (tr/ (td/
	     (select/ (@/ (name "priority") (size "5") (multiple "true"))
		      (map/ (lambda (p)
			      (if (has-priority? unit-id (priorityid-of p))
				  (option/ (@/ (value (priorityid-of p))
					       (selected "true"))
					   (disp-name-of p))
				  (option/ (@/ (value (priorityid-of p)))
					   (disp-name-of p))))
			    (all-priorities))))
	    (td/
	     (select/ (@/ (name "status") (size "5") (multiple "true"))
		      (map/ (lambda (s)
			      (if (has-status? unit-id (statusid-of s))
				  (option/ (@/ (value (statusid-of s))
					       (selected "true"))
					   (disp-name-of s))
				  (option/ (@/ (value (statusid-of s)))
					   (disp-name-of s))))
			    (all-statuss))))
	    (td/
	     (select/ (@/ (name "type") (size "5") (multiple "true"))
		      (map/ (lambda (t)
			      (if (has-type? unit-id (typeid-of t))
				  (option/ (@/ (value (typeid-of t))
					       (selected "true"))
					   (disp-name-of t))
				  (option/ (@/ (value (typeid-of t)))
					   (disp-name-of t))))
			    (all-types))))
	    (td/
	     (select/ (@/ (name "category") (size "5") (multiple "true"))
		      (map/ (lambda (c)
			      (if (has-category? unit-id (categoryid-of c))
				  (option/ (@/ (value (categoryid-of c))
					       (selected "true"))
					   (disp-name-of c))
				  (option/ (@/ (value (categoryid-of c)))
					   (disp-name-of c))))
			    (all-categories))))))
      (table/
       (tr/ (td/ "ユニット名")
	    (td/
	     (textarea/ (@/ (type "text") (name "name")
			    (rows 1) (cols 32))
			(unit-name-of unit))))
       (tr/ (td/ "概要")
	    (td/
	     (textarea/ (@/ (type "text") (name "desc")
			    (rows 10) (cols 80))
			(description-of unit))))
       (tr/ (td/ "ファン")
	    (td/
	     (select/ (@/ (name "fans") (size "5") (multiple "true"))
		      (map/ (lambda (f)
			      (if (fan-to? unit-id f)
				  (option/ (@/ (value f) (selected "true")) f)
				  (option/ (@/ (value f)) f)))
			    (all-fans)))))
       )
      (input/ (@/ (type "submit") (name "submit") (value "確定"))))
     )))

; TODO: check account
;
(define-entry (unit-fallout unit-id)
  (let1 unit (find-kahua-instance <unit> unit-id)
    (define checker (lambda (u)
		      (if (member (ref u 'login-name) (fans-of unit))
			  u #f)))
    (let1 user (or (and (kahua-current-user)
			(checker (kahua-current-user)))
		   (login-pc-page #f checker))
      (permission-check-logic
       checker
       (begin
	 (if (checker user)
	     (set! (ref unit 'fallout) #t))
	 (redirect-page "unit-list"))))))

(define-entry (musume-list unit-id :keyword priority status assign type)
  (let* ((p-filter (if (or (not priority)
			   (equal? "*all*" priority))
		       identity
		       (lambda (m) (equal? (priority-of m) priority))))
	 (s-filter (if (or (not status)
			   (equal? "*all*" status))
		       identity
		       (lambda (m) (equal? (status-of m) status))))
	 (a-filter (if (or (not assign)
			   (equal? "   " assign))
		       identity
		       (lambda (m) (equal? (assign-of m) assign))))
	 (t-filter (if (or (not type)
			   (equal? "*all*" type))
		       identity
		       (lambda (m) (equal? (type-of m) type))))
	 (and-filter (lambda (m) (and (p-filter m)
				      (s-filter m)
				      (a-filter m)
				      (t-filter m)))))
    (let1 unit (find-kahua-instance <unit> unit-id)
      (permission-check-page
       (lambda (u)
	 (if (member (ref u 'login-name) (fans-of unit))
	     u #f))
       (ul/ (li/ (a/cont/ (@@/ (cont musume-list unit-id)) "娘。一覧"))
	    (li/ (a/cont/ (@@/ (cont musume-new unit-id)) "新しい娘。")))
       (h2/ (unit-name-of (find-kahua-instance <unit> unit-id)) " - 娘。一覧")
       (form/cont/ (@@/ (cont musume-list unit-id))
		   (table/
		    (tr/ (th/ "優先度")
			 (th/ "ステータス")
			 (th/ "アサイン")
			 (th/ "タイプ"))
		    (tr/
		     (td/
		      (select/
		       (@/ (name "priority"))
		       (node-set
			(cons (option/ (@/ (value "*all*")) "全て")
			      (map (lambda (p)
				     (if (equal? (priorityid-of p) priority)
					 (option/ (@/ (value (priorityid-of p)) (selected "true"))
						  (disp-name-of p))
					 (option/ (@/ (value (priorityid-of p)))
						  (disp-name-of p))))
				   (map (lambda (p) (find-kahua-instance <priority> p))
					(priorities-of
					 (find-kahua-instance <unit> unit-id))))))))
		     (td/
		      (select/
		       (@/ (name "status"))
		       (node-set
			(cons (option/ (@/ (value "*all*")) "全て")
			      (map (lambda (s)
				     (if (equal? (statusid-of s) status)
					 (option/ (@/ (value (statusid-of s)) (selected "true"))
						  (disp-name-of s))
					 (option/ (@/ (value (statusid-of s)))
						  (disp-name-of s))))
				   (map (lambda (s) (find-kahua-instance <status> s))
					(statuss-of
					 (find-kahua-instance <unit> unit-id))))))))
		     (td/
		      (select/
		       (@/ (name "assign"))
		       (map/ (lambda (a)
			       (if (equal? (fan-name-of a) assign)
				   (option/ (@/ (value (fan-name-of a)) (selected "true"))
					    (fan-name-of a))
				   (option/ (@/ (value (fan-name-of a)))
					    (fan-name-of a))))
			     (map (lambda (a) (find-kahua-instance <fan-property> a))
				  (fans-of
				   (find-kahua-instance <unit> unit-id))))))
		     (td/
		      (select/
		       (@/ (name "type"))
		       (node-set
			(cons (option/ (@/ (value "*all*")) "全て")
			      (map (lambda (t)
				     (if (equal? (typeid-of t) type)
					 (option/ (@/ (value (typeid-of t)) (selected "true"))
						  (disp-name-of t))
					 (option/ (@/ (value (typeid-of t)))
						  (disp-name-of t))))
				   (map (lambda (t) (find-kahua-instance <type> t))
					(types-of
					 (find-kahua-instance <unit> unit-id))))))))
		     (td/ (input/ (@/ (type "submit") (name "submit") (value "絞り込み"))))
		     ))
		   (table/
		    (tr/ (th/ "No.")
			 (th/ "タイトル")
			 (th/ "優先度")
			 (th/ "ステータス")
			 (th/ "アサイン")
			 (th/ "タイプ")
			 (th/ "登録日"))
		    (map/ (lambda (m)
			    (tr/ (td/ (a/cont/
				       (@@/ (cont musume-edit (key-of m)))
				       (x->string (mno-of m))))
				 (td/ (a/cont/
				       (@@/ (cont melody-list (unit-id-of m) (key-of m)))
				       (mname-of m)))
				 (td/ (disp-name-of
				       (find-kahua-instance
					<priority> (priority-of m))))
				 (td/ (disp-name-of
				       (find-kahua-instance
					<status> (status-of m))))
				 (td/ (fan-name-of
				       (find-kahua-instance
					<fan-property> (assign-of m))))
				 (td/ (disp-name-of
				       (find-kahua-instance
					<type> (type-of m))))
				 (td/ (sys-strftime "%Y/%m/%d"
					(sys-localtime (ref m 'ctime))))))
			  (sort (filter and-filter
					(all-musumes unit-id))
				(lambda (m1 m2)
				  (> (mno-of m1) (mno-of m2))))))
		   )))))

(define-entry (musume-new unit-id)
  (let1 unit (find-kahua-instance <unit> unit-id)
    (permission-check-page
     (lambda (u)
       (if (member (ref u 'login-name) (fans-of unit))
	   u #f))
     (ul/ (li/ (a/cont/ (@@/ (cont musume-list unit-id)) "娘。一覧"))
	  (li/ (a/cont/ (@@/ (cont musume-new unit-id)) "新しい娘。")))
     (h2/ (unit-name-of (find-kahua-instance <unit> unit-id)) " - 新しい娘。")
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword name priority status assign type category melody)
		     (if (and (not (string-null? name))
			      (not (string-null? melody)))
			 (let1 musume (make <musume>
					:unit-id unit-id
					:musume-name name
					:priority priority
					:status status
					:assign assign
					:type type
					:category category)
			   (make <music>
			     :musume-id (key-of musume)
			     :melody melody
			     :fan-id (ref (kahua-current-user) 'login-name))))
		   (redirect-page #`"musume-list/,|unit-id|"))))
      (table/
       (tr/ (th/ "優先度")
	    (th/ "ステータス")
	    (th/ "タイプ")
	    (th/ "カテゴリ")
	    (th/ "アサイン"))
       (tr/
	(td/
	 (select/ (@/ (name "priority"))
		  (map/ (lambda (p)
			  (option/ (@/ (value (priorityid-of p)))
				   (disp-name-of p)))
			(map (lambda (p) (find-kahua-instance <priority> p))
			     (priorities-of
			      (find-kahua-instance <unit> unit-id))))))
	(td/
	 (select/ (@/ (name "status"))
		  (map/ (lambda (s)
			  (option/ (@/ (value (statusid-of s)))
				   (disp-name-of s)))
			(map (lambda (s) (find-kahua-instance <status> s))
			     (statuss-of
			      (find-kahua-instance <unit> unit-id))))))
	(td/
	 (select/ (@/ (name "type"))
		  (map/ (lambda (t)
			  (option/ (@/ (value (typeid-of t)))
				   (disp-name-of t)))
			(map (lambda (t) (find-kahua-instance <type> t))
			     (types-of
			      (find-kahua-instance <unit> unit-id))))))
	(td/
	 (select/ (@/ (name "category"))
		  (map/ (lambda (c)
			  (option/ (@/ (value (categoryid-of c)))
				   (disp-name-of c)))
			(map (lambda (c) (find-kahua-instance <category> c))
			     (categories-of
			      (find-kahua-instance <unit> unit-id))))))
	(td/
	 (select/ (@/ (name "assign"))
		  (map/ (lambda (a)
			  (option/ (@/ (value (fan-name-of a)))
				   (fan-name-of a)))
			(map (lambda (a) (find-kahua-instance <fan-property> a))
			     (fans-of
			      (find-kahua-instance <unit> unit-id))))))
	))
      (table/ (tr/ (td/ "タイトル")
		   (td/ (textarea/ (@/ (type "text") (name "name")
				       (rows 1) (cols 32)) "")))
	      (tr/ (td/ "内容")
		   (td/ (textarea/ (@/ (type "text") (name "melody")
				       (rows 20) (cols 80)) ""))))
      (input/ (@/ (type "submit") (name "submit") (value "新しい娘。加入"))))
     )))

(define-entry (musume-view)
  (permission-check-page identity
   "娘。の閲覧"))

(define-entry (musume-edit musume-id)
  (permission-check-page identity
   (h3/ #`"『,(mname-of (find-kahua-instance <musume> musume-id)) 』を編集する。")
   ))

(define-entry (melody-list unit-id musume-id)
  (let1 unit (find-kahua-instance <unit> unit-id)
    (permission-check-page
     (lambda (u)
       (if (member (ref u 'login-name) (fans-of unit))
	   u #f))
     (ul/ (li/ (a/cont/ (@@/ (cont musume-list unit-id)) "娘。一覧"))
	  (li/ (a/cont/ (@@/ (cont musume-new unit-id)) "新しい娘。")))
     (h3/ (x->string (mno-of (find-kahua-instance <musume> musume-id))) "："
	  (mname-of (find-kahua-instance <musume> musume-id)) " - "
	  (disp-name-of
	   (find-kahua-instance
	    <status>
	    (status-of (find-kahua-instance <musume> musume-id)))))
     (let1 musics (reverse (all-musics musume-id))
       (map/ (lambda (n f t m)
	       (dl/
		(dt/ #`"#,|n|. ,(sys-strftime \"%Y/%m/%d %H:%M:%S\" (sys-localtime t))[,f]")
		(dd/ (pre/ m))))
	     (map (lambda (m) (seq-no-of m)) musics)
	     (map (lambda (m) (fan-id-of m)) musics)
	     (map (lambda (m) (ref m 'ctime)) musics)
	     (map melody-of musics)))
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword melody status type assign)
		     (log-open (kahua-logpath "kagoiri-musume.log"))
		   (log-format "[PreMail-Check] melody:~A status:~A type:~A assign:~A" melody status type assign)
		   (if (not (string-null? melody))
		       (begin
			 (let1 music (make <music>
				       :musume-id musume-id
				       :melody melody
				       :fan-id (ref (kahua-current-user) 'login-name))
			   (let1 musume (find-kahua-instance <musume> musume-id)
			     (set! (status-of musume) status)
			     (set! (type-of musume) type)
			     (set! (assign-of musume) assign)
			     (and-let* ((fan-ids (filter (lambda (f) (not (equal? "   " f)))
							 (fans-of unit)))
					(fans (map (lambda (id)
						     (find-kahua-instance <fan-property> id))
						   fan-ids)))
			       (log-format "[FansList] fans:~A fan-ids:~A" fans fan-ids)
			       (log-format "[RawSubject] subject:~A" #`"[,(unit-name-of unit)] ,(mno-of musume):,(mname-of musume)")
			       (let ((subject (string-append
					       "=?ISO-2022-JP?B?"
					       (string-join
						(string-split
						 (base64-encode-string
						  (ces-convert
						   #`"[,(unit-name-of unit)] ,(mno-of musume):,(mname-of musume)"
						   "eucjp" "iso2022jp")) #\newline) "")
					       "?="))
				     (body (string-join
					    (list
					     #`"ポスト: ,(fan-id-of music)"
					     #`"日時: ,(sys-strftime \"%Y/%m/%d %H:%M:%S\" (sys-localtime (ref music 'ctime)))"
					     #`"ステータス: ,(status-of musume)"
					     #`"コメント:,|melody|"
					     ""
					     #`"URL: ,(kahua-self-uri-full)melody-list/,(unit-id-of musume)/,|musume-id|")
					    "\n")))
				 (for-each (lambda (fan)
					     (log-format "[SendMail] fan:~A Subject:~A Body:~A" (ref fan 'email) subject body)
					     (sendmail (ref fan 'email)
						       *kagoiri-musume-email*
						       subject
						       body))
					   fans))))))
		       (let1 musume (find-kahua-instance <musume> musume-id)
			 (set! (status-of musume) status)
			 (set! (type-of musume) type)
			 (set! (assign-of musume) assign)))
		   (redirect-page #`"melody-list/,|unit-id|/,|musume-id|"))))
      (table/
       (tr/ (th/ "ステータス") (th/ "タイプ") (th/ "アサイン"))
       (tr/ (td/
	     (select/ (@/ (name "status"))
		      (map/ (lambda (s)
			      (if (equal? (statusid-of s)
					  (status-of (find-kahua-instance <musume> musume-id)))
				  (option/ (@/ (value (statusid-of s))
					       (selected "true"))
					   (disp-name-of s))
				  (option/ (@/ (value (statusid-of s)))
					   (disp-name-of s))))
			    ;; sequencial for time.
			    (map (lambda (s) (find-kahua-instance <status> s))
				 (statuss-of
				  (find-kahua-instance <unit> unit-id))))))
	    (td/
	     (select/ (@/ (name "type"))
		      (map/ (lambda (t)
			      (if (equal? (typeid-of t)
					  (type-of (find-kahua-instance <musume> musume-id)))
				  (option/ (@/ (value (typeid-of t))
					       (selected "true"))
					   (disp-name-of t))
				  (option/ (@/ (value (typeid-of t)))
					   (disp-name-of t))))
			    (map (lambda (t) (find-kahua-instance <type> t))
				 (types-of
				  (find-kahua-instance <unit> unit-id))))))
	    (td/
	     (select/ (@/ (name "assign"))
		      (map/ (lambda (a)
			      (if (equal? (fan-name-of a)
					  (assign-of (find-kahua-instance <musume> musume-id)))
				  (option/ (@/ (value (fan-name-of a))
					       (selected "true"))
					   (fan-name-of a))
				  (option/ (@/ (value (fan-name-of a)))
					   (fan-name-of a))))
			    (map (lambda (a) (find-kahua-instance <fan-property> a))
				 (fans-of
				  (find-kahua-instance <unit> unit-id))))))
	    ))

      (textarea/ (@/ (type "text") (name "melody")
		     (rows 20) (cols 80)) "")
      (input/ (@/ (type "submit") (name "submit") (value "コミット"))))
     )))

(define (change-passwd . message)
  (let* ((cuser (kahua-current-user))
	 (cuser-name (ref cuser 'login-name)))
    (permission-check-page
     identity
     (h3/ #`",|cuser-name| さんのパスワード変更")
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword old-pw new-pw new-again-pw)
		     (log-open (kahua-logpath "kagoiri-musume.log"))
		   (cond ((or (equal? "" new-pw)
			      (equal? "" new-again-pw)
			      (not (equal? new-pw new-again-pw)))
			  (log-format "[NewPassWd] old:~A new:~A new-again:~A" old-pw new-pw new-again-pw)
			  (change-passwd "新パスワードが不正です"))
			 ((not (kahua-check-user cuser-name old-pw))
			  (log-format "[OldPassWd] old:~A new:~A new-again:~A" old-pw new-pw new-again-pw)
			  (change-passwd "旧パスワードが不正です"))
			 (else
			  (kahua-user-password-change-force cuser new-pw)
			  (message-only-page #`",|cuser-name| さんのパスワードを変更しました"))))))
      (table/
       (tr/ (th/ "旧パスワード")
	    (td/ (input/ (@/ (type "password") (name "old-pw")
			     (value "")) "")))
       (tr/ (th/ "新パスワード")
	    (td/ (input/ (@/ (type "password") (name "new-pw")
			     (value "")) "")))
       (tr/ (th/ "新パスワード(確認)")
	    (td/ (input/ (@/ (type "password") (name "new-again-pw")
			     (value "")) ""))))
      (input/ (@/ (type "submit") (name "submit") (value "変更")))
      (p/ (@/ (class "warning")) (node-set message))
      ))))

(define (message-only-page . message)
  message
  (kagoiri-page
   (div/ (@/ (class "msgbox"))
	 (h3/ (node-set message)))))



;
; initialization
;
   
(initialize-main-proc kagoiri)
