;; -*- coding: euc-jp; mode: scheme -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: kagoiri-musume.kahua,v 1.182 2006/01/07 08:05:14 cut-sea Exp $

;;
;; include
;; use
(use gauche.charconv)
(use gauche.logger)
(use file.util)
(use srfi-10)
(use srfi-13)
(use srfi-19)
(use util.list)
(use srfi-1)
(use gauche.collection)
(use gauche.sequence)
(use gauche.parameter)
(use text.gettext)
(use rfc.uri)

(use sendmail/headers)

;; aliases
;;
; xgettext -L Scheme -k\$\$ *.kahua --from-code=euc-jp -o msgs/ja/kagoiri-musume.po
; msgfmt -o kagoiri-musume.mo kagoiri-musume.po 
(textdomain "kagoiri-musume"
            "ja"
            (build-path (ref (kahua-config) 'working-directory)
                        "checkout"
                        "kagoiri-musume"
                        "msgs")
            ""
            #f)

(define $$ gettext)

(load "kagoiri-musume/version.kahua")
(load "kagoiri-musume/user-setting.kahua")

(load "kagoiri-musume/class.kahua")
(load "kagoiri-musume/search.kahua")
(load "kagoiri-musume/page.kahua")
(load "kagoiri-musume/gadget.kahua")
(load "kagoiri-musume/parts-collection.kahua")
(load "kagoiri-musume/sys-admin.kahua")

;; DB Setting.
;;
(define-if-not-bound *kagoiri-musume-title*
  "籠入娘。 - Groupie System")

(define-if-not-bound *kagoiri-musume-database-name*
  (let1 dbpath
      (build-path (ref (kahua-config) 'working-directory)
		  "kagoiri-musume"
		  "db")
    dbpath))

;; mail address
;;
(define-if-not-bound *kagoiri-musume-email*
  "support@your.domain")

;; file upload path
;;
(define-if-not-bound *kagoiri-musume-upload-path*
  (let1 upload-path (kahua-static-document-path "kagoiri-musume/upload")
    (make-directory* upload-path)
    upload-path))
    
(define-if-not-bound *kagoiri-musume-upload-uri*
  (kahua-static-document-url "kagoiri-musume/upload"))

;; primary database
;;
(primary-database-name *kagoiri-musume-database-name*)


; main page
;
#|
(define-entry (kagoiri)
  (kagoiri-page
   (h2/ ($$ "籠入娘。へようこそ！"))
   (ul/ (@/ (class "menu"))
        (li/ (a/cont/ (@/ (class "clickable"))
		      (@@/ (cont admin-system)) ($$ "システム設定管理画面")))
	(li/ (a/cont/ (@/ (class "clickable"))
		      (@@/ (cont unit-list)) ($$ "ユニット一覧"))))
   ))
|#

(define-entry (unit-list)
  (permission-check-page
   identity ($$ "ユニット一覧は一般ユーザアカウントが必要です")
   (h2/ ($$ "ユニット一覧"))
   (unit-list-table/)
   (devel:hr/)
   (create-unit-form/)))


(define-entry (unit-edit unit-id)
  (let1 unit (id->obj <unit> unit-id)
    (permission-check-page
     (lambda (u)
       (if (viewable? unit u)
	   u #f))
     (require-fan-message unit)
     (create-unit-form/ unit))))

; TODO: check account
;
(define-entry (unit-fallout unit-id)
  (let1 unit (id->obj <unit> unit-id)
    (define checker
      (lambda (u)
	(if (memq (id->obj <fan> (ref u 'login-name))
		  (fans-of unit))
	    u #f)))
    (let1 user (or (and (kahua-current-user)
			(checker (kahua-current-user)))
		   (login-pc-page #f checker
				  (require-fan-message unit)))
      (permission-check-logic
       checker
       (require-fan-message unit)
       (begin
	 (if (checker user)
	     (set! (fallout-of unit) #t))
	 (redirect-page "unit-list"))))))

(define-entry (musume-list unit-id :keyword priority status assign type category limit)
  (let* ((*default-limit* 200)
	 (*limits-list* '("" "20" "50" "200" "500" "1000"))
	 (*limit* (or limit (x->string *default-limit*)))
         (*status-dict* (make-hash-table 'string=?)))
    (define (make-filter prop code prop-of)
      (if (or (not prop)
	      (equal? "*all*" prop))
	  identity
	  (lambda (m) (equal? (code (prop-of m)) prop))))
    (let* ((p-filter (make-filter priority code-of priority-of))
	   (s-filter (make-filter status code-of status-of))
	   (t-filter (make-filter type code-of type-of))
	   (c-filter (make-filter category code-of category-of))
           (a-filter (make-filter assign fan-name-of assign-of))
	   (and-filter (lambda (m)
			 (let1 statusid (code-of (status-of m))
			   (hash-table-put!
			    *status-dict*
			    statusid
			    (+ (hash-table-get *status-dict* statusid 0) 1)))
			 ((every-pred p-filter s-filter t-filter c-filter a-filter) m)))
	   (limiter (if (string-null? *limit*)
			identity
			(lambda (ms)
			  (take* ms (x->integer *limit*))))))
      (let1 unit (id->obj <unit> unit-id)
	(permission-check-page
	 (lambda (u)
	   (if (viewable? unit u)
	       u #f))
	 (require-fan-message unit)
	 (musume-menu/ unit-id)
	 (inter-unit-search-box/ unit-id)
	 (h2/ (format ($$ "~a - 娘。一覧") (unit-name-of unit)))
	 (form/cont/
          (@/ (id "filtering_form"))
	  (@@/ (cont musume-list unit-id))
	  (table/
	   (@/ (class "table-filter"))
	   (tr/ (@/ (onclick "toggle_select_mode(event)"))
		(map/ (lambda (props-of msg)
			(has-item? unit props-of (th/ (clickable msg))))
		      $properties-accessor-list$
		      $property-headers$)
		(th/ ($$ "表示上限")))
	   (let1 filter-row "filter_table(this, 'musume_list', '全て')"
	     (define (prop-dropdown/ props-of prop propname)
	       (has-item? unit props-of
			  (td/ (select/
				(@/ (onchange filter-row)
				    (name propname))
				(node-set
				 (cons (option/ (@/ (value "*all*")) ($$ "全て"))
				       (options (props-of unit) prop)))))))
	     (tr/ (@/ (valign "top"))
		  (prop-dropdown/ priorities-of priority "priority")
		  (prop-dropdown/ statuss-of status "status")
		  (prop-dropdown/ types-of type "type")
		  (prop-dropdown/ categories-of category "category")
		  (prop-dropdown/ fans-of assign "assign")
		  (td/
		   (select/
		    (@/ (name "limit"))
		    (map/ (lambda (l)
			    (if (equal? *limit* l)
				(option/ (@/ (value l) (selected "true")) l)
				(option/ (@/ (value l)) l)))
			  *limits-list*)))
		  (td/ (input/ (@/ (type "submit") (name "submit") (value ($$ "絞り込み")))))
		  )))
	  ;; data table
	  (let1 musumes (limiter
			 (sort (filter and-filter
				       (all-active-musumes unit))
			       (lambda (m1 m2)
				 (> (mno-of m1) (mno-of m2)))))
	    (musume-table/ unit musumes *status-dict*))))))))

(define-entry (musume-new unit-id)
  (let1 unit (id->obj <unit> unit-id)
    (permission-check-page
     (lambda (u)
       (if (viewable? unit u)
	   u #f))
     (require-fan-message unit)
     (musume-menu/ unit-id)
     (h2/ (unit-name-of unit) ($$ " - 新しい娘。"))
     (form/cont/
      (@/ (enctype "multipart/form-data"))
      (@@/ (cont (entry-lambda (:keyword name priority status assign type category melody file)
		     (if (string-null? name)
			 (begin
			   (set-error-message ($$ "タイトルを入力してください。"))
			   (redirect-page #`"musume-new/,unit-id"))
			 (begin
			   (if (string-null? melody) (set! melody name))
			   (set! name (kana-trans:half->full name))
			   (set! melody (string-join (string-split melody "\r\n") "\n"))
			   (let1 musume (create-new-musume unit name priority status assign type category)
			     (let1 song (create-new-song musume melody (id->obj <fan> (kahua-current-user-name)))
			       ;; save file and make file object.
			       (attach-file song file (uploaded-file-name unit musume song))
			       (sendmail-lite unit musume song)
			       (redirect-page #`"melody-list/,|unit-id|/,(key-of musume)"))))))))
      (musume-new-table/ unit)
      )
     )))

(define-entry (musume-view)
  (permission-check-page
   identity ($$ "ちょいまってや")
   ($$ "娘。の閲覧")))

(define-entry (remove-musume musume-id)
  (let* ((musume (id->obj <musume> musume-id))
	 (unit (unit-of musume)))
    (define checker (lambda (u)
		      (if (memq (id->obj <fan> (ref u 'login-name))
                                (fans-of unit))
			  u #f)))
    (let1 user (or (and (kahua-current-user)
			(checker (kahua-current-user)))
		   (login-pc-page #f checker
				  (require-fan-message unit)))
      (permission-check-logic
       checker
       (require-fan-message unit)
       (begin
	 (if (checker user)
	     (set! (delete-of musume) #t))
	 (redirect-page #`"musume-list/,(key-of unit)"))))))


(define-entry (musume-edit musume-id)
  (let* ((musume (id->obj <musume> musume-id))
	 (unit (unit-of musume)))
    (permission-check-page
     identity
     (require-fan-message unit)
     (h3/ (format ($$ "『~a』の『~a 』を編集する。") (unit-name-of unit) (mname-of musume)))
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword name)
		    (if (not (string-null? name))
			(set! (mname-of musume) name))
		  (redirect-page #`"musume-edit/,musume-id"))))
      (table/ (tr/ (td/ ($$ "タイトル"))
		   (td/ (input/ (@/ (type "text") (name "name")
				    (id "focus") (size 80)
				    (value (mname-of musume)))))))
      (input/ (@/ (type "submit") (value ($$ "改名")))))
     )))

(define-entry (delete-revival-song song-id)
  (let* ((song (id->obj <song> song-id))
	 (musume (musume-of song))
	 (unit (unit-of musume)))
    (define (checker u) 
      (if (memq (id->obj <fan> (ref u 'login-name))
		(fans-of unit))
	  u #f))
    (let1 user (or (and (kahua-current-user)
			(checker (kahua-current-user)))
		   (login-pc-page #f checker
				  (require-fan-message unit)))
      (permission-check-logic
       checker
       (require-fan-message unit)
       (begin
	 (if (checker user)
	     (set! (delete-of song) (not (delete-of song))))
	 (redirect-page #`"melody-list/,(key-of unit)/,(key-of musume)#,song-id"))))))

(define (melody-format melody)
  (define (parse melody)
    (let lp ((result '())
	     (mel melody))
      (cond ((string-null? mel) (node-set result))
	    ((#/(mailto:)?[\s]*([\d\w\-\.]+@[\d\w\-\.]+)/ mel)
	     => (lambda (m)
		  (lp (append result
			      (list (m 'before) (a/ (@/ (href #`"mailto:,(m 2)")) (m))))
		      (m 'after))))
	    ((#/(http|https|ftp):[\d\w\/?&#%:.\-+=~]+/ mel)
	     => (lambda (m)
		  (lp (append result 
			      (list (m 'before) (a/ (@/ (href (m))) (m))))
		      (m 'after))))
	    (else (node-set (append result (list mel)))))))
  (parse melody))

(define-entry (melody-list unit-id musume-id
			   :keyword sort_state search
			   :mvkeyword priority status type category assign)
  (let ((unit (id->obj <unit> unit-id))
        (musume (id->obj <musume> musume-id)))
    (define (move dist)
      (let ((musumes (sort (all-active-musumes unit))))
	(define (make-filter prop code prop-of)
	  (if (or (null? prop)
		  (equal? "*all*" prop))
	      identity
	      (lambda (m) (member (code (prop-of m)) prop))))
	(let* ((p-filter (make-filter priority code-of priority-of))
	       (s-filter (make-filter status code-of status-of))
	       (t-filter (make-filter type code-of type-of))
	       (c-filter (make-filter category code-of category-of))
	       (a-filter (make-filter assign fan-name-of assign-of))
	       (and-filter (lambda (m)
                             ((every-pred p-filter s-filter t-filter c-filter a-filter) m)))
	       (musumes (filter and-filter musumes))
	       (musumes (if sort_state
			    (sort musumes
				  (lambda (x y)
				    (string<? (compare-value x sort_state)
					      (compare-value y sort_state))))
			    musumes))
	       (pos (or (find-index (cut eq? musume <>) musumes) 0))
	       (musume (list-ref  musumes (+ pos dist) musume)))
	  (redirect-page #`"melody-list/,|unit-id|/,(key-of musume)?,|search|"))))

    (permission-check-page
     (lambda (u)
       (if (viewable? unit u)
	   u #f))
     (require-fan-message unit)
     (if (not musume-id)
         (move 0)
	 (list/
	  (musume-menu/ unit-id)
          (a/cont/ (@/ (id "bookmark-button") (class "clickable"))
                   (@@/ (cont add-bookmark unit-id musume-id)) ($$ "ブックマークに追加"))
	  (div/
	   (a/cont/ (@/ (class "clickable")
			(onclick "copy_search(this)"))
		    (@@/ (cont (cut move -1)))
		    "<<" )
	   (a/cont/ (@/ (class "clickable")
			(onclick "copy_search(this)"))
		    (@@/ (cont (cut move +1)))
		    ">>"))

	  (h3/ (format "~a - ~a：~a - ~a"
		       (unit-name-of unit)
		       (mno-of musume)
		       (mname-of musume)
		       (disp-name-of
			(status-of musume))))
	  (common:form/cont/
	   (@/ (enctype "multipart/form-data"))
	   (@@/ (cont (entry-lambda (:keyword melody priority status type category assign file)
			  (if (and (string-null? melody)
				   (not file))
			      (musume-makeover! musume priority status type category assign)
			      (begin
				(set! melody (string-join (string-split melody "\r\n") "\n"))
				(let1 song (create-new-song musume melody (current-fan))
				  (musume-makeover! musume priority status type category assign)
				  ;; save file and make file object.
				  (attach-file song file (uploaded-file-name unit musume song))
				  (if (not (string-null? melody))
				      (sendmail-lite unit musume song)))))
			(redirect-page #`"melody-list/,|unit-id|/,|musume-id|"))))
	   (table/
	    (tr/
	     (map/ (lambda (props-of header)
		     (has-item? unit props-of (th/ header)))
		   $properties-accessor-list$
		   $property-headers$))
	    (tr/ (map/ (lambda (n refer items-of)
			 (has-item? unit items-of
				    (td/ (select/ (@/ (name n))
						  (map/ (lambda (item)
							  (if (eq? item (refer musume))
							      (option/ (@/ (value (code-of item))
									   (selected "true"))
								       (disp-name-of item))
							      (option/ (@/ (value (code-of item)))
								       (disp-name-of item))))
							(items-of unit))))))
		       $property-list$ $property-accessor-list$ $properties-accessor-list$)
		 (td/ (input/ (@/ (type "submit") (value ($$ "コミット")))))
		 ))
	   (table/ (@/ (class "extension"))
		   (tr/
		    (td/ "内容")
		    (td/ (textarea/ (@/ (type "text") (name "melody")
					(rows 10) (cols 80) (id "focus"))))
		    (tr/
		     (td/ ($$ "ファイル"))
		     (td/ (input/ (@/ (type "file") (name "file")))
                          )))))
	  (let1 songs (all-songs musume)
	    (map/ (lambda (k n f t m u)
		    (let1 song (id->obj <song> k)
		      (if (delete-of song)
			  (dl/ (@/ (id #`",k"))
			       (dt/ (span/ (@/ (class "song-no")) #`"#,|n|.")
				    (span/ (@/ (class "song-time")) #`" ,(sys-strftime \"%Y/%m/%d %H:%M:%S\" (sys-localtime t))")
				    (span/ (@/ (class "song-fan")) #`"[,(fan-name-of f)]")
				    (composer? song
					       (a/cont/ (@/ (onClick (format "return confirm('~a')?true:false"
									     ($$ "本当に復活しますか？"))))
							(@@/ (cont delete-revival-song k)) ($$ "復活"))))
			       (dd/ (pre/ (@/ (class "warning")) ($$ "このメロディは削除されてます"))))
			  (dl/ (@/ (id #`",k"))
			       (dt/ (span/ (@/ (class "song-no")) #`"#,|n|.")
				    (span/ (@/ (class "song-time")) #`" ,(sys-strftime \"%Y/%m/%d %H:%M:%S\" (sys-localtime t))")
				    (span/ (@/ (class "song-fan")) #`"[,(fan-name-of f)]")
				    (composer? song
					       (a/cont/ (@/ (onClick (format "return confirm('~a')?true:false"
									     ($$ "本当に削除しますか？"))))
							(@@/ (cont delete-revival-song k)) ($$ "削除"))))
			       (if (null? u)
				   (dd/ (pre/ (melody-format m)))
				   (let1 upfile (car u)
				     (dd/ (pre/ m
						(br/)
						(a/ (@/ (href (uri-of upfile))) (name-of upfile))) "")))))))
		  (map key-of songs)
		  (map seq-no-of songs)
		  (map fan-of songs)
		  (map ctime-of songs)
		  (map melody-of songs)
		  (map files-of songs))
	    ))))))

(define-entry (mypage type)
  (define (todo)
    (fieldset/
     (legend/ ($$ "TODO"))
     (let1 musumes (let1 fan (current-fan)
                     (filter
                      (lambda (musume)
                        (eq? (assign-of musume) fan))
                      (make-kahua-collection <musume>)))
       (format "~a item(s)" (length musumes))
       (table/ (@/ (class "listing"))
               (thead/ (tr/ (th/ ($$ "タイトル"))
                            (th/ ($$ "優先度"))
                            (th/ ($$ "ステータス"))
                            (th/ ($$ "タイプ"))
                            (th/ ($$ "登録日"))))
               (tbody/
                (map/ (lambda (m)
                        (let1 status (status-of m)
                          (tr/ (@/ (class #`"status-,(code-of status)"))
                               (td/ (label-of m))
                               (td/ (disp-name-of (priority-of m)))
                               (td/ (disp-name-of status))
                               (td/ (disp-name-of (type-of m)))
                               (td/ (sys-strftime "%Y/%m/%d"
                                                  (sys-localtime (ctime-of m)))))))
                      musumes))))))

  (define (recent)
    (fieldset/
     (legend/ ($$ "最近の更新"))
     (let* ((units (filter (cut fan-to? <> (current-fan))
                           (all-units)))
            (musumes (append-map all-active-musumes units))
            (songs (append-map songs-of  musumes))
            (songs (reverse (sort songs)))
            (songs (take* songs 20)))
       (format "~a item(s)" (length songs))
       (map/ (lambda (s)
               (let1 m (musume-of s)
                 (div/
                  (fieldset/
                   (legend/ (label-of m))
                   (dt/
		    (format "#~a. ~a[~a]"
			    (seq-no-of s)
			    (sys-strftime "%Y/%m/%d %H:%M:%S" (sys-localtime (ctime-of s)))
			    (fan-name-of (fan-of s))))
                   (pre/ (melody-format (melody-of s)))))))
             songs))))

  (define (bookmark)
    (fieldset/
     (legend/ ($$ "ブックマーク"))
     (let1 musumes (or (ref (current-fan) 'bookmark) '())
       (format "~a item(s)" (length musumes))
       (table/ (@/ (class "listing"))
               (thead/ (tr/ (th/ ($$ "削除"))
                            (th/ ($$ "タイトル"))
                            (th/ ($$ "優先度"))
                            (th/ ($$ "ステータス"))
                            (th/ ($$ "タイプ"))
                            (th/ ($$ "登録日"))))
               (tbody/
                (map/ (lambda (m)
                        (let1 status (status-of m)
                          (tr/ (@/ (class #`"status-,(code-of status)"))
                               (td/ (a/cont/ (@/ (onClick (format "return confirm('~a')?true:false"
                                                                  ($$ "本当に削除しますか？"))))
                                             (@@/ (cont
                                                   (lambda ()
                                                     (update! (ref (current-fan) 'bookmark)
                                                              (cut delete m  <>))
                                                     (redirect-page "mypage/bookmark"))))
                                             ($$ "削除")))
                               (td/ (label-of m))
                               (td/ (disp-name-of (priority-of m)))
                               (td/ (disp-name-of status))
                               (td/ (disp-name-of (type-of m)))
                               (td/ (sys-strftime "%Y/%m/%d"
                                                  (sys-localtime (ctime-of m)))))))
                      musumes))))))

  (permission-check-page
   identity
   ($$ "マイページは一般ユーザアカウントが必要です")
   (let1 type (and type (string->symbol type))
     (div/ (ul/ (@/ (class "menu"))
                (li/ (a/cont/ (@@/ (cont mypage 'todo)) ($$ "TODO")))
                (li/ (a/cont/ (@@/ (cont mypage 'recent)) ($$ "最近の更新")))
                (li/ (a/cont/ (@@/ (cont mypage 'bookmark)) ($$ "ブックマーク"))))
           (case type
             ((todo) (todo))
             ((recent) (recent))
             ((bookmark) (bookmark))
             (else (bookmark)))))))

(define-entry (add-bookmark unit-id musume-id)
  (let1 musume (find-kahua-instance <musume> musume-id)
    (update! (ref (current-fan) 'bookmark)
             (lambda (bkmks)
               (let1 bkmks (or bkmks '())
                 (if (memq musume bkmks)
                     bkmks
                   (cons musume bkmks)))))
    (redirect-page #`"melody-list/,|unit-id|/,musume-id")))



(define (change-passwd . message)
  (let* ((cuser (kahua-current-user))
	 (cuser-name (ref cuser 'login-name)))
    (permission-check-page
     identity
     ($$ "パスワード変更には一般ユーザのアカウントが必要です")
     (h3/ (format ($$ "~a さんのパスワード変更") cuser-name))
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword old-pw new-pw new-again-pw)
		     (cond ((or (equal? "" new-pw)
				(equal? "" new-again-pw)
				(not (equal? new-pw new-again-pw)))
			    (change-passwd ($$ "新パスワードが不正です")))
			   ((not (kahua-check-user cuser-name old-pw))
			    (change-passwd ($$ "旧パスワードが不正です")))
			   (else
			    (kahua-user-password-change-force cuser new-pw)
			    (message-only-page
			     (format ($$ "~a さんのパスワードを変更しました") cuser-name)))))))
      (change-passwrod-table/ "old-pw" "new-pw" "new-again-pw")
      (input/ (@/ (type "submit") (name "submit") (value ($$ "変更"))))
      (p/ (@/ (class "warning")) (node-set message))
      ))))

(define (message-only-page . message)
  message
  (kagoiri-page
   (div/ (@/ (class "msgbox"))
	 (h3/ (node-set message)))))

(define (clickable text)
  (span/ (@/ (class "clickable"))
         text))

;
; initialization
;

(initialize-main-proc unit-list)
