;; -*- coding: euc-jp; mode: kahua -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: kagoiri-musume.kahua,v 1.230 2006/02/28 13:27:29 cut-sea Exp $

;;
;; include
;; use
(use gauche.charconv)
(use gauche.logger)
(use file.util)
(use srfi-10)
(use srfi-13)
(use srfi-19)
(use util.list)
(use srfi-1)
(use gauche.collection)
(use gauche.sequence)
(use gauche.parameter)
(use text.gettext)
(use rfc.uri)

(use async)
(use sendmail/headers)
(use calendar)

;; aliases
;;
; xgettext -L Scheme -k\$\$ *.kahua --from-code=euc-jp -o msgs/ja/kagoiri-musume.po
; msgfmt -o kagoiri-musume.mo kagoiri-musume.po 
(textdomain "kagoiri-musume"
            "ja"
            (build-path (ref (kahua-config) 'working-directory)
                        "checkout"
                        "kagoiri-musume"
                        "msgs")
            ""
            #f)

(define $$ gettext)

(load "kagoiri-musume/version.kahua")
(load "kagoiri-musume/user-setting.kahua")

(load "kagoiri-musume/class.kahua")
(load "kagoiri-musume/search.kahua")
(load "kagoiri-musume/page.kahua")
(load "kagoiri-musume/gadget.kahua")
(load "kagoiri-musume/parts-collection.kahua")
(load "kagoiri-musume/sys-admin.kahua")

;; DB Setting.
;;
(define-if-not-bound *kagoiri-musume-title*
  "籠入娘。 - Groupie System")

(define-if-not-bound *kagoiri-musume-database-name*
  (let1 dbpath
      (build-path (ref (kahua-config) 'working-directory)
		  "kagoiri-musume"
		  "db")
    dbpath))

;; Error Log Level
;;
(define-if-not-bound *kagoiri-musume-log-database-name*
  (let1 dbpath
      (build-path (ref (kahua-config) 'working-directory)
		  "kagoiri-musume"
		  "log")
    dbpath))

(define-if-not-bound *kagoiri-error-level* 1)

;; mail address
;;
(define-if-not-bound *kagoiri-musume-email*
  "support@your.domain")

(define-if-not-bound *kagoiri-system-info-email*
  "announce@your.domain")

(define-if-not-bound *x-kagoiri-mail*
  "x-kagoiri-unit-id")

;; file upload path
;;
(define-if-not-bound *kagoiri-musume-upload-path*
  (let1 upload-path (kahua-static-document-path "kagoiri-musume/upload")
    (make-directory* upload-path)
    upload-path))

(define-if-not-bound *kagoiri-musume-upload-uri*
  (kahua-static-document-url "kagoiri-musume/upload"))

;; primary database
;;
(primary-database-name *kagoiri-musume-database-name*)


;; moved entry
(define (page-moved . path)
  (let1 url (apply kahua-self-uri-full path)
    (html/
     (extra-header/
      (@/ (name "Refresh")
          (value #`"3; ,url")))
     (head/
      (meta/ (@/ (http-equiv "refresh")
                 (contnet #`"3; URL=,url"))))
     (body/ (h1/ "このページは移動しました")
            (a/ (@/ (href url)) url)
            (p/ "3秒後に自動で新しいページへ移動します。"
               "自動で移動しない場合、上のリンクをクリックしてください。")))))

(define-entry (unit-list :rest rest)
  (page-moved "**"))

(define-entry (unit-edit unit-id)
  (page-moved "**" unit-id "edit"))

(define-entry (musume-list unit-id)
  (page-moved "**" unit-id))

(define-entry (musume-new unit-id)
  (page-moved "**" unit-id "new"))

(define-entry (musume-edit musume-id)
  (let1 m (find-kahua-instance <musume> musume-id)
    (page-moved "**" (key-of (unit-of m)) (x->string (mno-of m)) "edit")))

(define-entry (melody-list unit-id musume-no)
  (page-moved "**" unit-id musume-no))


; main page
;
#|
(define-entry (kagoiri)
  (kagoiri-page
   (h2/ ($$ "籠入娘。へようこそ！"))
   (ul/ (@/ (class "menu"))
        (li/ (a/cont/ (@/ (class "clickable"))
		      (@@/ (cont admin-system)) ($$ "システム設定管理画面")))
	(li/ (a/cont/ (@/ (class "clickable"))
		      (@@/ (cont unit-list)) ($$ "ユニット一覧"))))
   ))
|#

;;;==============================================================
;;; Project list
;;;
(define-entry-method ** ()
  (permission-check-page
   identity ($$ "ユニット一覧は一般ユーザアカウントが必要です")
   (navigation/)
   (h2/ ($$ "ユニット一覧"))
   (unit-list-table/)
   (devel:hr/)
   (create-unit-form/)))


;;;==============================================================
;;; Project edit
;;;
(define-entry-method ** (unit-id "edit")
  (let1 unit (id->obj <unit> unit-id)
    (permission-check-page
     (lambda (u)
       (if (viewable? unit u)
	   u #f))
     (require-fan-message unit)
     (create-unit-form/ unit))))

;;;==============================================================
;;; Project fallout
;;;
; TODO: check account
;
(define-entry (unit-fallout unit-id)
  (let1 unit (id->obj <unit> unit-id)
    (define checker
      (lambda (u)
	(if (memq (id->obj <fan> (ref u 'login-name))
		  (fans-of unit))
	    u #f)))
    (let1 user (or (and (kahua-current-user)
			(checker (kahua-current-user)))
		   (login-pc-page #f checker
				  (require-fan-message unit)))
      (permission-check-logic
       checker
       (require-fan-message unit)
       (begin
	 (if (checker user)
	     (set! (fallout-of unit) #t))
	 (redirect-to))))))

;;;==============================================================
;;; Subject list
;;;
(define-entry-method ** (unit-id :keyword priority status assign type category limit)
  (let* ((*default-limit* 200)
	 (*limits-list* '("" "20" "50" "200" "500" "1000"))
	 (*limit* (or limit (x->string *default-limit*)))
         (*status-dict* (make-hash-table 'string=?)))
    (define (make-filter prop code prop-of)
      (if (or (not prop)
	      (equal? "*all*" prop))
	  identity
	  (lambda (m) (equal? (code (prop-of m)) prop))))
    (let* ((p-filter (make-filter priority code-of priority-of))
	   (s-filter (make-filter status code-of status-of))
	   (t-filter (make-filter type code-of type-of))
	   (c-filter (make-filter category code-of category-of))
           (a-filter (make-filter assign fan-name-of assign-of))
	   (and-filter (lambda (m)
			 (let1 statusid (code-of (status-of m))
			   (hash-table-put!
			    *status-dict*
			    statusid
			    (+ (hash-table-get *status-dict* statusid 0) 1)))
			 ((every-pred p-filter s-filter t-filter c-filter a-filter) m)))
	   (limiter (if (string-null? *limit*)
			identity
			(lambda (ms)
			  (take* ms (x->integer *limit*))))))
      (let1 unit (id->obj <unit> unit-id)
	(permission-check-page
	 (lambda (u)
	   (if (viewable? unit u)
	       u #f))
	 (require-fan-message unit)
         (navigation/ unit)
	 (musume-menu/ unit)
	 (inter-unit-search-box/ unit-id)
	 (h2/ (format ($$ "~a - 娘。一覧") (unit-name-of unit)))
	 (form/cont/
          (@/ (id "filtering_form"))
	  (@@/ (cont ** unit-id))
	  (table/
	   (@/ (class "table-filter"))
	   (tr/ (@/ (onclick "toggle_select_mode(event)"))
		(map/ (lambda (props-of msg)
			(has-item? unit props-of (th/ (clickable msg))))
		      $properties-accessor-list$
		      $property-headers$)
		(th/ ($$ "表示上限")))
	   (let1 filter-row "filter_table(this, 'musume_list', '全て')"
	     (define (prop-dropdown/ props-of prop propname)
	       (has-item? unit props-of
			  (td/ (select/
				(@/ (onchange filter-row)
				    (name propname))
				(node-set
				 (cons (option/ (@/ (value "*all*")) ($$ "全て"))
				       (options (props-of unit) prop)))))))
	     (tr/ (@/ (valign "top"))
		  (prop-dropdown/ priorities-of priority "priority")
		  (prop-dropdown/ statuss-of status "status")
		  (prop-dropdown/ types-of type "type")
		  (prop-dropdown/ categories-of category "category")
		  (prop-dropdown/ fans-of assign "assign")
		  (td/
		   (select/
		    (@/ (name "limit"))
		    (map/ (lambda (l)
			    (if (equal? *limit* l)
				(option/ (@/ (value l) (selected "true")) l)
				(option/ (@/ (value l)) l)))
			  *limits-list*)))
		  (td/
                   (noscript/
                    (input/ (@/ (type "submit") (name "submit") (value ($$ "絞り込み"))))))
		  )))
	  ;; data table
	  (let1 musumes (limiter
			 (sort (filter and-filter
				       (all-active-musumes unit))
			       (lambda (m1 m2)
				 (> (mno-of m1) (mno-of m2)))))
	    (musume-table/ unit musumes *status-dict*))))))))

;;;==============================================================
;;; Subject new
;;;
(define-entry-method ** (unit-id "new")
  (letrec ((unit (id->obj <unit> unit-id))
	   (target #f)
	   (get-target (lambda _ target))
	   (set-target! (lambda (date) (set! target date))))
    (define (viewer date limit-date target-date)
      (permission-check-page
       (lambda (u)
	 (if (viewable? unit u)
	     u #f))
       (require-fan-message unit)
       (navigation/ unit)
       (musume-menu/ unit)
       (h2/ (unit-name-of unit) ($$ " - 新しい娘。"))
       (form/cont/
	(@/ (enctype "multipart/form-data")
	    (onsubmit "return false;")
            (id "mainedit"))
	(@@/ (cont (entry-lambda (:keyword name priority status assign type category melody file)
		       (if (string-null? name)
			   (begin
			     (set-error-message ($$ "タイトルを入力してください。"))
                             (redirect-to unit "new"))
			   (begin
			     (if (string-null? melody) (set! melody name))
			     (set! name (kana-trans:half->full name))
			     (set! melody (string-join (string-split melody "\r\n") "\n"))
			     (let1 musume (create-new-musume unit name priority status assign type category)
			       (let1 song (create-new-song musume melody (id->obj <fan> (kahua-current-user-name)))
				 ;; get'n set! limit date
				 (set! (limit-of musume)
				       (and (get-target) (date->sys-time (get-target))))
				 ;; save file and make file object.
				 (attach-file song file (uploaded-file-name unit musume song))
				 (sendmail-lite unit musume song)
                                 (redirect-to musume))))))))
	(musume-new-table/ unit date limit-date target-date get-target set-target!))))
    (viewer (today) #f #f)))

(define-entry (musume-view)
  (permission-check-page
   identity ($$ "ちょいまってや")
   ($$ "娘。の閲覧")))

;;;==============================================================
;;; Subject remove
;;;
(define-entry (remove-musume musume-id)
  (let* ((musume (id->obj <musume> musume-id))
	 (unit (unit-of musume)))
    (define checker (lambda (u)
		      (if (memq (id->obj <fan> (ref u 'login-name))
                                (fans-of unit))
			  u #f)))
    (let1 user (or (and (kahua-current-user)
			(checker (kahua-current-user)))
		   (login-pc-page #f checker
				  (require-fan-message unit)))
      (permission-check-logic
       checker
       (require-fan-message unit)
       (begin
	 (if (checker user)
	     (set! (delete-of musume) #t))
         (redirect-to unit))))))


;;;==============================================================
;;; Subject edit
;;;
(define-entry-method ** (unit-id musume-no "edit")
  (let* ((musume-no (x->integer musume-no))
         (unit (id->obj <unit> unit-id))
         (musume (musume-ref unit musume-no)))
    (permission-check-page
     identity
     (require-fan-message unit)
     (navigation/ musume)
     (h3/ (format ($$ "『~a』の『~a 』を編集する。") (unit-name-of unit) (mname-of musume)))
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword name)
                   (if (not (string-null? name))
                       (set! (mname-of musume) name))
                   (redirect-to musume "edit"))))
      (table/ (tr/ (td/ ($$ "タイトル"))
		   (td/ (input/ (@/ (type "text") (name "name")
				    (id "focus") (size 80)
				    (value (mname-of musume)))))))
      (input/ (@/ (type "submit") (value ($$ "改名")))))
     )))


;;;==============================================================
;;; Song edit
;;;
(define-entry (delete-revival-song song-id)
  (let* ((song (id->obj <song> song-id))
	 (musume (musume-of song))
	 (unit (unit-of musume)))
    (define (checker u) 
      (if (memq (id->obj <fan> (ref u 'login-name))
		(fans-of unit))
	  u #f))
    (let1 user (or (and (kahua-current-user)
			(checker (kahua-current-user)))
		   (login-pc-page #f checker
				  (require-fan-message unit)))
      (permission-check-logic
       checker
       (require-fan-message unit)
       (begin
	 (if (checker user)
	     (set! (delete-of song) (not (delete-of song))))
         (redirect/cont (cont ** (key-of unit) (mno-of musume))
                        (fragment song-id))
         )))))

(define (melody-format melody)
  (define (regexp-fold rx proc-nomatch proc-match seed line)
    (let loop ((line line)
               (seed seed))
      (cond ((string-null? line) seed)
            ((rx line)
             => (lambda (m)
                  (let ((pre   (m 'before))
                        (post  (m 'after)))
                    (if (string-null? pre)
                        (loop post (proc-match m seed))
                      (loop post (proc-match m (proc-nomatch pre seed)))))))
            (else
             (proc-nomatch line seed)))))
  (define (mail line seed)
    (regexp-fold
     #/(mailto:)?[\s]*([\d\w\-\.]+@[\d\w\-\.]+)/
     cons
     (lambda (match seed)
       (cons (a/ (@/ (href #`"mailto:,(match 2)")) (match)) seed))
     seed line))
  (define (url line seed)
    (regexp-fold
     #/(http|https|ftp):[\d\w\/?&#%:.\-+=~*]+/
     mail
     (lambda (match seed)
       (cons (a/ (@/ (href (match))) (match)) seed))
     seed line))
  (define (reference line seed)
    (regexp-fold
     #/\[\[(\d+)\/(\d+)\]\]/
     url
     (lambda (match seed)
       (let* ((unit (find-kahua-instance <unit> (match 1)))
              (musume-no (x->integer (match 2)))
              (musume (musume-ref unit musume-no)))
         (cons (link-of musume) seed)))
     seed line))
  ;; body
  (node-set (reverse (reference melody '()))))


(define (load-links! current-musume melody)
  (define (analyze melody)
    (let lp ((mel melody))
      (cond ((#/\[\[(\d+)\/(\d+)\]\]/ mel)
             => (lambda (m)
                  (let* ((unit (find-kahua-instance <unit> (m 1)))
                         (musume-no (x->integer (m 2)))
                         (musume (musume-ref unit musume-no)))
                    (update! (links-of current-musume)
                             (lambda (ms)
                               (if (memq musume ms)
                                   ms
                                 (cons musume ms))))
                    (update! (backlinks-of musume)
                             (lambda (ms)
                               (if (memq current-musume ms)
                                   ms
                                 (cons current-musume ms))))
                    (lp (m 'after))))))))
  (analyze melody))


;;;==============================================================
;;; Song list
;;;
(define-entry-method ** (unit-id musume-no
                                :keyword sort_state search
                                :mvkeyword priority status type category assign)
  (let* ((musume-no (x->integer musume-no))
	 (unit (id->obj <unit> unit-id))
	 (musume (musume-ref unit musume-no)))
    (letrec ((target (and (limit-of musume)
			  (sys-time->date (limit-of musume))))
	     (get-target (lambda _ target))
	     (set-target! (lambda (date) (set! target date))))
      (define (time-limit? musume)
	(and (limit-of musume)
	     (same-date? (today) (sys-time->date (limit-of musume)))))
      (define (time-over? musume)
	(and (limit-of musume)
	     (date>? (today) (sys-time->date (limit-of musume)))))
      (define (move dist)
	(let ((musumes (sort (all-active-musumes unit))))
	  (define (make-filter prop code prop-of)
	    (if (or (null? prop)
		    (equal? "*all*" prop))
		identity
		(lambda (m) (member (code (prop-of m)) prop))))
	  (let* ((p-filter (make-filter priority code-of priority-of))
		 (s-filter (make-filter status code-of status-of))
		 (t-filter (make-filter type code-of type-of))
		 (c-filter (make-filter category code-of category-of))
		 (a-filter (make-filter assign fan-name-of assign-of))
		 (and-filter (lambda (m)
			       ((every-pred p-filter s-filter t-filter c-filter a-filter) m)))
		 (musumes (filter and-filter musumes))
		 (musumes (if sort_state
			      (sort musumes
				    (lambda (x y)
				      (string<? (compare-value x sort_state)
						(compare-value y sort_state))))
			      musumes))
		 (pos (or (find-index (cut eq? musume <>) musumes) 0))
		 (musume (list-ref  musumes (+ pos dist) musume)))
            ;; fixme
            (redirect-page #`"**/,|unit-id|/,(mno-of musume)?,|search|")
            )))
      (define (viewer date limit-date target-date)
	(permission-check-page
	 (lambda (u)
	   (if (viewable? unit u)
	       u #f))
	 (require-fan-message unit)
	 (if (not musume-no)
	     (move 0)
	     (list/
              (navigation/ musume)
	      (musume-menu/ unit)
	      (a/cont/ (@/ (id "bookmark-button") (class "clickable"))
		       (@@/ (cont add-bookmark musume)) ($$ "ブックマークに追加"))
	      (div/
	       (a/cont/ (@/ (class "clickable")
			    (onclick "copy_search(this)"))
			(@@/ (cont (cut move -1)))
			"<<" )
	       (a/cont/ (@/ (class "clickable")
			    (onclick "copy_search(this)"))
			(@@/ (cont (cut move +1)))
			">>"))
	      (h3/ (@/ (class (and (or (time-limit? musume)
				       (time-over? musume)) "timeover")))
		   (format "~a - ~a：~a - ~a~a"
			   (unit-name-of unit)
			   (mno-of musume)
			   (mname-of musume)
			   (disp-name-of
			    (status-of musume))
			   (cond ((time-limit? musume) ($$ "(期日)"))
				 ((time-over? musume) ($$ "(期限切)"))
				 (else ""))))
	      (common:form/cont/
	       (@/ (enctype "multipart/form-data")
                   (id "mainedit"))
	       (@@/ (cont (entry-lambda (:keyword melody priority status type category assign file)
			      (if (and (string-null? melody)
				       (not file))
				  (musume-makeover! musume priority status type category assign (and (get-target)
												     (date->sys-time (get-target))))
				  (begin
				    (set! melody (string-join (string-split melody "\r\n") "\n"))
				    (let1 song (create-new-song musume melody (current-fan))
				      (musume-makeover! musume priority status type category assign (and (get-target)
													 (date->sys-time (get-target))))
				      ;; save file and make file object.
				      (attach-file song file (uploaded-file-name unit musume song))
				      (if (not (string-null? melody))
					  (sendmail-lite unit musume song)))))
                              (redirect-to musume))))
	       (table/
		(tr/
		 (td/
		  (table/
		   (tr/
		    (map/ (lambda (props-of header)
			    (has-item? unit props-of (th/ header)))
			  $properties-accessor-list$
			  $property-headers$))
		   (tr/ (map/ (lambda (n refer items-of)
				(has-item? unit items-of
					   (td/ (select/ (@/ (name n))
							 (map/ (lambda (item)
								 (if (eq? item (refer musume))
								     (option/ (@/ (value (code-of item))
										  (selected "true"))
									      (disp-name-of item))
								     (option/ (@/ (value (code-of item)))
									      (disp-name-of item))))
							       (items-of unit))))))
			      $property-list$ $property-accessor-list$ $properties-accessor-list$)
			(td/ (input/ (@/ (type "submit") (value ($$ "コミット")))))
			)))
		 (td/ (@/ (rowspan 2) (id "limit-calendar"))
		      (calendar/ date limit-date target-date get-target set-target!)))
		(tr/
		 (td/
		  (table/ (@/ (class "extension"))
                          (tr/
                           (td/)
                           (td/ (span/ (@/ (onclick (format "popup_linkselect(event, ~s)" (key-of unit))))
                                       (clickable ($$ "案件へのリンク")))))
			  (tr/
			   (td/ ($$ "内容"))
			   (td/ (textarea/ (@/ (type "text") (name "melody")
					       (rows 10) (cols 80) (id "focus")))))
			  (tr/
			   (td/ ($$ "ファイル"))
			   (td/ (input/ (@/ (type "file") (name "file")))))
			  )))))

              (table/
               (@/ (id "links-table"))
               (tr/
                (th/ ($$ "リンク先"))
                (th/ ($$ "リンク元")))
               (tr/
                (td/
                 (ul/ (map/ (compose li/ link-of) (ref musume 'links))))
                (td/
                 (ul/ (map/ (compose li/ link-of) (ref musume 'backlinks))))))

	      (let1 songs (all-songs musume)
		(map/ (lambda (k n f t m u)
			(let1 song (id->obj <song> k)
			  (if (delete-of song)
			      (dl/ (@/ (id #`",k"))
				   (dt/ (span/ (@/ (class "song-no")) #`"♪,|n|.")
					(span/ (@/ (class "song-time")) #`" ,(sys-strftime \"%Y/%m/%d %H:%M:%S\" (sys-localtime t))")
					(span/ (@/ (class "song-fan")) #`"[,(fan-name-of f)]")
					(composer? song
						   (a/cont/ (@/ (onClick (format "return confirm('~a')?true:false"
										 ($$ "本当に復活しますか？"))))
							    (@@/ (cont delete-revival-song k)) ($$ "復活"))))
				   (dd/ (pre/ (@/ (class "warning")) ($$ "このメロディは削除されてます"))))
			      (dl/ (@/ (id #`",k"))
				   (dt/ (span/ (@/ (class "song-no")) #`"♪,|n|.")
					(span/ (@/ (class "song-time")) #`" ,(sys-strftime \"%Y/%m/%d %H:%M:%S\" (sys-localtime t))")
					(span/ (@/ (class "song-fan")) #`"[,(fan-name-of f)]")
					(composer? song
						   (a/cont/ (@/ (onClick (format "return confirm('~a')?true:false"
										 ($$ "本当に削除しますか？"))))
							    (@@/ (cont delete-revival-song k)) ($$ "削除"))))
				   (if (null? u)
				       (dd/ (pre/ (melody-format m)))
				       (let1 upfile (car u)
					 (dd/ (pre/ m
						    (br/)
						    (a/ (@/ (href (uri-of upfile))) (name-of upfile))) "")))))))
		      (map key-of songs)
		      (map seq-no-of songs)
		      (map fan-of songs)
		      (map ctime-of songs)
		      (map melody-of songs)
		      (map files-of songs))
		)))))
      (viewer (or (get-target) (today)) (get-target) (get-target))
       )))

;;;==============================================================
;;; Task calender
;;;
(define-entry (task-calendar)
  (define (calendar date)
    (permission-check-page
     identity
     ($$ "カレンダーは一般ユーザアカウントが必要です")
     (div/ (ul/ (@/ (class "menu"))
                (li/ (a/cont/ (@/ (class "clickable"))
			      (@@/ (cont task-calendar)) ($$ "カレンダー")))
                (li/ (a/cont/ (@/ (class "clickable"))
			      (@@/ (cont mypage 'todo)) ($$ "TODO")))
		(li/ (a/cont/ (@/ (class "clickable"))
			      (@@/ (cont mypage 'recent)) ($$ "最近の更新")))
		(li/ (a/cont/ (@/ (class "clickable"))
			      (@@/ (cont mypage 'bookmark)) ($$ "ブックマーク")))
		(help-button/ "mypage")))
     (div/ (@/ (id "limit-calendar"))
	   (task-calendar-table/ date))))
  (calendar (today)))

;;;==============================================================
;;; MyPage
;;;
(define-entry (mypage type)
  (define (todo)
    (fieldset/
     (legend/ ($$ "TODO"))
     (let1 musumes (let1 fan (current-fan)
                     (filter
                      (lambda (musume)
                        (eq? (assign-of musume) fan))
                      (make-kahua-collection <musume>)))
       (format "~a item(s)" (length musumes))
       (table/ (@/ (class "listing"))
               (thead/ (tr/ (th/ ($$ "タイトル"))
                            (th/ ($$ "優先度"))
                            (th/ ($$ "ステータス"))
                            (th/ ($$ "タイプ"))
                            (th/ ($$ "登録日"))))
               (tbody/
                (map/ (lambda (m)
                        (let1 status (status-of m)
                          (tr/ (@/ (class #`"status-,(code-of status)"))
                               (td/ (label-of m))
                               (td/ (disp-name-of (priority-of m)))
                               (td/ (disp-name-of status))
                               (td/ (disp-name-of (type-of m)))
                               (td/ (sys-strftime "%Y/%m/%d"
                                                  (sys-localtime (ctime-of m)))))))
                      (sort musumes
			    (lambda (m1 m2)
			      (> (ctime-of m1) (ctime-of m2))))))))))

  (define (recent)
    (fieldset/
     (legend/ ($$ "最近の更新"))
     (let* ((units (filter (cut fan-to? <> (current-fan))
                           (all-units)))
            (musumes (append-map all-active-musumes units))
            (songs (append-map songs-of  musumes))
            (songs (reverse (sort songs)))
            (songs (take* songs 20)))
       (format "~a item(s)" (length songs))
       (map/ (lambda (s)
               (let1 m (musume-of s)
                 (div/
                  (fieldset/
                   (legend/ (label-of m))
                   (dt/
		    (format "♪~a. ~a[~a]"
			    (seq-no-of s)
			    (sys-strftime "%Y/%m/%d %H:%M:%S" (sys-localtime (ctime-of s)))
			    (fan-name-of (fan-of s))))
                   (pre/ (melody-format (melody-of s)))))))
             songs))))

  (define (bookmark)
    (fieldset/
     (legend/ ($$ "ブックマーク"))
     (let1 musumes (or (ref (current-fan) 'bookmark) '())
       (format "~a item(s)" (length musumes))
       (table/ (@/ (class "listing"))
               (thead/ (tr/ (th/ ($$ "削除"))
                            (th/ ($$ "タイトル"))
                            (th/ ($$ "優先度"))
                            (th/ ($$ "ステータス"))
                            (th/ ($$ "タイプ"))
                            (th/ ($$ "登録日"))))
               (tbody/
                (map/ (lambda (m)
                        (let1 status (status-of m)
                          (tr/ (@/ (class #`"status-,(code-of status)"))
                               (td/ (a/cont/ (@/ (onClick (format "return confirm('~a')?true:false"
                                                                  ($$ "本当に削除しますか？"))))
                                             (@@/ (cont
                                                   (lambda ()
                                                     (update! (ref (current-fan) 'bookmark)
                                                              (cut delete m  <>))
                                                     (redirect-page "mypage/bookmark"))))
                                             ($$ "削除")))
                               (td/ (label-of m))
                               (td/ (disp-name-of (priority-of m)))
                               (td/ (disp-name-of status))
                               (td/ (disp-name-of (type-of m)))
                               (td/ (sys-strftime "%Y/%m/%d"
                                                  (sys-localtime (ctime-of m)))))))
                      musumes))))))

  (permission-check-page
   identity
   ($$ "マイページは一般ユーザアカウントが必要です")
   (let1 type (and type (string->symbol type))
     (div/ (ul/ (@/ (class "menu"))
                (li/ (a/cont/ (@/ (class "clickable"))
			      (@@/ (cont task-calendar)) ($$ "カレンダー")))
                (li/ (a/cont/ (@/ (class "clickable"))
			      (@@/ (cont mypage 'todo)) ($$ "TODO")))
		(li/ (a/cont/ (@/ (class "clickable"))
			      (@@/ (cont mypage 'recent)) ($$ "最近の更新")))
		(li/ (a/cont/ (@/ (class "clickable"))
			      (@@/ (cont mypage 'bookmark)) ($$ "ブックマーク"))))
           (case type
             ((todo) (todo))
             ((recent) (recent))
             ((bookmark) (bookmark))
             (else (recent)))))))

;;;==============================================================
;;; Add Bookmark
;;;
(define-entry-method add-bookmark ((musume <musume>))
  (update! (ref (current-fan) 'bookmark)
           (lambda (bkmks)
             (let1 bkmks (or bkmks '())
               (if (memq musume bkmks)
                   bkmks
                 (cons musume bkmks)))))
  (redirect-to musume))

(define-entry (select unit-id)
  (let1 musume-list (entry-lambda (:keyword unit-id)
                      (let1 unit (find-kahua-instance <unit> unit-id)
                        (ul/ (@/ (class "musumes")
                                 (onclick #`"return insert_mlink(event)"))
                             (map/
                              (lambda (m)
                                (li/
                                 (link-of m
                                   :body (node-set
                                          (list (@/ (target (format "[[~a/~a]]" (key-of unit) (mno-of m))))
                                                (format "♪~a ~a" (mno-of m) (mname-of m)))))))
                              (all-active-musumes unit)))))
    (html/
     (body/
      (div/ (@/ (class "miniwindow"))
            (div/ (@/ (class "minititle"))
                  ($$ "ユニットを選択してください")
                  (a/ (@/ (href "#")
                          (onclick "close_memo(); return false"))
                      ($$ "×")))
            (ul/ (@/ (onclick #`"return check_click(event,,',(session-cont-register musume-list)')"))
                 (map/ (lambda (unit)
                         (li/ (@/ (target (key-of unit)))
                              (link-of unit)))
                       (all-units (current-fan))))
            )))))

(define (change-passwd . message)
  (let* ((cuser (kahua-current-user))
	 (cuser-name (ref cuser 'login-name)))
    (permission-check-page
     identity
     ($$ "パスワード変更には一般ユーザのアカウントが必要です")
     (h3/ (format ($$ "~a さんのパスワード変更") cuser-name))
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword old-pw new-pw new-again-pw)
		     (cond ((or (equal? "" new-pw)
				(equal? "" new-again-pw)
				(not (equal? new-pw new-again-pw)))
			    (change-passwd ($$ "新パスワードが不正です")))
			   ((not (kahua-check-user cuser-name old-pw))
			    (change-passwd ($$ "旧パスワードが不正です")))
			   (else
			    (kahua-user-password-change-force cuser new-pw)
			    (message-only-page
			     (format ($$ "~a さんのパスワードを変更しました") cuser-name)))))))
      (change-passwrod-table/ "old-pw" "new-pw" "new-again-pw")
      (input/ (@/ (type "submit") (name "submit") (value ($$ "変更"))))
      (p/ (@/ (class "warning")) (node-set message))
      ))))

(define (message-only-page . message)
  message
  (kagoiri-page
   (div/ (@/ (class "msgbox"))
	 (h3/ (node-set message)))))

(define (clickable text)
  (span/ (@/ (class "clickable"))
         text))

;;;==============================================================
;;; Help
;;;
(define-entry (help keywd)
  ;; ここにヘルプのカタログを作成する
  (letrec ((++ (lambda args (string-join args "\n")))
	   (msg (cond ((equal? keywd "calendar")
		       (++ ($$ "期限設定カレンダーのヘルプです")
			   ($$ "選択して投稿すると期限が登録されます")
			   ($$ "デフォルトでは期限無しですが、設定したものは期限削除で削除してから投稿してください")
			   ($$ "仮選択中の日付ではなく、元の期限設定に戻したい場合には変更中止を押してください")
			   ($$ "元の設定に選択状態が戻されます")))
		      ((equal? keywd "mypage")
		       (++ ($$ "マイページのヘルプです")
			   ($$ "カレンダーで期限が設定されている娘。を確認できます")
			   ($$ "TODOであなたにアサインされている娘。を確認できます")
			   ($$ "最近の更新で最近の登録内容が確認できます")
			   ($$ "ブックマークであなたがブックマークに追加した娘。を確認できます")))
		      (else "ヘルプがありません。"))))
    (html/
     (body/
      (div/ (@/ (class "minwindow"))
	    (div/ (@/ (class "minititle"))
		  ($$ "ヘルプ")
		  (a/ (@/ (href "#")
			  (onclick "close_help(); return false"))
		      ($$ "×")))
	    (pre/ msg))))))


;
; initialization
;

(initialize-main-proc **)

;
; error
;
(define (error-proc exc)
  (let1 msg (kahua-error-string exc (kahua-current-user))
    (error-log-write 'Error 1 msg)
    ;; もっとメールのmsg内容は充実させる予定
    (sendmail-system-info msg)
    (kagoiri-page
     (div/ (@/ (class "error"))
	   (h3/ (@/ (class "warning"))
		"エラーが発生しました")
	   (pre/ msg)))))


(kahua-error-proc error-proc)
