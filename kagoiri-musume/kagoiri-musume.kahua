;; -*- coding: euc-jp; mode: scheme -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: kagoiri-musume.kahua,v 1.80 2005/10/06 10:24:22 cut-sea Exp $
;;
;; include
;; use
(use gauche.charconv)
(use gauche.logger)
(use rfc.base64)
(use srfi-13)
(use srfi-19)
(use util.list)
(use srfi-1)
(use gauche.collection)
(use gauche.sequence)

(use sendmail)
(use upload)

(load "kagoiri-musume/version.kahua")
(load "kagoiri-musume/local.kahua")
(load "kagoiri-musume/class.kahua")
(load "kagoiri-musume/search.kahua")
(load "kagoiri-musume/page.kahua")
(load "kagoiri-musume/gadget.kahua")
(load "kagoiri-musume/parts-collection.kahua")
(load "kagoiri-musume/sys-admin.kahua")

; main page
;
(define-entry (kagoiri)
  (kagoiri-page
   (h2/ "籠入娘。へようこそ！")
   (ul/ (li/ (a/cont/ (@@/ (cont admin-system)) "システム設定管理画面"))
	(li/ (a/cont/ (@@/ (cont unit-list)) "ユニット一覧")))
   ))

(define-entry (unit-list)
  (permission-check-page identity "ユニット一覧は一般ユーザアカウントが必要です"
   (h2/ "ユニット一覧")
   (table/ (@/ (class "listing"))
           (thead/
    (tr/ (th/) (th/)
	 (th/ "ユニット名")
	 (th/ "概要")
	 (th/ "ファン")))
           (tbody/
            (node-set
    (map-with-index (lambda (idx u)
	    (tr/ (@/ (class (if (odd? idx) "odd" "even")))
                       (td/ (a/cont/
		       (@@/ (cont unit-edit (key-of u)))
		       "編集"))
		 (td/ (a/cont/
                       (@/ (onClick "return confirm('本当に削除しますか？')?true:false"))
		       (@@/ (cont unit-fallout (key-of u)))
		       "削除"))
		 (td/ (a/cont/
		       (@@/ (cont musume-list (key-of u)))
		       (unit-name-of u))
                      (format " (~a)"
                              (- (next-musume-no-of u) 1)))
		 (td/ (description-of u))
		 (td/ (string-join (filter-map (lambda (f)
                                                 (and (not (equal? "   " f))
                                                      (fan-name-of f)))
					   (fans-of u)) " , "))))
	  (all-units)))))
   (hr/)
   (h2/ "新ユニット結成")
   (form/cont/
    (@@/ (cont (entry-lambda (:keyword name desc)
		   (and (not (string-null? name))
			(or (find-kahua-instance <unit> name)
			    (make <unit>
			      :unit-name name
			      :description desc
			      :fans (id-list->obj-list <fan-property> (kahua-context-ref* "fans"))
			      :priorities (id-list->obj-list <priority> (kahua-context-ref* "priority"))
			      :statuss (id-list->obj-list <status> (kahua-context-ref* "status"))
			      :types (id-list->obj-list <type> (kahua-context-ref* "type"))
			      :categories (id-list->obj-list <category> (kahua-context-ref* "category"))
			      )))
		 (redirect-page "unit-list"))))
    (table/
     (tr/ (th/ "優先度")
	  (th/ "ステータス")
	  (th/ "タイプ")
	  (th/ "カテゴリ"))
     (tr/ (map/ (lambda (n items)
		  (td/ (select/ (@/ (name n) (size "5") (multiple "true"))
				(map/ (lambda (item)
					(option/ (@/ (value (code-of item)))
						 (disp-name-of item)))
				      items))))
		(list "priority" "status" "type" "category")
		(list (all-priorities) (all-statuss) (all-types) (all-categories)))))
    (table/
     (tr/ (td/ "ユニット名")
	  (td/
	   (textarea/ (@/ (type "text") (name "name")
			  (rows 1) (cols 32)) "")))
     (tr/ (td/ "概要")
	  (td/
	   (textarea/ (@/ (type "text") (name "desc")
			  (rows 10) (cols 80)) "")))
     (tr/ (td/ "ファン")
	  (td/
	   (select/ (@/ (name "fans") (size "5") (multiple "true"))
		    (map/ (lambda (f)
			    (option/ (@/ (value f)) f))
			  (all-fans)))))
     )
    (input/ (@/ (type "submit") (name "submit") (value "新ユニット結成"))))
   ))


(define-entry (unit-edit unit-id)
  (let1 unit (find-kahua-instance <unit> unit-id)
    (permission-check-page
     (lambda (u)
       (if (viewable? unit u)
	   u #f))
     #`"『,(unit-name-of unit)』のファンとしてのアカウントが必要です"
     (h2/ #`"『,(unit-name-of unit)』ユニット編集")
     (hr/)
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword name desc)
		     (begin
		       (if (not (string-null? name))
			   (set! (unit-name-of unit) name))
		       (set! (description-of unit) desc)
		       (set! (fans-of unit) (id-list->obj-list <fan-property> (kahua-context-ref* "fans")))
		       (set! (priorities-of unit) (id-list->obj-list <priority> (kahua-context-ref* "priority")))
		       (set! (statuss-of unit) (id-list->obj-list <status> (kahua-context-ref* "status")))
		       (set! (types-of unit) (id-list->obj-list <type> (kahua-context-ref* "type")))
		       (set! (categories-of unit) (id-list->obj-list <category> (kahua-context-ref* "category")))
		       (redirect-page "unit-list"))
		   (redirect-page "unit-list"))))
      (table/
       (tr/ (th/ "優先度")
	    (th/ "ステータス")
	    (th/ "タイプ")
	    (th/ "カテゴリ"))
       (tr/ (map/ (lambda (n items)
		    (td/ (select/ (@/ (name n) (size "5") (multiple "true"))
				  (map/ (lambda (item)
					  (option/ (@/ (value (code-of item))
						       (selected (has? unit item)))
						   (disp-name-of item)))
					items))))
		  (list "priority" "status" "type" "category")
		  (list (all-priorities) (all-statuss) (all-types) (all-categories)))))
      (table/
       (tr/ (td/ "ユニット名")
	    (td/
	     (textarea/ (@/ (type "text") (name "name")
			    (rows 1) (cols 32))
			(unit-name-of unit))))
       (tr/ (td/ "概要")
	    (td/
	     (textarea/ (@/ (type "text") (name "desc")
			    (rows 10) (cols 80))
			(description-of unit))))
       (tr/ (td/ "ファン")
	    (td/
	     (select/ (@/ (name "fans") (size "5") (multiple "true"))
		      (map/ (lambda (f)
                              (let1 fan-name (fan-name-of f)
                                (option/ (@/ (value fan-name)
                                             (selected (fan-to? unit f)))
                                         fan-name)))
                            (filter lucky-fan?
                                    (make-kahua-collection <fan-property>))))))
       )
      (input/ (@/ (type "submit") (name "submit") (value "確定"))))
     )))

; TODO: check account
;
(define-entry (unit-fallout unit-id)
  (let1 unit (find-kahua-instance <unit> unit-id)
    (define checker (lambda (u)
		      (if (memq (find-kahua-instance <fan-property> (ref u 'login-name))
                                (fans-of unit))
			  u #f)))
    (let1 user (or (and (kahua-current-user)
			(checker (kahua-current-user)))
		   (login-pc-page #f checker))
      (permission-check-logic
       checker
       #`"『,(unit-name-of unit)』のファンとしてのアカウントが必要です"
       (begin
	 (if (checker user)
	     (set! (fallout-of unit) #t))
	 (redirect-page "unit-list"))))))

(define-entry (musume-list unit-id :keyword priority status assign type limit)
  (let* ((*default-limit* 200)
	 (*limits-list* '("" "20" "50" "200" "500" "1000"))
	 (*limit* (or limit (x->string *default-limit*)))
         (*status-dict* (make-hash-table 'string=?)))
    (let* ((p-filter (if (or (not priority)
			     (equal? "*all*" priority))
			 identity
			 (lambda (m) (equal? (code-of (priority-of m)) priority))))
	   (s-filter (if (or (not status)
			     (equal? "*all*" status))
			 identity
			 (lambda (m) (equal? (code-of (status-of m)) status))))
	   (a-filter (if (or (not assign)
			     (equal? "   " assign))
			 identity
			 (lambda (m) (equal? (fan-name-of (assign-of m)) assign))))
	   (t-filter (if (or (not type)
			     (equal? "*all*" type))
			 identity
			 (lambda (m) (equal? (code-of (type-of m)) type))))
	   (and-filter (lambda (m)
                         (let1 statusid (code-of (status-of m))
                           (hash-table-put!
                            *status-dict*
                            statusid
                            (+ (hash-table-get *status-dict* statusid 0) 1)))
                         (and (p-filter m)
                              (s-filter m)
                              (a-filter m)
                              (t-filter m))))
	   (limiter (if (string-null? *limit*)
			identity
			(lambda (ms)
			  (take* ms (x->integer *limit*))))))
      (let1 unit (find-kahua-instance <unit> unit-id)
	(permission-check-page
	 (lambda (u)
	   (if (viewable? unit u)
	       u #f))
	 #`"『,(unit-name-of unit)』のファンであるアカウントが必要です"
	 (ul/ (li/ (a/cont/ (@@/ (cont musume-list unit-id)) "娘。一覧"))
	      (li/ (a/cont/ (@@/ (cont musume-new unit-id)) "新しい娘。")))
         (form/cont/
          (@@/ (cont search `(unit-id ,unit-id)))
          "ユニット内検索:"
          (input/ (@/ (type "text") (name "word") (size 10)))
          (input/ (@/ (type "submit") (value "検索"))))
	 (h2/ (unit-name-of unit) " - 娘。一覧")
	 (form/cont/ (@@/ (cont musume-list unit-id))
		     (table/
		      (tr/ (th/ "優先度")
			   (th/ "ステータス")
			   (th/ "アサイン")
			   (th/ "タイプ")
			   (th/ "表示上限"))
		      (tr/
		       (td/
			(select/
			 (@/ (name "priority"))
			 (node-set
			  (cons (option/ (@/ (value "*all*")) "全て")
				(map (lambda (p)
				       (if (equal? (code-of p) priority)
					   (option/ (@/ (value (code-of p)) (selected "true"))
						    (disp-name-of p))
					   (option/ (@/ (value (code-of p)))
						    (disp-name-of p))))
                                     (priorities-of unit))))))
		       (td/
			(select/
			 (@/ (name "status"))
			 (node-set
			  (cons (option/ (@/ (value "*all*")) "全て")
				(map (lambda (s)
				       (if (equal? (code-of s) status)
					   (option/ (@/ (value (code-of s)) (selected "true"))
						    (disp-name-of s))
					   (option/ (@/ (value (code-of s)))
						    (disp-name-of s))))
                                     (statuss-of unit))))))
		       (td/
			(select/
			 (@/ (name "assign"))
			 (map/ (lambda (a)
				 (if (equal? (fan-name-of a) assign)
				     (option/ (@/ (value (fan-name-of a)) (selected "true"))
					      (fan-name-of a))
				     (option/ (@/ (value (fan-name-of a)))
					      (fan-name-of a))))
				    (fans-of unit))))
		       (td/
			(select/
			 (@/ (name "type"))
			 (node-set
			  (cons (option/ (@/ (value "*all*")) "全て")
				(map (lambda (t)
				       (if (equal? (code-of t) type)
					   (option/ (@/ (value (code-of t)) (selected "true"))
						    (disp-name-of t))
					   (option/ (@/ (value (code-of t)))
						    (disp-name-of t))))
                                     (types-of unit))))))
		       (td/
			(select/
			 (@/ (name "limit"))
			 (map/ (lambda (l)
				 (if (equal? *limit* l)
				     (option/ (@/ (value l) (selected "true")) l)
				     (option/ (@/ (value l)) l)))
			       *limits-list*)))
		       (td/ (input/ (@/ (type "submit") (name "submit") (value "絞り込み"))))
		       ))
		     ;; data table
		     (let1 musumes (limiter (sort (filter and-filter
							  (all-musumes unit))
						  (lambda (m1 m2)
						    (> (mno-of m1) (mno-of m2)))))
		       (table/ (@/ (class "listing"))
			(thead/ (cond ((= 0 (length musumes)) "萌えられる娘。がいません(T^T)")
				      ((= 1 (length musumes)) "ただひとりの娘。に萌えました")
				      ((> 100 (length musumes)) #`",(length musumes)人の娘。に萌えました")
				      ((> 500 (length musumes)) #`",(length musumes)人もの娘。に萌えました(萌えすぎです)")
				      (else #`"なんと,(length musumes)人もの娘。に萌えまつきました orz"))
                                (div/ (@/ (id "status-num"))
                                 (map/ (lambda (s)
                                         (let1 statusid (code-of s)
                                           (span/ (a/cont/ (@@/ (cont musume-list unit-id  `(status ,statusid)))
                                                           (disp-name-of s))
                                                  (format "(~a) " (hash-table-get *status-dict* statusid 0)))))
                                       (statuss-of unit)))
                                (tr/ (th/ "No.")
                                     (th/ "タイトル")
                                     (th/ "優先度")
                                     (th/ "ステータス")
                                     (th/ "アサイン")
                                     (th/ "タイプ")
                                     (th/ "登録日")
                                     (th/ "更新日")))
                        (tbody/
			(map/ (lambda (m)
                                (let ((status (status-of m))
                                      (musics (musics-of m)))
				(tr/ (@/ (class #`"status-,(code-of status)"))
                                     (td/ (a/cont/
					   (@@/ (cont musume-edit (key-of m)))
					   (x->string (mno-of m))))
				     (td/ (a/cont/
					   (@@/ (cont melody-list (key-of (unit-id-of m)) (key-of m)))
					   (mname-of m))
                                          (format " (~a)" (length musics)))
				     (td/ (disp-name-of
                                           (priority-of m)))
				     (td/ (disp-name-of
                                           status))
				     (td/ (fan-name-of
                                           (assign-of m)))
				     (td/ (disp-name-of
                                           (type-of m)))
				     (td/ (sys-strftime "%Y/%m/%d %H:%M"
							(sys-localtime (ctime-of m))))
                                     (td/ (sys-strftime "%Y/%m/%d %H:%M"
							(sys-localtime (ctime-of (car musics))))))))
			      musumes)))
		     )))))))

(define-entry (musume-new unit-id)
  (let1 unit (find-kahua-instance <unit> unit-id)
    (permission-check-page
     (lambda (u)
       (if (viewable? unit u)
	   u #f))
     #`"『,(unit-name-of unit)』のファンであるアカウントが必要です"
     (ul/ (li/ (a/cont/ (@@/ (cont musume-list unit-id)) "娘。一覧"))
	  (li/ (a/cont/ (@@/ (cont musume-new unit-id)) "新しい娘。")))
     (h2/ (unit-name-of unit) " - 新しい娘。")
     (form/cont/
      (@/ (enctype "multipart/form-data"))
      (@@/ (cont (entry-lambda (:keyword name priority status assign type category melody file)
		     (if (not (string-null? name))
			 (begin
			   (if (string-null? melody) (set! melody name))
			   (set! melody (string-join (string-split melody "\r\n") "\n"))
			   (let1 musume (make <musume>
					  :unit-id unit
					  :musume-name name
					  :priority (id->obj <priority> priority)
					  :status (id->obj <status> status)
					  :assign (id->obj <fan-property> assign)
					  :type (id->obj <type> type)
					  :category (id->obj <category> category))
			     (let1 music (make <music>
					   :musume-id musume
					   :melody melody
					   :fan-id (id->obj <fan-property> (kahua-current-user-name)))
			       ;; save file and make file object.
			       (if file
				   (let* ((tmp-path (car file))
					  (file-name (cadr file))
					  (real-name #`",(ref unit 'id)_,(ref musume 'id)_,(ref music 'id)")
					  (file-path #`",|*kagoiri-musume-upload-path*|/,|real-name|")
					  (file-uri #`",|*kagoiri-musume-upload-uri*|/,|real-name|"))
				     (sys-rename tmp-path file-path)
				     ;; now, just one file upload support, but...
				     (set! (files-of music)
					   (list (make <file> :file-name file-name :path file-path :uri file-uri)))))
			       (sendmail-lite unit musume music)))))
		   (redirect-page #`"musume-list/,|unit-id|"))))
      (table/
       (tr/ (th/ "優先度") (th/ "ステータス") (th/ "タイプ") (th/ "カテゴリ") (th/ "アサイン"))
       (tr/
	(map/ (lambda (n refer)
		(td/ (select/ (@/ (name n))
			      (map/ (lambda (item)
				      (option/ (@/ (value (code-of item)))
					       (disp-name-of item)))
				    (refer unit)))))
	      (list "priority" "status" "type" "category" "assign")
	      (list priorities-of statuss-of types-of categories-of fans-of))
	(td/ (input/ (@/ (type "submit") (name "submit") (value "新しい娘。加入"))))))
      (table/ (tr/ (td/ "タイトル")
		   (td/ (textarea/ (@/ (type "text") (name "name")
				       (rows 1) (cols 32)) "")))
	      (tr/ (td/ "内容")
		   (td/ (textarea/ (@/ (type "text") (name "melody")
				       (rows 20) (cols 80)) "")))
	      (tr/ (td/ "ファイル")
		   (td/ (input/ (@/ (type "file") (name "file"))) (b/ "まだファイルアップできません"))))
      (input/ (@/ (type "submit") (name "submit") (value "新しい娘。加入"))))
     )))

(define-entry (musume-view)
  (permission-check-page identity "ちょいまってや"
   "娘。の閲覧"))

(define-entry (musume-edit musume-id)
  (let* ((musume (find-kahua-instance <musume> musume-id))
	 (unit (unit-id-of musume)))
    (permission-check-page
     identity
     #`"『,(unit-name-of unit)』のファンであるアカウントが必要です"
     (h3/ #`"『,(unit-name-of unit)』の『,(mname-of musume) 』を編集する。")
     "工事中"
     )
    ))

(define-entry (melody-list unit-id musume-id)
  (let ((unit (find-kahua-instance <unit> unit-id))
        (musume (find-kahua-instance <musume> musume-id)))
    (permission-check-page
     (lambda (u)
       (if (viewable? unit u)
	   u #f))
     #`"『,(unit-name-of unit)』のファンであるアカウントが必要です"
     (ul/ (li/ (a/cont/ (@@/ (cont musume-list unit-id)) "娘。一覧"))
	  (li/ (a/cont/ (@@/ (cont musume-new unit-id)) "新しい娘。")))
     (h3/ (unit-name-of unit) " - "
	  (x->string (mno-of musume)) "："
	  (mname-of musume) " - "
	  (disp-name-of
           (status-of musume)))
     (let1 musics (reverse (all-musics musume))
       (map/ (lambda (n f t m u)
	       (dl/
		(dt/ #`"#,|n|. ,(sys-strftime \"%Y/%m/%d %H:%M:%S\" (sys-localtime t))[,(fan-name-of f)]")
		(if (null? u)
		    (dd/ (pre/ m))
		    (let1 upfile (car u)
		      (dd/ (pre/ m
				 (br/)
				 (a/ (@/ (href (uri-of upfile))) (name-of upfile))) "")))
		     ))
	     (map (lambda (m) (seq-no-of m)) musics)
	     (map (lambda (m) (fan-id-of m)) musics)
	     (map (lambda (m) (ctime-of m)) musics)
	     (map melody-of musics)
	     (map files-of musics)))
     (form/cont/
      (@/ (enctype "multipart/form-data"))
      (@@/ (cont (entry-lambda (:keyword melody priority status type assign file)
		     (if (and (string-null? melody)
			      (not file))
			 (begin
			   (set! (priority-of musume) (id->obj <priority> priority))
			   (set! (status-of musume) (id->obj <status> status))
			   (set! (type-of musume) (id->obj <type> type))
			   (set! (assign-of musume) (id->obj <fan-property> assign)))
			 (begin
			   (set! melody (string-join (string-split melody "\r\n") "\n"))
			   (let1 music (make <music>
					 :musume-id musume
					 :melody melody
					 :fan-id (current-fan))
			     (set! (priority-of musume) (id->obj <priority> priority))
			     (set! (status-of musume) (id->obj <status> status))
			     (set! (type-of musume) (id->obj <type> type))
			     (set! (assign-of musume) (id->obj <fan-property> assign))
			     ;; save file and make file object.
			     (if file
				 (let* ((tmp-path (car file))
					(file-name (cadr file))
					(real-name #`",(ref unit 'id)_,(ref musume 'id)_,(ref music 'id)")
					(file-path #`",|*kagoiri-musume-upload-path*|/,|real-name|")
					(file-uri #`",|*kagoiri-musume-upload-uri*|/,|real-name|"))
				   (sys-rename tmp-path file-path)
				   ;; now, just one file upload support, but...
				   (set! (files-of music)
					 (list (make <file> :file-name file-name :path file-path :uri file-uri)))))
			     (sendmail-lite unit musume music))))
		   (redirect-page #`"melody-list/,|unit-id|/,|musume-id|"))))
      (table/
       (tr/ (th/ "優先度") (th/ "ステータス") (th/ "タイプ") (th/ "アサイン"))
       (tr/ (map/ (lambda (n refer items-of)
		    (td/ (select/ (@/ (name n))
				  (map/ (lambda (item)
					  (if (eq? item (refer musume))
					      (option/ (@/ (value (code-of item))
							   (selected "true"))
						       (disp-name-of item))
					      (option/ (@/ (value (code-of item)))
						       (disp-name-of item))))
					(items-of unit)))))
		  (list "priority" "status" "type" "assign")
		  (list priority-of status-of type-of assign-of)
		  (list priorities-of statuss-of types-of fans-of))
	    (td/ (input/ (@/ (type "submit") (name "submit") (value "コミット"))))
	    ))
      (table/
       (tr/
	(td/ "内容")
	(td/ (textarea/ (@/ (type "text") (name "melody")
			    (rows 20) (cols 80)) ""))
	(tr/
	 (td/ "ファイル")
	 (td/ (input/ (@/ (type "file") (name "file"))) (b/ "まだファイルアップできません")))))
      (input/ (@/ (type "submit") (name "submit") (value "コミット"))))
     )))

(define-entry (mypage)
  (permission-check-page
   identity
   "マイページは一般ユーザアカウントが必要です"
    (fieldset/
     (legend/ "TODO")
     (let1 musumes (let1 fan (current-fan)
                     (filter
                      (lambda (musume)
                        (eq? (assign-of musume) fan))
                      (make-kahua-collection <musume>)))
       (format "~a item(s)" (length musumes))
       (table/ (@/ (class "listing"))
               (thead/ (tr/ (th/ "タイトル")
                            (th/ "優先度")
                            (th/ "ステータス")
                            (th/ "タイプ")
                            (th/ "登録日")))
               (tbody/
                (map/ (lambda (m)
                        (let1 status (status-of m)
                          (tr/ (@/ (class #`"status-,(code-of status)"))
                               (td/ (label-of m))
                               (td/ (disp-name-of (priority-of m)))
                               (td/ (disp-name-of status))
                               (td/ (disp-name-of (type-of m)))
                               (td/ (sys-strftime "%Y/%m/%d"
                                                  (sys-localtime (ctime-of m)))))))
                      musumes)))))))

(define (change-passwd . message)
  (let* ((cuser (kahua-current-user))
	 (cuser-name (ref cuser 'login-name)))
    (permission-check-page
     identity
     #`"パスワード変更には一般ユーザのアカウントが必要です"
     (h3/ #`",|cuser-name| さんのパスワード変更")
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword old-pw new-pw new-again-pw)
		   (cond ((or (equal? "" new-pw)
			      (equal? "" new-again-pw)
			      (not (equal? new-pw new-again-pw)))
			  (change-passwd "新パスワードが不正です"))
			 ((not (kahua-check-user cuser-name old-pw))
			  (change-passwd "旧パスワードが不正です"))
			 (else
			  (kahua-user-password-change-force cuser new-pw)
			  (message-only-page #`",|cuser-name| さんのパスワードを変更しました"))))))
      (table/
       (tr/ (th/ "旧パスワード")
	    (td/ (input/ (@/ (type "password") (name "old-pw")
			     (value "")) "")))
       (tr/ (th/ "新パスワード")
	    (td/ (input/ (@/ (type "password") (name "new-pw")
			     (value "")) "")))
       (tr/ (th/ "新パスワード(確認)")
	    (td/ (input/ (@/ (type "password") (name "new-again-pw")
			     (value "")) ""))))
      (input/ (@/ (type "submit") (name "submit") (value "変更")))
      (p/ (@/ (class "warning")) (node-set message))
      ))))

(define (message-only-page . message)
  message
  (kagoiri-page
   (div/ (@/ (class "msgbox"))
	 (h3/ (node-set message)))))



;
; initialization
;

(initialize-main-proc kagoiri)
