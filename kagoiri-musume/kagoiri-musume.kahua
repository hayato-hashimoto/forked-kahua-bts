;; -*- coding: euc-jp; mode: scheme -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: kagoiri-musume.kahua,v 1.136 2005/11/12 13:40:23 shibata Exp $

;;
;; include
;; use
(use gauche.charconv)
(use gauche.logger)
(use file.util)
(use rfc.base64)
(use srfi-10)
(use srfi-13)
(use srfi-19)
(use util.list)
(use srfi-1)
(use gauche.collection)
(use gauche.sequence)
(use gauche.parameter)
(use text.gettext)

(use sendmail)

;; aliases
;;
; xgettext -L Scheme -k\$\$ *.kahua --from-code=euc-jp -o msgs/ja/kagoiri-musume.po
; msgfmt -o kagoiri-musume.mo kagoiri-musume.po 
(textdomain "kagoiri-musume"
            "ja"
            (build-path (ref (kahua-config) 'working-directory)
                        "checkout"
                        "kagoiri-musume"
                        "msgs")
            ""
            #f)

(define $$ gettext)

(load "kagoiri-musume/version.kahua")
(load "kagoiri-musume/user-setting.kahua")

(load "kagoiri-musume/class.kahua")
(load "kagoiri-musume/search.kahua")
(load "kagoiri-musume/page.kahua")
(load "kagoiri-musume/gadget.kahua")
(load "kagoiri-musume/parts-collection.kahua")
(load "kagoiri-musume/sys-admin.kahua")

;; DB Setting.
;;
(define-if-not-bound *kagoiri-musume-title*
  "籠入娘。 - Groupie System")

(define-if-not-bound *kagoiri-musume-database-name*
  (let1 dbpath
      (build-path (ref (kahua-config) 'working-directory)
		  "kagoiri-musume"
		  "db")
    dbpath))

;; mail address
;;
(define-if-not-bound *kagoiri-musume-email*
  "support@your.domain")

;; file upload path
;;
(define-if-not-bound *kagoiri-musume-upload-path*
  (let1 upload-path (kahua-static-document-path "kagoiri-musume/upload")
    (make-directory* upload-path)
    upload-path))
    
(define-if-not-bound *kagoiri-musume-upload-uri*
  (kahua-static-document-url "kagoiri-musume/upload"))

;; primary database
;;
(primary-database-name *kagoiri-musume-database-name*)


; main page
;
(define-entry (kagoiri)
  (kagoiri-page
   (h2/ ($$ "籠入娘。へようこそ！"))
   (ul/ (@/ (class "menu"))
        (li/ (a/cont/ (@@/ (cont admin-system)) ($$ "システム設定管理画面")))
	(li/ (a/cont/ (@@/ (cont unit-list)) ($$ "ユニット一覧"))))
   ))

(define-entry (unit-list)
  (permission-check-page
   identity ($$ "ユニット一覧は一般ユーザアカウントが必要です")
   (h2/ ($$ "ユニット一覧"))
   (table/ (@/ (class "listing"))
	   (thead/
	    (tr/ (devel:th/) (devel:th/)
		 (th/ ($$ "ユニット名"))
		 (th/ ($$  "概要"))
		 (th/ ($$ "ファン"))))
	   (tbody/
	    (node-set
	     (map-with-index
	      (lambda (idx u)
		(developer-or-fan?
		 u
		 (tr/ (@/ (class (if (odd? idx) "odd" "even")))
		      (devel:td/
		       (a/cont/
			(@@/ (cont unit-edit (key-of u)))
			($$ "編集")))
		      (devel:td/
		       (a/cont/
			(@/ (onClick (format "return confirm('~a')?true:false"
					     ($$ "本当に削除しますか？"))))
			(@@/ (cont unit-fallout (key-of u)))
			($$ "削除")))
		      (td/ (a/cont/
			    (@@/ (cont musume-list (key-of u)))
			    (unit-name-of u))
			   (format " (~a)"
				   (length (all-active-musumes u))))
		      (td/ (description-of u))
		      (td/ (string-join
			    (filter-map (lambda (f)
					  (and (not (equal? "   " (code-of f)))
					       (fan-name-of f)))
					(fans-of u)) " , "))
		      )))
	      (all-units)))))
   (devel:hr/)
   (devel:h2/ ($$ "新ユニット結成"))
   (devel:form/cont/
    (@/ (onsubmit "return submitForm(this)"))
    (@@/ (cont (entry-lambda (:keyword name desc)
		   (if (or (string-null? name)
			   (null? (kahua-context-ref* "fans")))
		       (set-error-message ($$ "ユニット名入力とファン選択は必須です。"))
		       (set-error-message #f))
		 (begin
		   (create-new-unit name desc)
		   (redirect-page "unit-list")))))
    (table/
     (tr/ (@/ (onclick "toggle_fulllist(event)"))
          (th/ (@/ (colspan 2)) (clickable ($$ "優先度")))
          (th/ (@/ (colspan 2)) (clickable ($$ "ステータス")))
	  (th/ (@/ (colspan 2)) (clickable ($$ "タイプ")))
	  (th/ (@/ (colspan 2)) (clickable ($$ "カテゴリ"))))
     (tr/
      (map/ (lambda (n items)
              (node-set
               (list
                (td/
                 (select/ (@/ (id n) (name n) (size "5") (multiple "true"))
                          (map/ (lambda (item)
                                  (option/ (@/ (value (code-of item)))
                                           (disp-name-of item)))
                                items)))
                (td/ (div/ (@/ (class "clickable")
                               (onclick #`"up_select(this\, ',|n|')"))
                           "↑")
                     (div/ (@/ (class "clickable")
                               (onclick #`"down_select(this\, ',|n|')"))
                           "↓")))))

            (list "priority" "status" "type" "category")
            (list (all-priorities) (all-statuss) (all-types) (all-categories)))))
    (table/
     (tr/ (td/ ($$ "ユニット名") (span/ (@/ (class "warning")) "(※)"))
	  (td/
	   (textarea/ (@/ (type "text") (name "name")
			  (rows 1) (cols 32)) "")
	   (error:span/ (@/ (class "warning")) (set-error-message #f))))
     (tr/
      (td/ ($$  "概要"))
      (td/ (@/ (colspan 2))
	   (textarea/ (@/ (type "text") (name "desc")
			  (rows 10) (cols 80)) "")))
     (tr/ (@/ (align "left"))
          (td/ ($$ "ファン") (span/ (@/ (class "warning")) "(※)"))
          (td/
           (table/
            (tr/
             (td/
              (select/ (@/ (id "fans") (name "fans") (size "5") (multiple "true"))
                       (map/ (lambda (f)
                               (option/ (@/ (value f)) f))
                             (all-fan-names))))
             (td/ (div/ (@/ (class "clickable")
                            (onclick "up_select(this, 'fans')"))
                        "↑")
                  (div/ (@/ (class "clickable")
                            (onclick "down_select(this, 'fans')"))
                        "↓")))))))
    (input/ (@/ (type "submit") (value ($$ "新ユニット結成")))))
   ))


(define-entry (unit-edit unit-id)
  (let1 unit (find-kahua-instance <unit> unit-id)
    (permission-check-page
     (lambda (u)
       (if (viewable? unit u)
	   u #f))
     (format ($$ "『~a』のファンとしてのアカウントが必要です") (unit-name-of unit))
     (h2/ (format ($$ "『~a』ユニット編集") (unit-name-of unit)))
     (hr/)
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword name desc)
		     (if (string-null? name)
			 (begin
			   (set-error-message ($$ "ユニット名を入力してください。"))
			   (redirect-page #`"unit-edit/,unit-id"))
			 (begin
			   (set-error-message #f)
			   (if (not (string-null? name))
			       (set! (unit-name-of unit) name))
			   (set! (description-of unit) desc)
			   (set! (fans-of unit) (id-list->obj-list <fan> (kahua-context-ref* "fans")))
			   (set! (priorities-of unit) (id-list->obj-list <priority> (kahua-context-ref* "priority")))
			   (set! (statuss-of unit) (id-list->obj-list <status> (kahua-context-ref* "status")))
			   (set! (types-of unit) (id-list->obj-list <type> (kahua-context-ref* "type")))
			   (set! (categories-of unit) (id-list->obj-list <category> (kahua-context-ref* "category")))
			   (redirect-page "unit-list"))))))
      (table/
       (tr/ (@/ (onclick "toggle_fulllist(event)"))
	    (th/ (@/ (colspan 2)) (clickable ($$ "優先度")))
	    (th/ (@/ (colspan 2)) (clickable ($$ "ステータス")))
	    (th/ (@/ (colspan 2)) (clickable ($$ "タイプ")))
	    (th/ (@/ (colspan 2)) (clickable ($$ "カテゴリ"))))
       (tr/
	(map/ (lambda (n items)
		(node-set
		 (list
		  (td/
		   (select/ (@/ (id n) (name n) (size "5") (multiple "true"))
			    (map/ (lambda (item)
				    (option/ (@/ (value (code-of item))
						 (selected (has? unit item)))
					     (disp-name-of item)))
				  items)))
		  (td/ (div/ (@/ (class "clickable")
				 (onclick #`"up_select(this\, ',|n|')"))
			     "↑")
		       (div/ (@/ (class "clickable")
				 (onclick #`"down_select(this\, ',|n|')"))
			     "↓")))))
	      (list "priority" "status" "type" "category")
	      (list (append (priorities-of unit)
			    (lset-difference eq? (all-priorities)
					     (priorities-of unit)))
		    (append (statuss-of unit)
			    (lset-difference eq? (all-statuss)
					     (statuss-of unit)))
		    (append (types-of unit)
			    (lset-difference eq? (all-types)
					     (types-of unit)))
		    (append (categories-of unit)
			    (lset-difference eq? (all-categories)
					     (categories-of unit)))))))
      (table/
       (tr/ (td/ ($$ "ユニット名") (span/ (@/ (class "warning")) ($$ "(※)")))
	    (td/
	     (textarea/ (@/ (type "text") (name "name")
			    (rows 1) (cols 32))
			(unit-name-of unit))
	     (error:span/ (@/ (class "warning")) (set-error-message #f))))
       (tr/ (td/ ($$  "概要"))
	    (td/
	     (textarea/ (@/ (type "text") (name "desc")
			    (rows 10) (cols 80))
			(description-of unit))))
       (tr/ (@/ (align "left"))
	    (td/ ($$ "ファン") (span/ (@/ (class "warning")) ($$ "(※)")))
	    (td/
	     (table/
	      (tr/
	       (td/
		(select/ (@/ (id "fans") (name "fans") (size "5") (multiple "true"))
			 (map/ (lambda (f)
				 (let1 fan-name (fan-name-of f)
				   (option/ (@/ (value fan-name)
						(selected (fan-to? unit f)))
					    fan-name)))
			       (append (fans-of unit)
				       (lset-difference eq? (all-fans)
							(fans-of unit))))))
	       (td/ (div/ (@/ (class "clickable")
			      (onclick "up_select(this, 'fans')"))
			  ($$ "↑"))
		    (div/ (@/ (class "clickable")
			      (onclick "down_select(this, 'fans')"))
			  ($$ "↓")))))))
       )
      (input/ (@/ (type "submit") (name "submit") (value ($$ "確定")))))
     )))

; TODO: check account
;
(define-entry (unit-fallout unit-id)
  (let1 unit (find-kahua-instance <unit> unit-id)
    (define checker (lambda (u)
		      (if (memq (find-kahua-instance <fan> (ref u 'login-name))
                                (fans-of unit))
			  u #f)))
    (let1 user (or (and (kahua-current-user)
			(checker (kahua-current-user)))
		   (login-pc-page #f checker (format ($$ "『~a』のファンとしてのアカウントが必要です") (unit-name-of unit))))
      (permission-check-logic
       checker
       (format ($$ "『~a』のファンとしてのアカウントが必要です") (unit-name-of unit))
       (begin
	 (if (checker user)
	     (set! (fallout-of unit) #t))
	 (redirect-page "unit-list"))))))

(define-entry (musume-list unit-id :keyword priority status assign type category limit)
  (let* ((*default-limit* 200)
	 (*limits-list* '("" "20" "50" "200" "500" "1000"))
	 (*limit* (or limit (x->string *default-limit*)))
         (*status-dict* (make-hash-table 'string=?)))
    (let* ((p-filter (if (or (not priority)
			     (equal? "*all*" priority))
			 identity
			 (lambda (m) (equal? (code-of (priority-of m)) priority))))
	   (s-filter (if (or (not status)
			     (equal? "*all*" status))
			 identity
			 (lambda (m) (equal? (code-of (status-of m)) status))))
	   (a-filter (if (or (not assign)
			     (equal? "*all*" assign))
			 identity
			 (lambda (m) (equal? (fan-name-of (assign-of m)) assign))))
	   (t-filter (if (or (not type)
			     (equal? "*all*" type))
			 identity
			 (lambda (m) (equal? (code-of (type-of m)) type))))
           (c-filter (if (or (not type)
			     (equal? "*all*" category))
			 identity
			 (lambda (m) (equal? (code-of (category-of m)) category))))
	   (and-filter (lambda (m)
                         (let1 statusid (code-of (status-of m))
                           (hash-table-put!
                            *status-dict*
                            statusid
                            (+ (hash-table-get *status-dict* statusid 0) 1)))
                         (and (p-filter m)
                              (s-filter m)
                              (a-filter m)
                              (t-filter m)
                              (c-filter m))))
	   (limiter (if (string-null? *limit*)
			identity
			(lambda (ms)
			  (take* ms (x->integer *limit*))))))
      (let1 unit (find-kahua-instance <unit> unit-id)
	(permission-check-page
	 (lambda (u)
	   (if (viewable? unit u)
	       u #f))
	 (format ($$ "『~a』のファンとしてのアカウントが必要です") (unit-name-of unit))
	 (ul/ (@/ (class "menu"))
          (li/ (a/cont/ (@@/ (cont musume-list unit-id)) ($$ "娘。一覧")))
	  (common:li/ (a/cont/ (@@/ (cont musume-new unit-id)) ($$ "新しい娘。"))))
         (div/
          (@/ (id "search-box"))
          (form/cont/
           (@@/ (cont search `(unit-id ,unit-id)))
	   ($$ "ユニット内検索:")
           (input/ (@/ (onKeyUp "delay_search(this.value)")
                       (type "text") (name "word") (size 10)
                       (id "focus")))
           (input/ (@/ (type "submit") (value ($$ "検索"))))))
	 (h2/ (format ($$ "~a - 娘。一覧") (unit-name-of unit)))
	 (form/cont/ (@@/ (cont musume-list unit-id))
		     (table/
		      (@/ (class "table-filter"))
		      (tr/ (@/ (onclick "toggle_select_mode(event)"))
			   (has-item? unit priorities-of (th/ (clickable ($$ "優先度"))))
			   (has-item? unit statuss-of (th/ (clickable ($$ "ステータス"))))
			   (has-item? unit fans-of (th/ (clickable ($$ "アサイン"))))
			   (has-item? unit types-of (th/ (clickable ($$ "タイプ"))))
			   (has-item? unit categories-of (th/ (clickable ($$ "カテゴリ"))))
			   (th/ ($$ "表示上限")))
		      (let1 filter-row (cut format "filter_table(this, 'musume_list', '全て', ~a)" <>)
			(tr/ (@/ (valign "top"))
			     (has-item? unit priorities-of
					(td/
					 (select/
					  (@/ (onchange (filter-row 3))
					      (name "priority"))
					  (node-set
					   (cons (option/ (@/ (value "*all*")) ($$ "全て"))
						 (options (priorities-of unit) priority))))))
			     (has-item? unit statuss-of
					(td/
					 (select/
					  (@/ (onchange (filter-row 4))
					      (name "status"))
					  (node-set
					   (cons (option/ (@/ (value "*all*")) ($$ "全て"))
						 (options (statuss-of unit) status))))))
			     (has-item? unit fans-of
					(td/
					 (select/
					  (@/ (onchange (filter-row 5))
					      (name "assign"))
					  (node-set
					   (cons (option/ (@/ (value "*all*")) ($$ "全て"))
						 (options (fans-of unit) assign))))))
			     (has-item? unit types-of
					(td/
					 (select/
					  (@/ (onchange (filter-row 6))
					      (name "type"))
					  (node-set
					   (cons (option/ (@/ (value "*all*")) ($$ "全て"))
						 (options (types-of unit) type))))))
			     (has-item? unit categories-of
					(td/
					 (select/
					  (@/ (onchange (filter-row 7))
					      (name "category"))
					  (node-set
					   (cons (option/ (@/ (value "*all*")) ($$ "全て"))
						 (options (categories-of unit) category))))))
			     (td/
			      (select/
			       (@/ (name "limit"))
			       (map/ (lambda (l)
				       (if (equal? *limit* l)
					   (option/ (@/ (value l) (selected "true")) l)
					   (option/ (@/ (value l)) l)))
				     *limits-list*)))
			     (td/ (input/ (@/ (type "submit") (name "submit") (value ($$ "絞り込み")))))
			     )))
		     ;; data table
		     (let1 musumes (limiter (sort (filter and-filter
							  (all-active-musumes unit))
						  (lambda (m1 m2)
						    (> (mno-of m1) (mno-of m2)))))
		       (table/ (@/ (class "listing") (id "musume_list"))
			       (thead/ (cond ((= 0 (length musumes)) ($$ "萌えられる娘。がいません(T^T)"))
					     ((= 1 (length musumes)) ($$ "ただひとりの娘。に萌えました"))
					     ((> 100 (length musumes)) (format ($$ "~a人の娘。に萌えました") (length musumes)))
					     ((> 500 (length musumes)) (format ($$  "~a人もの娘。に萌えました(萌えすぎです)") (length musumes)))
					     (else (format ($$  "なんと~a人もの娘。に萌えまつきました orz") (length musumes))))
				       (div/ (@/ (id "status-num"))
					     (map/ (lambda (s)
						     (let1 statusid (code-of s)
						       (span/ (a/cont/ (@@/ (cont musume-list unit-id  `(status ,statusid)))
								       (disp-name-of s))
							      (format "(~a) " (hash-table-get *status-dict* statusid 0)))))
						   (statuss-of unit)))
				       (tr/ (@/ (onclick "sort_table(event);return false"))
					    (devel:th/)
					    (th/ ($$ "No."))
					    (th/ ($$ "タイトル"))
					    (has-item? unit priorities-of (th/ ($$ "優先度")))
					    (has-item? unit statuss-of (th/ ($$ "ステータス")))
					    (has-item? unit fans-of (th/ ($$ "アサイン")))
					    (has-item? unit types-of (th/ ($$ "タイプ")))
					    (has-item? unit categories-of (th/ ($$ "カテゴリ")))
					    (th/ ($$ "登録日"))
					    (th/ ($$ "更新日"))))
			       (tbody/
				(map/ (lambda (m)
					(let ((status (status-of m))
					      (songs (songs-of m)))
					  (tr/ (@/ (class #`"status-,(code-of status)"))
					       (devel:td/ (a/cont/
							   (@/ (onClick (format "return confirm('~a')?true:false"
										($$ "本当に削除しますか？"))))
							   (@@/ (cont remove-musume (key-of m)))
							   ($$ "削除")))
					       (let1 val (format "~3,'0d" (mno-of m))
						 (td/ (@/ (value val))
						      (a/cont/
                                                       (@@/ (cont musume-edit (key-of m)))
						       (x->string val))))
					       (let1 val (mname-of m)
						 (td/ (@/ (value val))
						      (a/cont/
                                                       (@/ (onClick "apply_flter_state(this)"))
						       (@@/ (cont melody-list (key-of (unit-of m)) (key-of m)))
						       val)
						      (format " (~a)" (length songs))))

					       (let1 val (priority-of m)
						 (has-item? unit priorities-of
							    (td/ (@/ (value (level-of val)))
								 (disp-name-of
								  val))))
					       (let1 val (code-of status)
						 (has-item? unit statuss-of
							    (td/ (@/ (value val))
								 (disp-name-of
								  status))))
					       (let1 val (fan-name-of (assign-of m))
						 (has-item? unit fans-of
							    (td/ (@/ (value val))
								 val)))
					       (let1 val (type-of m)
						 (has-item? unit types-of
							    (td/ (@/ (value (code-of val)))
								 (disp-name-of
								  val))))
					       (let1 val (category-of m)
						 (has-item? unit categories-of
							    (td/ (@/ (value (code-of val)))
								 (disp-name-of
								  val))))
					       (let1 val (ctime-of m)
						 (td/ (@/ (value val))
						      (sys-strftime "%Y/%m/%d %H:%M"
								    (sys-localtime val))))
					       (let1 val (ctime-of (car songs))
						 (td/ (@/ (value val))
						      (sys-strftime "%Y/%m/%d %H:%M"
								    (sys-localtime val)))))))
				      musumes)))
		       )))))))

(define-entry (musume-new unit-id)
  (let1 unit (find-kahua-instance <unit> unit-id)
    (permission-check-page
     (lambda (u)
       (if (viewable? unit u)
	   u #f))
     (format ($$ "『~a』のファンとしてのアカウントが必要です") (unit-name-of unit))
     (ul/ (@/ (class "menu"))
          (li/ (a/cont/ (@@/ (cont musume-list unit-id)) ($$ "娘。一覧")))
	  (common:li/ (a/cont/ (@@/ (cont musume-new unit-id)) ($$ "新しい娘。"))))
     (h2/ (unit-name-of unit) ($$ " - 新しい娘。"))
     (form/cont/
      (@/ (enctype "multipart/form-data")
          (onsubmit "this.filename.value = this.file.value;return submitForm(this)"))
      (@@/ (cont (entry-lambda (:keyword name priority status assign type category melody file filename)
		     (if (string-null? name)
			 (begin
			   (set-error-message ($$ "タイトルを入力してください。"))
			   (redirect-page #`"musume-new/,unit-id"))
			 (begin
			   (if (string-null? melody) (set! melody name))
			   (set! melody (string-join (string-split melody "\r\n") "\n"))
			   (let1 musume (create-new-musume unit name priority status assign type category)
			     (let1 song (create-new-song musume melody (id->obj <fan> (kahua-current-user-name)))
			       ;; save file and make file object.
			       (if file
				   (let* ((tmp-path (car file))
					  (file-name (sys-basename (if (not (string-null? filename))
                                                                       filename
                                                                     (cadr file))))
					  (file-xtnsn (let1 body+ext (string-split file-name ".")
							(if (= (length body+ext) 1)
							    "" (last body+ext))))
					  (real-name (if (equal? file-xtnsn "")
							 #`",(ref unit 'id)_,(ref musume 'id)_,(ref song 'id)"
							 #`",(ref unit 'id)_,(ref musume 'id)_,(ref song 'id).,file-xtnsn"))
					  (file-path #`",|*kagoiri-musume-upload-path*|/,|real-name|")
					  (file-uri #`",|*kagoiri-musume-upload-uri*|/,|real-name|"))
				     (make-directory* *kagoiri-musume-upload-path* #o775)
				     (copy-file tmp-path file-path)
				     ;; now, just one file upload support, but...
				     (set! (files-of song)
					   (list (create-new-file file-name file-xtnsn file-path file-uri)))))
			       (sendmail-lite unit musume song)
			       (redirect-page #`"melody-list/,|unit-id|/,(key-of musume)"))))))))
      (table/
       (tr/
	(has-item? unit priorities-of (th/ ($$ "優先度")))
	(has-item? unit statuss-of (th/ ($$ "ステータス")))
	(has-item? unit types-of (th/ ($$ "タイプ")))
	(has-item? unit categories-of (th/ ($$ "カテゴリ")))
	(th/ ($$ "アサイン")))
       (tr/
	(map/ (lambda (n refer)
		(has-item? unit refer
			   (td/ (select/ (@/ (name n))
					 (map/ (lambda (item)
						 (option/ (@/ (value (code-of item)))
							  (disp-name-of item)))
					       (refer unit))))))
	      (list "priority" "status" "type" "category" "assign")
	      (list priorities-of statuss-of types-of categories-of fans-of))
	(td/ (input/ (@/ (type "submit") (value ($$ "新しい娘。加入")))))))
      (table/ (tr/ (td/ ($$ "タイトル") (span/ (@/ (class "warning")) ($$ "(※)")))
		   (td/ (input/ (@/ (type "text") (name "name")
                                    (id "focus") (size 80)))
			(error:span/ (@/ (class "warning")) (set-error-message #f))))
	      (tr/ (td/ ($$ "内容"))
		   (td/ (textarea/ (@/ (type "text") (name "melody")
				       (rows 20) (cols 80)))))
	      (tr/ (td/ ($$ "ファイル"))
		   (td/ (input/ (@/ (type "file") (name "file")))
                        (input/ (@/ (type "hidden") (name "filename") (value ""))))))
      (input/ (@/ (type "submit") (value ($$ "新しい娘。加入")))))
     )))

(define-entry (musume-view)
  (permission-check-page
   identity ($$ "ちょいまってや")
   ($$ "娘。の閲覧")))

(define-entry (remove-musume musume-id)
  (let* ((musume (find-kahua-instance <musume> musume-id))
	 (unit (unit-of musume)))
    (define checker (lambda (u)
		      (if (memq (find-kahua-instance <fan> (ref u 'login-name))
                                (fans-of unit))
			  u #f)))
    (let1 user (or (and (kahua-current-user)
			(checker (kahua-current-user)))
		   (login-pc-page #f checker (format ($$ "『~a』のファンとしてのアカウントが必要です") (unit-name-of unit))))
      (permission-check-logic
       checker
       (format ($$ "『~a』のファンとしてのアカウントが必要です") (unit-name-of unit))
       (begin
	 (if (checker user)
	     (set! (delete-of musume) #t))
	 (redirect-page #`"musume-list/,(key-of unit)"))))))


(define-entry (musume-edit musume-id)
  (let* ((musume (find-kahua-instance <musume> musume-id))
	 (unit (unit-of musume)))
    (permission-check-page
     identity
     (format ($$ "『~a』のファンとしてのアカウントが必要です") (unit-name-of unit))
     (h3/ (format ($$ "『~a』の『~a 』を編集する。") (unit-name-of unit) (mname-of musume)))
     ($$ "工事中")
     )
    ))

(define-entry (delete-revival-song song-id)
  (let* ((song (id->obj <song> song-id))
	 (musume (musume-of song))
	 (unit (unit-of musume)))
    (define checker (lambda (u)
		      (if (memq (id->obj <fan> (ref u 'login-name))
                                (fans-of unit))
			  u #f)))
    (let1 user (or (and (kahua-current-user)
			(checker (kahua-current-user)))
		   (login-pc-page #f checker (format ($$ "『~a』のファンとしてのアカウントが必要です") (unit-name-of unit))))
      (permission-check-logic
       checker
       (format ($$ "『~a』のファンとしてのアカウントが必要です") (unit-name-of unit))
       (begin
	 (if (checker user)
	     (set! (delete-of song) (not (delete-of song))))
	 (redirect-page #`"melody-list/,(key-of unit)/,(key-of musume)#,song-id"))))))

(define (melody-format melody)
  (define (parse melody)
    (let lp ((result '())
	     (mel melody))
      (cond ((string-null? mel) (node-set result))
	    ((#/(mailto:)?[\s]*([\d\w\-\.]+@[\d\w\-\.]+)/ mel)
	     => (lambda (m)
		  (lp (append result
			      (list (m 'before) (a/ (@/ (href #`"mailto:,(m 2)")) (m))))
		      (m 'after))))
	    ((#/(http|https|ftp):[\d\w\/?&#%:.\-+=~]+/ mel)
	     => (lambda (m)
		  (lp (append result 
			      (list (m 'before) (a/ (@/ (href (m))) (m))))
		      (m 'after))))
	    (else (node-set (append result (list mel)))))))
  (parse melody))

(define-entry (melody-list unit-id musume-id)
  (let ((unit (find-kahua-instance <unit> unit-id))
        (musume (find-kahua-instance <musume> musume-id)))

    (define (move dist)
      (let* ((musumes (sort (all-active-musumes unit)))
             (pos (find-index (cut eq? musume <>) musumes))
             (musume (list-ref  musumes (+ pos dist) musume))
             (priority (kahua-context-ref* "priority"))
             (status (kahua-context-ref* "status"))
             (assign (kahua-context-ref* "assign"))
             (type (kahua-context-ref* "type"))
             (category (kahua-context-ref* "category"))
             (p-filter (if (or (null? priority)
                               (equal? "*all*" priority))
                           identity
			 (lambda (m) (member (code-of (priority-of m)) priority))))
             (s-filter (if (or (null? status)
                               (equal? "*all*" status))
                           identity
			 (lambda (m) (member (code-of (status-of m)) status))))
             (a-filter (if (or (null? assign)
                               (equal? "*all*" assign))
                           identity
			 (lambda (m) (member (fan-name-of (assign-of m)) assign))))
             (t-filter (if (or (null? type)
                               (equal? "*all*" type))
                           identity
			 (lambda (m) (member (code-of (type-of m)) type))))
             (c-filter (if (or (null? type)
                               (equal? "*all*" category))
                           identity
			 (lambda (m) (member (code-of (category-of m)) category))))
             (and-filter (lambda (m)
                           (and (p-filter m)
                                (s-filter m)
                                (a-filter m)
                                (t-filter m)
                                (c-filter m))))
             (musume (and-filter musume))
             (param (kahua-context-ref "search")))
        (redirect-page #`"melody-list/,|unit-id|/,(key-of musume)?,|param|")))

    (permission-check-page
     (lambda (u)
       (if (viewable? unit u)
	   u #f))
     (format ($$ "『~a』のファンとしてのアカウントが必要です") (unit-name-of unit))
     (ul/ (@/ (class "menu"))
          (li/ (a/cont/ (@@/ (cont musume-list unit-id)) ($$ "娘。一覧")))
	  (common:li/ (a/cont/ (@@/ (cont musume-new unit-id)) ($$ "新しい娘。"))))
     (div/
      (a/cont/ (@/ (class "clickable")
                   (onclick "copy_search(this)"))
               (@@/ (cont (cut move -1)))
               "<<" )
      (a/cont/ (@/ (class "clickable")
                   (onclick "copy_search(this)"))
               (@@/ (cont (cut move +1)))
               ">>"))

     (h3/ (format "~a - ~a：~a - ~a"
		  (unit-name-of unit)
		  (mno-of musume)
		  (mname-of musume)
		  (disp-name-of
		   (status-of musume))))
     (common:form/cont/
      (@/ (enctype "multipart/form-data")
          (onsubmit "this.filename.value = this.file.value;return submitForm(this)"))
      (@@/ (cont (entry-lambda (:keyword melody priority status type category assign file filename)
		     (if (and (string-null? melody)
			      (not file))
			 (begin
			   (set! (priority-of musume) (id->obj <priority> priority))
			   (set! (status-of musume) (id->obj <status> status))
			   (set! (type-of musume) (id->obj <type> type))
			   (set! (category-of musume) (id->obj <category> category))
			   (set! (assign-of musume) (id->obj <fan> assign)))
			 (begin
			   (set! melody (string-join (string-split melody "\r\n") "\n"))
			   (let1 song (create-new-song musume melody (current-fan))
			     (set! (priority-of musume) (id->obj <priority> priority))
			     (set! (status-of musume) (id->obj <status> status))
			     (set! (type-of musume) (id->obj <type> type))
			     (set! (category-of musume) (id->obj <category> category))
			     (set! (assign-of musume) (id->obj <fan> assign))
			     ;; save file and make file object.
			     (if file
				 (let* ((tmp-path (car file))
					(file-name (sys-basename (if (not (string-null? filename))
                                                                     filename
                                                                   (cadr file))))
					(file-xtnsn (let1 body+ext (string-split file-name ".")
						      (if (= (length body+ext) 1)
							  "" (last body+ext))))
					(real-name (if (equal? file-xtnsn "")
						       #`",(ref unit 'id)_,(ref musume 'id)_,(ref song 'id)"
						       #`",(ref unit 'id)_,(ref musume 'id)_,(ref song 'id).,file-xtnsn"))
					(file-path #`",|*kagoiri-musume-upload-path*|/,|real-name|")
					(file-uri #`",|*kagoiri-musume-upload-uri*|/,|real-name|"))
				   (make-directory* *kagoiri-musume-upload-path* #o775)
				   (copy-file tmp-path file-path)
				   ;; now, just one file upload support, but...
				   (set! (files-of song)
					 (list (create-new-file file-name file-xtnsn file-path file-uri)
					       ))))
			     (if (not (string-null? melody))
				 (sendmail-lite unit musume song)))))
		   (redirect-page #`"melody-list/,|unit-id|/,|musume-id|"))))
      (table/
       (tr/
	(has-item? unit priorities-of (th/ ($$ "優先度")))
	(has-item? unit statuss-of (th/ ($$ "ステータス")))
	(has-item? unit types-of (th/ ($$ "タイプ")))
	(has-item? unit categories-of (th/ ($$ "カテゴリ")))
	(has-item? unit fans-of (th/ ($$ "アサイン"))))
       (tr/ (map/ (lambda (n refer items-of)
		    (has-item? unit items-of
			       (td/ (select/ (@/ (name n))
					     (map/ (lambda (item)
						     (if (eq? item (refer musume))
							 (option/ (@/ (value (code-of item))
								      (selected "true"))
								  (disp-name-of item))
							 (option/ (@/ (value (code-of item)))
								  (disp-name-of item))))
						   (items-of unit))))))
		  (list "priority" "status" "type" "category" "assign")
		  (list priority-of status-of type-of category-of assign-of)
		  (list priorities-of statuss-of types-of categories-of fans-of))
	    (td/ (input/ (@/ (type "submit") (value ($$ "コミット")))))
	    ))
      (table/ (@/ (class "extension"))
               (tr/
                (td/ "内容")
                (td/ (textarea/ (@/ (type "text") (name "melody")
                                    (rows 10) (cols 80) (id "focus"))))
                (tr/
                 (td/ ($$ "ファイル"))
                 (td/ (input/ (@/ (type "file") (name "file")))
                      (input/ (@/ (type "hidden") (name "filename") (value ""))))))))
     (let1 songs (all-songs musume)
       (map/ (lambda (k n f t m u)
	       (let1 song (id->obj <song> k)
		 (if (delete-of song)
		     (dl/ (@/ (id #`",k"))
			  (dt/ (span/ (@/ (class "song-no")) #`"#,|n|.")
			       (span/ (@/ (class "song-time")) #`" ,(sys-strftime \"%Y/%m/%d %H:%M:%S\" (sys-localtime t))")
			       (span/ (@/ (class "song-fan")) #`"[,(fan-name-of f)]")
			       (composer? song
					  (a/cont/ (@/ (onClick (format "return confirm('~a')?true:false"
									($$ "本当に復活しますか？"))))
						   (@@/ (cont delete-revival-song k)) ($$ "復活"))))
			  (dd/ (pre/ (@/ (class "warning")) ($$ "このメロディは削除されてます"))))
		     (dl/ (@/ (id #`",k"))
			  (dt/ (span/ (@/ (class "song-no")) #`"#,|n|.")
			       (span/ (@/ (class "song-time")) #`" ,(sys-strftime \"%Y/%m/%d %H:%M:%S\" (sys-localtime t))")
			       (span/ (@/ (class "song-fan")) #`"[,(fan-name-of f)]")
			       (composer? song
					  (a/cont/ (@/ (onClick (format "return confirm('~a')?true:false"
									($$ "本当に削除しますか？"))))
						   (@@/ (cont delete-revival-song k)) ($$ "削除"))))
			  (if (null? u)
			      (dd/ (pre/ (melody-format m)))
			      (let1 upfile (car u)
				(dd/ (pre/ m
					   (br/)
					   (a/ (@/ (href (uri-of upfile))) (name-of upfile))) "")))))))
	     (map key-of songs)
	     (map (lambda (m) (seq-no-of m)) songs)
	     (map (lambda (m) (fan-of m)) songs)
	     (map (lambda (m) (ctime-of m)) songs)
	     (map melody-of songs)
	     (map files-of songs))
     ))))

(define-entry (mypage type)

  (define (todo)
    (fieldset/
     (legend/ ($$ "TODO"))
     (let1 musumes (let1 fan (current-fan)
                     (filter
                      (lambda (musume)
                        (eq? (assign-of musume) fan))
                      (make-kahua-collection <musume>)))
       (format "~a item(s)" (length musumes))
       (table/ (@/ (class "listing"))
               (thead/ (tr/ (th/ ($$ "タイトル"))
                            (th/ ($$ "優先度"))
                            (th/ ($$ "ステータス"))
                            (th/ ($$ "タイプ"))
                            (th/ ($$ "登録日"))))
               (tbody/
                (map/ (lambda (m)
                        (let1 status (status-of m)
                          (tr/ (@/ (class #`"status-,(code-of status)"))
                               (td/ (label-of m))
                               (td/ (disp-name-of (priority-of m)))
                               (td/ (disp-name-of status))
                               (td/ (disp-name-of (type-of m)))
                               (td/ (sys-strftime "%Y/%m/%d"
                                                  (sys-localtime (ctime-of m)))))))
                      musumes))))))

  (define (recent)
    (fieldset/
     (legend/ ($$ "最近の更新"))
     (let* ((units (filter (cut fan-to? <> (current-fan))
                           (all-units)))
            (musumes (append-map all-active-musumes units))
            (songs (append-map songs-of  musumes))
            (songs (reverse (sort songs)))
            (songs (take* songs 20)))
       (format "~a item(s)" (length songs))
       (map/ (lambda (s)
               (let1 m (musume-of s)
                 (div/
                  (fieldset/
                   (legend/ (label-of m))
                   (dt/ #`"#,(seq-no-of s). ,(sys-strftime \"%Y/%m/%d %H:%M:%S\" (sys-localtime (ctime-of s)))[,(fan-name-of (fan-of s)))]")
                   (pre/ (melody-format (melody-of s)))))))
             songs))))


  (permission-check-page
   identity
   ($$ "マイページは一般ユーザアカウントが必要です")
   (let1 type (and type (string->symbol type))
     (div/ (ul/ (@/ (class "menu"))
                (li/ (a/cont/ (@@/ (cont mypage 'todo)) ($$ "TODO")))
                (li/ (a/cont/ (@@/ (cont mypage 'recent)) ($$ "最近の更新"))))
           (case type
             ((todo)
              (todo))
             ((recent)
              (recent))
             (else
              (todo)))))))


(define (change-passwd . message)
  (let* ((cuser (kahua-current-user))
	 (cuser-name (ref cuser 'login-name)))
    (permission-check-page
     identity
     ($$ "パスワード変更には一般ユーザのアカウントが必要です")
     (h3/ (format ($$ "~a さんのパスワード変更") cuser-name))
     (form/cont/
      (@@/ (cont (entry-lambda (:keyword old-pw new-pw new-again-pw)
		   (cond ((or (equal? "" new-pw)
			      (equal? "" new-again-pw)
			      (not (equal? new-pw new-again-pw)))
			  (change-passwd ($$ "新パスワードが不正です")))
			 ((not (kahua-check-user cuser-name old-pw))
			  (change-passwd ($$ "旧パスワードが不正です")))
			 (else
			  (kahua-user-password-change-force cuser new-pw)
			  (message-only-page (format ($$ "~a さんのパスワードを変更しました") cuser-name)))))))
      (table/
       (tr/ (th/ ($$ "旧パスワード"))
	    (td/ (input/ (@/ (type "password") (name "old-pw") (id "focus")
			     (value "")) "")))
       (tr/ (th/ ($$ "新パスワード"))
	    (td/ (input/ (@/ (type "password") (name "new-pw")
			     (value "")) "")))
       (tr/ (th/ ($$ "新パスワード(確認)"))
	    (td/ (input/ (@/ (type "password") (name "new-again-pw")
			     (value "")) ""))))
      (input/ (@/ (type "submit") (name "submit") (value ($$ "変更"))))
      (p/ (@/ (class "warning")) (node-set message))
      ))))

(define (message-only-page . message)
  message
  (kagoiri-page
   (div/ (@/ (class "msgbox"))
	 (h3/ (node-set message)))))

(define (clickable text)
  (span/ (@/ (class "clickable"))
         text))

;
; initialization
;

(initialize-main-proc kagoiri)
