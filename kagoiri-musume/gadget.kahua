;; -*- coding: euc-jp; mode: scheme -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: gadget.kahua,v 1.25 2005/11/19 14:49:26 cut-sea Exp $
;;

(define $property-list$
  (list "priority" "status" "type" "category" "assign"))

(define $full-property-list$
  (list "fans" "priority" "status" "type" "category" "assign"))

(define $property-accessor-list$
  (list priority-of status-of type-of category-of assign-of))

(define $properties-accessor-list$
  (list priorities-of statuss-of types-of categories-of fans-of))

(define $all-properties-list$
  (list all-priorities all-statuss all-types all-categories all-fans))

(define $property-headers$
  (map $$ '("Í¥ÀèÅÙ" "¥¹¥Æ¡¼¥¿¥¹" "¥¿¥¤¥×" "¥«¥Æ¥´¥ê" "¥¢¥µ¥¤¥ó")))

(define (encode-subject subject)
  (string-append
   "=?ISO-2022-JP?B?"
   (string-join
    (string-split
     (base64-encode-string
      (ces-convert subject "*JP" "iso2022jp")) #\newline) "")
   "?="))

(define (sendmail-lite unit musume song)
  (and-let* ((fans (filter (lambda (fan)
			     (not (equal? "   " (fan-name-of fan))))
			   (fans-of unit))))
    (let* ((raw-subject #`"[,(unit-name-of unit)] ,(mno-of musume):,(mname-of musume)")
	   (subject  (encode-subject raw-subject))
	   (body  (string-join
		   (list
		    #`"¡Ú ¥¿¥¤¥È¥ë ¡Û,raw-subject"
		    #`"¡Ú  ¥Ý¥¹¥È  ¡Û ,(fan-name-of (fan-of song))"
		    #`"¡Ú   Æü»þ   ¡Û ,(sys-strftime \"%Y/%m/%d %H:%M:%S\" (sys-localtime (ctime-of song)))"
		    #`"¡Ú¥¹¥Æ¡¼¥¿¥¹¡Û ,(disp-name-of (status-of musume))"
		    #`"¡Ú  Í¥ÀèÅÙ  ¡Û ,(disp-name-of (priority-of musume))"
		    #`"¡Ú  ¥¿¥¤¥×  ¡Û ,(disp-name-of (type-of musume))"
		    #`"¡Ú ¥«¥Æ¥´¥ê ¡Û ,(disp-name-of (category-of musume))"
		    #`"¡Ú ¥¢¥µ¥¤¥ó ¡Û ,(fan-name-of (assign-of musume))"
		    #`"¡Ú ¥³¥á¥ó¥È ¡Û\n\n,(melody-of song)"
		    ""
		    #`"URL: ,(kahua-self-uri-full)melody-list/,(key-of unit)/,(key-of musume)")
		   "\n")))
      (for-each (lambda (fan)
		  (sendmail (email-address-of fan)
			    *kagoiri-musume-email*
			    subject
			    body))
		fans))))

(define (create-new-unit name desc)
  (and (not (string-null? name))
       (not (null? (kahua-context-ref* "fans")))
       (or (id->obj <unit> name)
	   (make <unit>
	     :unit-name name
	     :description desc
	     :fans (id-list->obj-list <fan> (kahua-context-ref* "fans"))
	     :priorities (id-list->obj-list <priority> (kahua-context-ref* "priority"))
	     :statuss (id-list->obj-list <status> (kahua-context-ref* "status"))
	     :types (id-list->obj-list <type> (kahua-context-ref* "type"))
	     :categories (id-list->obj-list <category> (kahua-context-ref* "category"))
	     ))))

(define (create-new-musume unit name priority status assign type category)
  (make <musume> :unit unit
	:musume-name name
	:priority (id->obj <priority> priority)
	:status (id->obj <status> status)
	:assign (id->obj <fan> assign)
	:type (id->obj <type> type)
	:category (id->obj <category> category)))

(define (create-new-song musume melody fan)
  (make <song> :musume musume
	:melody melody
	:fan fan))

(define (create-new-file name ext path uri)
  (make <file> :file-name name
	:extension ext
	:path path
	:uri uri))

(define (musume-makeover! musume p s t c a)
  (set! (priority-of musume) (id->obj <priority> p))
  (set! (status-of musume) (id->obj <status> s))
  (set! (type-of musume) (id->obj <type> t))
  (set! (category-of musume) (id->obj <category> c))
  (set! (assign-of musume) (id->obj <fan> a))
  musume)

(define (unit-makeover! unit n d fs ps ss ts cs)
  (if (not (string-null? n))
      (set! (unit-name-of unit) n))
  (set! (description-of unit) d)
  (set! (fans-of unit) (id-list->obj-list <fan> fs))
  (set! (priorities-of unit) (id-list->obj-list <priority> ps))
  (set! (statuss-of unit) (id-list->obj-list <status> ss))
  (set! (types-of unit) (id-list->obj-list <type> ts))
  (set! (categories-of unit) (id-list->obj-list <category> cs))
  unit)

(define (uploaded-file-name unit musume song)
  #`",(ref unit 'id)_,(ref musume 'id)_,(ref song 'id)")

(define (attach-file song file original-name upload-name)
  (if file
      (let* ((tmp-path (car file))
	     (file-name (sys-basename (if (not (string-null? original-name))
					  original-name
					  (cadr file))))
	     (file-xtnsn (let1 body+ext (string-split file-name ".")
			   (if (= (length body+ext) 1)
			       "" (last body+ext))))
	     (real-name (if (equal? file-xtnsn "")
			    #`",upload-name"
			    #`",|upload-name|.,file-xtnsn"))
	     (file-path #`",|*kagoiri-musume-upload-path*|/,real-name")
	     (file-uri #`",|*kagoiri-musume-upload-uri*|/,real-name"))
	(make-directory* *kagoiri-musume-upload-path* #o775)
	(copy-file tmp-path file-path)
	;; now, just one file upload support, but...
	(set! (files-of song)
	      (list (create-new-file file-name file-xtnsn file-path file-uri))))))


;; for error message
;;
(define %error% (make-parameter #f))
(define (error?) (%error%))
;; (define (get-error-message) (or (%error%) ""))
(define (set-error-message msg) (%error% msg))


(define (focus_focus)
  (script/ (@/ (type "text/javascript"))
           "addOnloadEvent(focus_focus)"))

