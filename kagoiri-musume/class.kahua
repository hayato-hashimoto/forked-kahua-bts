;; -*- coding: euc-jp; mode: kahua -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: class.kahua,v 1.75 2006/03/18 11:30:02 shibata Exp $
;;
(load "kagoiri-musume/unit.kahua")

(define-method normalize-addresses ((addresses <string>))
  (normalize-addresses
   (string-split addresses "\r\n")))

(define-method normalize-addresses ((addresses <list>))
  (filter (lambda (email) (not (string-null? email))) addresses))

(define-method normalize-addresses ((addresses <boolean>))
  '())

(load "kagoiri-musume/musume.kahua")
(load "kagoiri-musume/song.kahua")
(load "kagoiri-musume/file.kahua")
(load "kagoiri-musume/email.kahua")
(load "kagoiri-musume/fan.kahua")
(load "kagoiri-musume/group.kahua")


;; hacks for #f
;;
(define-method code-of ((obj <boolean>)) "")
(define-method disp-name-of ((obj <boolean>)) "")
(define-method delete-of ((obj <boolean>)) #t)
(define-method level-of ((obj <boolean>)) 0)

;; convenient method
;;
(define (admin?)
  (kahua-user-has-role? (kahua-current-user) '(admin)))
(define (common?)
  (and (kahua-user-has-role? (kahua-current-user) '(client developer admin))))
(define (developer?)
  (kahua-user-has-role? (kahua-current-user) '(developer)))
(define (client?)
  (kahua-user-has-role? (kahua-current-user) '(client)))

;; property base
(define-class <property-base> (<kahua-persistent-base>)
  ((code             :allocation :persistent :init-keyword :code
		     :init-value #f :accessor code-of)
   (disp-name        :allocation :persistent :init-keyword :disp-name
		     :accessor disp-name-of)
   (delete           :allocation :persistent :init-keyword :delete
		     :init-value #f :accessor delete-of)
   ))

(define-method key-of ((self <property-base>))
  (code-of self))

(define-method enable? ((obj <property-base>))
  (not (delete-of obj)))

;; priority property
;;
(define-class <priority> (<property-base>)
  ((level            :allocation :persistent :init-keyword :level
		     :init-value 0 :accessor level-of)
   ))

(define (all-priorities)
  (filter enable? (make-kahua-collection <priority>)))

(define-method has? ((unit <unit>) (priority <priority>))
  (if (memq priority (priorities-of unit)) #t #f))

;; status property
;;
(define-class <status> (<property-base>)
  ())

(define (all-statuss)
  (filter enable? (make-kahua-collection <status>)))

(define-method has? ((unit <unit>) (status <status>))
  (if (memq status (statuss-of unit)) #t #f))

;; type property
;;
(define-class <type> (<property-base>)
  ())

(define (all-types)
  (filter enable? (make-kahua-collection <type>)))

(define-method has? ((unit <unit>) (type <type>))
  (if (memq type (types-of unit)) #t #f))

;; categories property
;;
(define-class <category> (<property-base>)
  ())

(define (all-categories)
  (filter enable? (make-kahua-collection <category>)))

(define-method has? ((unit <unit>) (category <category>))
  (if (memq category (categories-of unit)) #t #f))

;; daily-task
;;
;; tasks slot value is constructed by list of <task> objects.
(define-class <daily-task> (<kahua-persistent-base>)
  ((off              :allocation :persistent :init-keyword :off
		     :init-value #f :accessor off-of)
   (tasks            :allocation :persistent :init-keyword :tasks
		     :init-value '() :accessor tasks-of)))
;; task
;;
(define-class <task> (<kahua-persistent-base>)
  ((stime            :allocation :persistent :init-keyword :stime
		     :init-value #f :accessor stime-of)
   (etime            :allocation :persistent :init-keyword :etime
		     :init-value #f :accessor etime-of)
   (content          :allocation :persistent :init-keyword :content
		     :init-value "" :accessor content-of)))

;; errorlog class
;;
(define-class <errorlog> (<kahua-persistent-base>)
  ((ctime            :allocation :persistent :init-keyword :ctime
		     :init-thunk sys-time :accessor ctime-of)
   (category         :allocation :persistent :init-keyword :category
		     :init-value "" :accessor category-of)
   (level            :allocation :persistent :init-keyword :level
		     :init-value 0 :accessor level-of)
   (fan              :allocation :persistent :init-keyword :fan
		     :init-value #f :accessor fan-of)
   (context          :allocation :persistent :init-keyword :context
		     :init-value () :accessor context-of)
   (message          :allocation :persistent :init-keyword :message
		     :init-value "" :accessor message-of)
   ))

; cat: Category TYPE:<symbol>
;      Error
;      Trace
;      Warning
;      Logging
; lev: Level    TYPE:<integer>
;      1: ¶ÛµÞÅÙÂç
;      2: ½ÅÍ×
;      3: ÉáÄÌ
;      4: ·ÚÈù
;      5: ¤Û¤ÜÌµ»ë
;
(define (error-log-write cat lev msg)
  (and (>= *kagoiri-error-level* lev)
       (let ((usr (guard (e (#t #f))
			 (ref (kahua-current-user) 'login-name)))
	     (ctx (guard (e (#t '()))
			 (filter kahua-serializable-object?
				 (kahua-current-context)))))
	 (with-db (db *kagoiri-musume-log-database-name*)
	     (make <errorlog>
	       :category cat
	       :level lev
	       :message msg
	       :context ctx
	       :fan usr)))))


;;
;;
(define (id-list->obj-list class ids)
  (filter-map (lambda (id)
                (and id (find-kahua-instance class id)))
              ids))

(define (id->obj class id)
  (and id (find-kahua-instance class id)))

