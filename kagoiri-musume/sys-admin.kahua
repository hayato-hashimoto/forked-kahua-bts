;; -*- coding: euc-jp; mode: scheme -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: sys-admin.kahua,v 1.8 2005/11/02 19:23:25 cut-sea Exp $
;;

;; system admin's page
(define-entry (admin-system)
  (permission-check-page
   ;; checker: admin role?
   (lambda (u)
     (if (kahua-user-has-role? u '(admin))
	 u #f))
   %neet-account-for-system-admin-page%
   (h2/ %system-admin-title%)

   (hr/)

   (form/cont/
    (@@/ (cont (entry-lambda (:keyword login-name passwd mail-address admin devel client delete)
		   (if (not (string-null? login-name))
		       (if (not (kahua-find-user login-name))
			   ;; new creation
			   (let1 roles '(user)
			     (if (equal? "on" admin)
				 (set! roles (cons 'admin roles)))
			     (if (equal? "on" devel)
				 (set! roles (cons 'developer roles)))
			     (if (equal? "on" client)
				 (set! roles (cons 'client roles)))
			     (apply add-fan login-name passwd mail-address roles))
			   ;; modify user
			   (let* ((fan  (find-kahua-instance <fan> login-name))
				  (user (login-user-of fan)))
			     (if (not (string-null? passwd))
				 (kahua-user-password-change-force user passwd))
			     (if (not (string-null? mail-address))
				 (let1 email (make <email> :address mail-address)
				   (set! (email-of fan) email)))
			     (let1 roles '(user)
			       (if (equal? "on" admin)
				   (set! roles (cons 'admin roles)))
			       (if (equal? "on" devel)
				   (set! roles (cons 'developer roles)))
			       (if (equal? "on" client)
				   (set! roles (cons 'client roles)))
			       (set! (ref user 'role-alist) roles))
			     (set! (delete-of fan) (if (equal? "on" delete) #t #f))
			     ))
		       )
		 (redirect-page "admin-system"))))
    (table/
     (thead/ %admin-users-table-title%)
     (tr/ (th/ %admin-permission%)
	  (th/ %column-login-name%)
	  (th/ %column-mail-address%)
	  (th/ %column-developer-permission%)
	  (th/ %column-client-permission%)
	  (th/ %column-secret-permission%))
     (map/ (lambda (f)
	     (tr/ (td/ (if (member 'admin
				   (ref (kahua-find-user (fan-name-of f)) 'role-alist))
			   %checkbox-mark% ""))
		  (td/ (fan-name-of f)) (td/ (email-address-of f))
		  (td/ (if (member 'developer
				   (ref (kahua-find-user (fan-name-of f)) 'role-alist))
			   %checkbox-mark% ""))
		  (td/ (if (member 'client
				   (ref (kahua-find-user (fan-name-of f)) 'role-alist))
			   %checkbox-mark% ""))
		  (td/ (if (delete-of f) %checkbox-mark% ""))))
	   (filter (lambda (f)
		     (not (equal? "   " (fan-name-of f))))
		   (make-kahua-collection <fan>))))
    (table/
     (tr/ (th/ %admin-permission%)
	  (th/ %column-login-name%)
	  (th/ %column-password%)
	  (th/ %column-mail-address%)
	  (th/ %column-developer-permission%)
	  (th/ %column-client-permission%)
	  (th/ %column-secret-permission%))
     (tr/ (td/ (input/ (@/ (type "checkbox") (name "admin")) "off"))
	  (td/ (input/ (@/ (type "text") (name "login-name")) ""))
	  (td/ (input/ (@/ (type "password") (name "passwd")) ""))
	  (td/ (input/ (@/ (type "text") (name "mail-address")) ""))
	  (td/ (input/ (@/ (type "checkbox") (name "devel")) "off"))
	  (td/ (input/ (@/ (type "checkbox") (name "client")) "off"))
	  (td/ (input/ (@/ (type "checkbox") (name "delete")) "off")))
     (tr/ (td/ (input/ (@/ (type "submit") (name "submit") (value %new-fan-button%)))))))

   (hr/)

   (form/cont/
    (@@/ (cont (entry-lambda (:keyword u fallout)
		   (redirect-page "admin-system"))))
    (table/
     (thead/ %admin-unit-table-title%)
     (tr/ (th/ %column-unit-name%)
	  (th/ %column-unit-description%)
	  (th/ %column-unit-activity%))
     (node-set
      (map (lambda (u)
	     (tr/ (td/ (unit-name-of u))
		  (td/ (description-of u))
		  (td/ (a/cont/ (@@/ (cont (lambda ()
					     (set! (fallout-of u) (not (fallout-of u)))
					     (redirect-page "admin-system"))))
				(if (fallout-of u) %unit-inactive-link% %unit-active-link%)))))
	   (make-kahua-collection <unit>)))))

   (hr/)

   (form/cont/
    (@@/ (cont (entry-lambda (:keyword id disp level delete)
		   (if (not (find-kahua-instance <priority> id))
		       (make <priority>
			 :code id
			 :disp-name disp
			 :level (x->integer level)
			 :delete (if (equal? "on" delete) #t #f))
		       (let1 p (find-kahua-instance <priority> id)
			 (if (not (string-null? disp))
			     (set! (disp-name-of p) disp))
			 (set! (level-of p) (x->integer level))
			 (set! (delete-of p) (if (equal? "on" delete) #t #f))))
		 (redirect-page "admin-system"))))
    (table/
     (thead/ %admin-priority-table-title%)
     (tr/ (th/ %column-priority-id%)
	  (th/ %column-priority-display-name%)
	  (th/ %column-priority-level%)
	  (th/ %column-priority-delete%))
     (map/ (lambda (p)
	     (tr/ (td/ (code-of p)) (td/ (disp-name-of p))
		  (td/ (x->string (level-of p)))
		  (td/ (if (delete-of p) %checkbox-mark% ""))))
	   (map identity
		(make-kahua-collection <priority>))))
    (table/ (tr/ (th/ %column-priority-id%)
		 (th/ %column-priority-display-name%)
		 (th/ %column-priority-level%)
		 (th/ %column-priority-delete%))
	    (tr/ (td/ (input/ (@/ (type "text") (name "id")) ""))
		 (td/ (input/ (@/ (type "text") (name "disp")) ""))
		 (td/ (select/ (@/ (name "level"))
			       (map/ (lambda (l)
				       (option/ (@/ (value l)) l))
				     (map x->string (iota 5 1)))))
		 (td/ (input/ (@/ (type "checkbox") (name "delete")) "off")))
	    (tr/ (td/ (input/ (@/ (type "submit") (name "submit") (value %property-commit-button%)))))))

   (hr/)

   (form/cont/
    (@@/ (cont (entry-lambda (:keyword id disp delete)
		   (if (not (find-kahua-instance <status> id))
		       (make <status>
			 :code id
			 :disp-name disp
			 :delete (if (equal? "on" delete) #t #f))
		       (let1 s (find-kahua-instance <status> id)
			 (if (not (string-null? disp))
			     (set! (disp-name-of s) disp))
			 (set! (delete-of s) (if (equal? "on" delete) #t #f))))
		 (redirect-page "admin-system"))))
    (table/
     (thead/ %admin-status-table-title%)
     (tr/ (th/ %column-statsuy-id%)
	  (th/ %column-status-display-name%)
	  (th/ %column-status-delete%))
     (map/ (lambda (s)
	     (tr/ (td/ (code-of s)) (td/ (disp-name-of s))
		  (td/ (if (delete-of s) %checkbox-mark% ""))))
	   (map identity
		(make-kahua-collection <status>))))
    (table/ (tr/ (th/ %column-statsuy-id%)
		 (th/ %column-status-display-name%)
		 (th/ %column-status-delete%))
	    (tr/ (td/ (input/ (@/ (type "text") (name "id")) ""))
		 (td/ (input/ (@/ (type "text") (name "disp")) ""))
		 (td/ (input/ (@/ (type "checkbox") (name "delete")) "off")))
	    (tr/ (td/ (input/ (@/ (type "submit") (name "submit") (value %property-commit-button%)))))))

   (hr/)

   (form/cont/
    (@@/ (cont (entry-lambda (:keyword id disp delete)
		   (if (not (find-kahua-instance <type> id))
		       (make <type>
			 :code id
			 :disp-name disp
			 :delete (if (equal? "on" delete) #t #f))
		       (let1 t (find-kahua-instance <type> id)
			 (if (not (string-null? disp))
			     (set! (disp-name-of t) disp))
			 (set! (delete-of t) (if (equal? "on" delete) #t #f))))
		 (redirect-page "admin-system"))))
    (table/
     (thead/ %admin-type-table-title%)
     (tr/ (th/ %column-type-id%)
	  (th/ %column-type-display-name%)
	  (th/ %column-type-delete%))
     (map/ (lambda (t)
	     (tr/ (td/ (code-of t)) (td/ (disp-name-of t))
		  (td/ (if (delete-of t) %checkbox-mark% ""))))
	   (map identity
		(make-kahua-collection <type>))))
    (table/ (tr/ (th/ %column-type-id%)
		 (th/ %column-type-display-name%)
		 (th/ %column-type-delete%))
	    (tr/ (td/ (input/ (@/ (type "text") (name "id")) ""))
		 (td/ (input/ (@/ (type "text") (name "disp")) ""))
		 (td/ (input/ (@/ (type "checkbox") (name "delete")) "off")))
	    (tr/ (td/ (input/ (@/ (type "submit") (name "submit") (value %property-commit-button%)))))))

   (hr/)

   (form/cont/
    (@@/ (cont (entry-lambda (:keyword id disp delete)
		   (if (not (find-kahua-instance <category> id))
		       (make <category>
			 :code id
			 :disp-name disp
			 :delete (if (equal? "on" delete) #t #f))
		       (let1 c (find-kahua-instance <category> id)
			 (if (not (string-null? disp))
			     (set! (disp-name-of c) disp))
			 (set! (delete-of c) (if (equal? "on" delete) #t #f))))
		 (redirect-page "admin-system"))))
    (table/
     (thead/ %admin-category-table-title%)
     (tr/ (th/ %column-category-id%)
	  (th/ %column-category-display-name%)
	  (th/ %column-category-delete%))
     (map/ (lambda (c)
	     (tr/ (td/ (code-of c)) (td/ (disp-name-of c))
		  (td/ (if (delete-of c) %checkbox-mark% ""))))
	   (map identity
		(make-kahua-collection <category>))))
    (table/ (tr/ (th/ %column-category-id%)
		 (th/ %column-category-display-name%)
		 (th/ %column-category-delete%))
	    (tr/ (td/ (input/ (@/ (type "text") (name "id")) ""))
		 (td/ (input/ (@/ (type "text") (name "disp")) ""))
		 (td/ (input/ (@/ (type "checkbox") (name "delete")) "off")))
	    (tr/ (td/ (input/ (@/ (type "submit") (name "submit") (value %property-commit-button%)))))))
   ))
