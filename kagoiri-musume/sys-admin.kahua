;; -*- coding: euc-jp; mode: scheme -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: sys-admin.kahua,v 1.10 2005/11/12 04:09:24 cut-sea Exp $
;;

;; system admin's page
(define-entry (admin-system)
  (permission-check-page
   ;; checker: admin role?
   (lambda (u)
     (if (kahua-user-has-role? u '(admin))
	 u #f))
   ($$ "システム管理者のアカウントが必要です")
   (h2/ ($$ "籠入娘。システム設定管理画面"))

   (hr/)

   (form/cont/
    (@/ (id "fans"))
    (@@/ (cont (entry-lambda (:keyword login-name passwd mail-address admin devel client delete)
		   (if (not (string-null? login-name))
		       (if (not (kahua-find-user login-name))
			   ;; new creation
			   (let1 roles '(user)
			     (if (equal? "on" admin)
				 (set! roles (cons 'admin roles)))
			     (if (equal? "on" devel)
				 (set! roles (cons 'developer roles)))
			     (if (equal? "on" client)
				 (set! roles (cons 'client roles)))
			     (apply add-fan login-name passwd mail-address roles))
			   ;; modify user
			   (let* ((fan  (find-kahua-instance <fan> login-name))
				  (user (login-user-of fan)))
			     (if (not (string-null? passwd))
				 (kahua-user-password-change-force user passwd))
			     (if (not (string-null? mail-address))
				 (let1 email (make <email> :address mail-address)
				   (set! (email-of fan) email)))
			     (let1 roles '(user)
			       (if (equal? "on" admin)
				   (set! roles (cons 'admin roles)))
			       (if (equal? "on" devel)
				   (set! roles (cons 'developer roles)))
			       (if (equal? "on" client)
				   (set! roles (cons 'client roles)))
			       (set! (ref user 'role-alist) roles))
			     (set! (delete-of fan) (if (equal? "on" delete) #t #f))
			     ))
		       )
		 (redirect-page "admin-system"))))
    (table/
     (thead/ ($$ "登録ユーザ一覧"))
     (tr/ (th/ ($$ "管理者権限"))
	  (th/ ($$ "ログイン名"))
	  (th/ ($$ "メールアドレス"))
	  (th/ ($$ "開発"))
	  (th/ ($$ "顧客"))
	  (th/ ($$ "隠密")))
     (map/ (lambda (f)
	     (tr/ (td/ (if (member 'admin
				   (ref (kahua-find-user (fan-name-of f)) 'role-alist))
			   ($$ "＊") ""))
		  (td/ (fan-name-of f)) (td/ (email-address-of f))
		  (td/ (if (member 'developer
				   (ref (kahua-find-user (fan-name-of f)) 'role-alist))
			   ($$ "＊") ""))
		  (td/ (if (member 'client
				   (ref (kahua-find-user (fan-name-of f)) 'role-alist))
			   ($$ "＊") ""))
		  (td/ (if (delete-of f) ($$ "＊") ""))))
	   (filter (lambda (f)
		     (not (equal? "   " (fan-name-of f))))
		   (make-kahua-collection <fan>))))
    (table/
     (tr/ (th/ ($$ "管理者権限"))
	  (th/ ($$ "ログイン名"))
	  (th/ ($$ "パスワード"))
	  (th/ ($$ "メールアドレス"))
	  (th/ ($$ "開発"))
	  (th/ ($$ "顧客"))
	  (th/ ($$ "隠密")))
     (tr/ (td/ (input/ (@/ (type "checkbox") (name "admin")) "off"))
	  (td/ (input/ (@/ (type "text") (name "login-name")) ""))
	  (td/ (input/ (@/ (type "password") (name "passwd")) ""))
	  (td/ (input/ (@/ (type "text") (name "mail-address")) ""))
	  (td/ (input/ (@/ (type "checkbox") (name "devel")) "off"))
	  (td/ (input/ (@/ (type "checkbox") (name "client")) "off"))
	  (td/ (input/ (@/ (type "checkbox") (name "delete")) "off")))
     (tr/ (td/ (input/ (@/ (type "submit") (name "submit") (value ($$ "ファン登録"))))))))

   (hr/)

   (form/cont/
    (@/ (id "units"))
    (table/
     (thead/ ($$ "登録ユニット一覧"))
     (tr/ (th/ ($$ "ユニット名"))
	  (th/ ($$ "概要"))
	  (th/ ($$ "活動状態")))
     (node-set
      (map (lambda (u)
	     (tr/ (td/ (unit-name-of u))
		  (td/ (description-of u))
		  (td/ (a/cont/ (@@/ (cont (lambda ()
					     (set! (fallout-of u) (not (fallout-of u)))
					     (redirect-page "admin-system"))))
				(if (fallout-of u) ($$ "休止") ($$ "活動"))))))
	   (make-kahua-collection <unit>)))))

   (hr/)

   (form/cont/
    (@/ (id "priorities"))
    (@@/ (cont (entry-lambda (:keyword id disp level delete)
		   (if (not (find-kahua-instance <priority> id))
		       (make <priority>
			 :code id
			 :disp-name disp
			 :level (x->integer level)
			 :delete (if (equal? "on" delete) #t #f))
		       (let1 p (find-kahua-instance <priority> id)
			 (if (not (string-null? disp))
			     (set! (disp-name-of p) disp))
			 (set! (level-of p) (x->integer level))
			 (set! (delete-of p) (if (equal? "on" delete) #t #f))))
		 (redirect-page "admin-system"))))
    (table/
     (thead/ ($$ "登録優先度一覧"))
     (tr/ (th/ ($$ "優先度ID"))
	  (th/ ($$ "表示名"))
	  (th/ ($$ "レベル"))
	  (th/ ($$ "無効")))
     (map/ (lambda (p)
	     (tr/ (td/ (code-of p)) (td/ (disp-name-of p))
		  (td/ (x->string (level-of p)))
		  (td/ (if (delete-of p) ($$ "＊") ""))))
	   (map identity
		(make-kahua-collection <priority>))))
    (table/ (tr/ (th/ ($$ "優先度ID"))
		 (th/ ($$ "表示名"))
		 (th/ ($$ "レベル"))
		 (th/ ($$ "無効")))
	    (tr/ (td/ (input/ (@/ (type "text") (name "id")) ""))
		 (td/ (input/ (@/ (type "text") (name "disp")) ""))
		 (td/ (select/ (@/ (name "level"))
			       (map/ (lambda (l)
				       (option/ (@/ (value l)) l))
				     (map x->string (iota 5 1)))))
		 (td/ (input/ (@/ (type "checkbox") (name "delete")) "off")))
	    (tr/ (td/ (input/ (@/ (type "submit") (name "submit") (value ($$ "登録"))))))))

   (hr/)

   (form/cont/
    (@/ (id "statuss"))
    (@@/ (cont (entry-lambda (:keyword id disp delete)
		   (if (not (find-kahua-instance <status> id))
		       (make <status>
			 :code id
			 :disp-name disp
			 :delete (if (equal? "on" delete) #t #f))
		       (let1 s (find-kahua-instance <status> id)
			 (if (not (string-null? disp))
			     (set! (disp-name-of s) disp))
			 (set! (delete-of s) (if (equal? "on" delete) #t #f))))
		 (redirect-page "admin-system"))))
    (table/
     (thead/ ($$ "登録ステータス一覧"))
     (tr/ (th/ ($$ "ステータスID"))
	  (th/ ($$ "表示名"))
	  (th/ ($$ "無効")))
     (map/ (lambda (s)
	     (tr/ (td/ (code-of s)) (td/ (disp-name-of s))
		  (td/ (if (delete-of s) ($$ "＊") ""))))
	   (map identity
		(make-kahua-collection <status>))))
    (table/ (tr/ (th/ ($$ "ステータスID"))
		 (th/ ($$ "表示名"))
		 (th/ ($$ "無効")))
	    (tr/ (td/ (input/ (@/ (type "text") (name "id")) ""))
		 (td/ (input/ (@/ (type "text") (name "disp")) ""))
		 (td/ (input/ (@/ (type "checkbox") (name "delete")) "off")))
	    (tr/ (td/ (input/ (@/ (type "submit") (name "submit") (value ($$ "登録"))))))))

   (hr/)

   (form/cont/
    (@/ (id "types"))
    (@@/ (cont (entry-lambda (:keyword id disp delete)
		   (if (not (find-kahua-instance <type> id))
		       (make <type>
			 :code id
			 :disp-name disp
			 :delete (if (equal? "on" delete) #t #f))
		       (let1 t (find-kahua-instance <type> id)
			 (if (not (string-null? disp))
			     (set! (disp-name-of t) disp))
			 (set! (delete-of t) (if (equal? "on" delete) #t #f))))
		 (redirect-page "admin-system"))))
    (table/
     (thead/ ($$ "登録タイプ一覧"))
     (tr/ (th/ ($$ "タイプID"))
	  (th/ ($$ "表示名"))
	  (th/ ($$ "無効")))
     (map/ (lambda (t)
	     (tr/ (td/ (code-of t)) (td/ (disp-name-of t))
		  (td/ (if (delete-of t) ($$ "＊") ""))))
	   (map identity
		(make-kahua-collection <type>))))
    (table/ (tr/ (th/ ($$ "タイプID"))
		 (th/ ($$ "表示名"))
		 (th/ ($$ "無効")))
	    (tr/ (td/ (input/ (@/ (type "text") (name "id")) ""))
		 (td/ (input/ (@/ (type "text") (name "disp")) ""))
		 (td/ (input/ (@/ (type "checkbox") (name "delete")) "off")))
	    (tr/ (td/ (input/ (@/ (type "submit") (name "submit") (value ($$ "登録"))))))))

   (hr/)

   (form/cont/
    (@/ (id "categories"))
    (@@/ (cont (entry-lambda (:keyword id disp delete)
		   (if (not (find-kahua-instance <category> id))
		       (make <category>
			 :code id
			 :disp-name disp
			 :delete (if (equal? "on" delete) #t #f))
		       (let1 c (find-kahua-instance <category> id)
			 (if (not (string-null? disp))
			     (set! (disp-name-of c) disp))
			 (set! (delete-of c) (if (equal? "on" delete) #t #f))))
		 (redirect-page "admin-system"))))
    (table/
     (thead/ ($$ "登録カテゴリ一覧"))
     (tr/ (th/ ($$ "カテゴリID"))
	  (th/ ($$ "表示名"))
	  (th/ ($$ "無効")))
     (map/ (lambda (c)
	     (tr/ (td/ (code-of c)) (td/ (disp-name-of c))
		  (td/ (if (delete-of c) ($$ "＊") ""))))
	   (map identity
		(make-kahua-collection <category>))))
    (table/ (tr/ (th/ ($$ "カテゴリID"))
		 (th/ ($$ "表示名"))
		 (th/ ($$ "無効")))
	    (tr/ (td/ (input/ (@/ (type "text") (name "id")) ""))
		 (td/ (input/ (@/ (type "text") (name "disp")) ""))
		 (td/ (input/ (@/ (type "checkbox") (name "delete")) "off")))
	    (tr/ (td/ (input/ (@/ (type "submit") (name "submit") (value ($$ "登録"))))))))

   (hr/)

   (form/cont/
    (@/ (id "musumes"))
    (table/
     (thead/ ($$ "不良娘。一覧"))
     (tr/ (th/ ($$ "元所属ユニット"))
	  (th/ ($$ "娘。No"))
	  (th/ ($$ "タイトル"))
	  (th/ ($$ "作成日"))
	  (th/ ($$ "活動状態")))
     (node-set
      (map (lambda (m)
	     (tr/ (td/ (unit-name-of (unit-of m)))
		  (td/ (x->string (mno-of m)))
		  (td/ (mname-of m))
		  (td/ (sys-strftime "%Y/%m/%d %H:%M:%S"
				     (sys-localtime (ctime-of m))))
		  (td/ (a/cont/ (@@/ (cont (lambda ()
					     (set! (delete-of m) (not (delete-of m)))
					     (redirect-page "admin-system"))))
				(if (delete-of m) ($$ "休止") ($$ "活動"))))))
	   (filter delete-of (make-kahua-collection <musume>))))))

   ))
