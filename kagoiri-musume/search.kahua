;; -*- coding: euc-jp; mode: kahua -*-
;;
;;  Copyright (c) 2004 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2004 Time Intermedia Corporation, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: search.kahua,v 1.22 2006/03/18 11:53:25 shibata Exp $

;; methods for search.
(define-method searchable-text ((obj <unit>))
  (list (cons ($$ "ユニット名") (ref obj 'unit-name))
        (cons ($$  "概要") (ref obj 'description))))

(define-method searchable-text ((obj <musume>))
  (cons (cons ($$ "タイトル") (ref obj 'musume-name))
        (map
         (lambda (song)
           (cons
            (sys-strftime
             "%Y/%m/%d %H:%M:%S"
             (sys-localtime (ref song 'ctime)))
            (melody-of song)))
         (reverse (filter active? (ref obj 'songs))))))

(define-method link-of ((obj <unit>) . options)
  (let-keywords* options ((action :action "")
                          (body   :body #f))
    (a/cont/ (@@/ (cont ** (key-of obj) action))
             (or  body
                  (unit-name-of obj)))))

(define-method label-of ((obj <unit>))
  (link-of obj))

(define-method redirect-to ((obj <unit>) . args)
  (let1 action (get-optional args "")
    (redirect/cont (cont ** (key-of obj) action))))


(define-method url-of ((obj <musume>))
  (kahua-self-uri-full "**" (key-of (unit-of obj)) (x->string (mno-of obj))))

(define-method link-of ((obj <musume>) . options)
  (let-keywords* options ((action :action "")
                          (body   :body #f))
    (a/cont/ (@@/ (cont ** (key-of (unit-of obj)) (mno-of obj) action))
             (or  body
                  (mname-of obj)))))

;; fixme
(define-method link-of ((key <keyword>) . options)
  (let-keywords* (cons key options) ((action :action "")
                                     (body   :body #f))
    (a/cont/ (@@/ (cont ** action))
             (or  body
                  "トップ"))))

(define-method label-of ((obj <musume>))
  (let ((unit (unit-of obj)))
    (span/
     (link-of unit)
     " : "
     (link-of obj))))

(define-method redirect-to ((obj <musume>) . args)
  (let1 action (get-optional args "")
    (redirect/cont (cont ** (key-of (unit-of obj)) (mno-of obj) action))))

(define-method redirect-to ()
  (redirect/cont))


;; search page
(define-entry (search :keyword word unit-id)
  (let* ((word-len (string-length word))
         (fan (kahua-current-user))
         (units (if unit-id
                    (cons (id->obj <unit> unit-id) '())
		    (filter
		     (lambda (unit)
		       (memq fan (fans-of unit)))
		     (all-units)))))
    
    (define (find-all context word)

      (define (highlight line)
	(let ((idx (string-contains-ci line word)))
	  (if idx
	      (list/ (string-take line idx)
		     (span/ (@/ (class "highlight")
				(style "background-color:yellow"))
			    (substring/shared line idx (+ idx word-len)))
		     (highlight
		      (string-drop line (+ idx word-len))))
	      (list/ line "\n"))))
      (define (iter list acc)
	(if (<= (length list) 1)
	    (reverse acc)
	    (if (string-contains-ci (cadr list) word)
		(iter (cddr list)
		      (cons
		       (pre/
			(map/ highlight
			      (take* list 3)))
		       acc))
		(iter (cdr list) acc))))

      (iter (cons "" (call-with-input-string context port->string-list)) '()))

    (define (search-result)

      (define (sorter x y)
	(> (ref x 'mtime) (ref y 'mtime)))
      (define (contain? item)
	(let ((s (searchable-text item)))
	  (and (find (lambda (t&v)
		       (string-contains-ci (cdr t&v) word))
		     s)
	       (cons (label-of item)
		     s))))

      (if (< 1 word-len)
	  (let* ((hits (filter-map
			contain?
			(fold
			 (lambda (x y)
			   (append (cons x
					 (all-active-musumes x))
				   y))
			 '()
			 units))))
	    (div/
	     (h1/ (format ($$ "検索文字列: ~a (~a 件)") word (length hits)))
	     (map/ (lambda (hit)
		     (fieldset/
		      (legend/ (car hit))
		      (map/ (lambda (item)
			      (let1 match (find-all (cdr item) word)
				(if (null? match)
				    ""
				    (div/
				     (strong/ (car item))
				     (node-set
				      match)))))
			    (cdr hit))))
		   hits)))
	  (h1/ (format ($$ "検索文字列が短すぎます: ~a") word))))

    (kagoiri-page (search-result))))
