;; -*- coding: euc-jp; mode: kahua -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: parts-collection.kahua,v 1.79 2006/02/18 08:06:45 shibata Exp $
;;
;; utility tags
(define list/ (compose node-set list))

(define (options option-list . selected-value)
  (let1 selected (and (not (null? selected-value))
                      (car selected-value))
    (map (lambda (p)
         (option/ (@/ (value (code-of p))
                      (selected (equal? (code-of p) selected)))
                  (disp-name-of p)))
       option-list)))

;; simple macro
(define-macro (generate-node-with-checker new-tag orig-tag pred)
  `(define-macro (,new-tag . nodes)
     `(if (,',pred) (,',orig-tag ,@nodes) "")))

(define gen-node/checker generate-node-with-checker)


;; multiple define
(define-macro (define-checker-tags prefix pred tags-list)
  (let ((new-tags-list (map (lambda (tag)
			      (string->symbol #`",prefix,tag"))
			    tags-list)))
    `(begin
       ,@(map (lambda (new orig)
		`(gen-node/checker ,new ,orig ,pred))
	      new-tags-list
	      tags-list))))

;; イマイチ
;;
(define-checker-tags admin: admin?
  (a/ a/cont/ dd/ div/ dt/ form/ form/cont/ h1/ h2/ h3/ h4/ h5/ h6/
      hr/ input/ li/ list/ pre/ select/ table/ tbody/ td/ textarea/ th/ thead/ ul/))

(define-checker-tags common: common?
  (a/ a/cont/ dd/ div/ dt/ form/ form/cont/ h1/ h2/ h3/ h4/ h5/ h6/
      hr/ input/ li/ list/ pre/ select/ table/ tbody/ td/ textarea/ th/ thead/ ul/))

(define-checker-tags devel: developer?
  (a/ a/cont/ dd/ div/ dt/ form/ form/cont/ h1/ h2/ h3/ h4/ h5/ h6/
      hr/ input/ li/ list/ pre/ select/ table/ tbody/ td/ textarea/ th/ thead/ ul/))

(define-checker-tags client: client?
  (a/ a/cont/ dd/ div/ dt/ form/ form/cont/ h1/ h2/ h3/ h4/ h5/ h6/
      hr/ input/ li/ list/ pre/ select/ table/ tbody/ td/ textarea/ th/ thead/ ul/))

(define-checker-tags error: error?
  (span/))


;;;; define-checker creates checker macro
;;;
;; [syntax] define-checker (name args ...) condition
;;
;; (define-checker (<node n)
;;      (< 0 n))
;;;
;; [syntax] <node args ... body
;;
;; (<node 1 "yes")
;; -> "yes"
;; (<node -1 "yes")
;; -> ""
(define-macro (define-checker name&args condition)
  (let ((name (car name&args))
        (args (cdr name&args)))
    `(define-macro (,name ,@args body)
       `(if ((lambda ,',args
               ,',condition)
             ,@,(cons 'list args))
            ,body
          ""))))

(define-checker (unit-member? unit)
  (memq (current-fan) (ref unit 'fans)))

(define-checker (developer-or-fan? unit)
  (or (kahua-user-has-role? (kahua-current-user) '(developer))
      (memq (current-fan) (ref unit 'fans))))

(define-checker (has-item? unit props-of)
  (not (null? (props-of unit))))

(define-checker (composer? song)
  (eq? (current-fan) (fan-of song)))

;;-------------------------------------------------------------
;; low level  parts collection
;;-------------------------------------------------------------
(define (updown/ props)
  (list/
   (div/ (@/ (class "clickable")
	     (onclick #`"up_select(this,, ',|props|')"))
	 "↑")
   (div/ (@/ (class "clickable")
	     (onclick #`"down_select(this,, ',|props|')"))
	 "↓")))
(define (change-passwrod-table/ old new again)
  (table/
   (tr/ (th/ ($$ "旧パスワード"))
	(td/ (input/ (@/ (type "password") (name old) (id "focus")
			 (value "")) "")))
   (tr/ (th/ ($$ "新パスワード"))
	(td/ (input/ (@/ (type "password") (name new)
			 (value "")) "")))
   (tr/ (th/ ($$ "新パスワード(確認)"))
	(td/ (input/ (@/ (type "password") (name again)
			 (value "")) "")))))

(define (musume-menu/ unit)
  (ul/ (@/ (class "menu"))
       (common:li/ (link-of unit
                     :action "new"
                     :body (node-set
                            (list
                             (@/ (class "clickable"))
                             ($$ "新しい娘。")))))))

(define (require-fan-message unit)
  (format ($$ "『~a』のファンとしてのアカウントが必要です") (unit-name-of unit)))

(define (inter-unit-search-box/ unit-id)
  (div/
   (@/ (id "search-box"))
   (form/cont/
    (@@/ (cont search `(unit-id ,unit-id)))
    ($$ "ユニット内検索:")
    (input/ (@/ (onKeyUp "delay_search(this.value)")
		(onKeyDown "search_onKeyDown(event)")
		(type "text") (name "word") (size 10)
		(id "focus")))
    (input/ (@/ (type "submit") (value ($$ "検索")))))))

(define (musume-table/ unit musumes status-hash)
  (table/
   (@/ (class "listing") (id "musume_list"))
   (thead/
    (span/ (@/ (id "musume_count")))
    (cond ((= 0 (length musumes)) ($$ "萌えられる娘。がいません(T^T)"))
	  ((= 1 (length musumes)) ($$ "ただひとりの娘。に萌えました"))
	  ((> 100 (length musumes)) (format ($$ "~a人の娘。に萌えました") (length musumes)))
	  ((> 500 (length musumes)) (format ($$  "~a人もの娘。に萌えました(萌えすぎです)") (length musumes)))
	  (else (format ($$  "なんと~a人もの娘。に萌えまつきました orz") (length musumes))))
    (div/ (@/ (id "status-num"))
	  (map/ (lambda (s)
		  (let1 statusid (code-of s)
		    (span/ (a/cont/ (@/ (onclick "return update_status(this)"))
				    (@@/ (cont ** (key-of unit) `(status ,statusid)))
				    (disp-name-of s))
			   (format "(~a) " (hash-table-get status-hash statusid 0)))))
		(statuss-of unit)))
    (tr/ (@/ (onclick "sort_table(event);return false"))
	 (devel:th/)
	 (th/ (@/ (value "no"))
	      ($$ "No."))
	 (th/ (@/ (value "title"))
	      ($$ "タイトル"))
	 (map/ (lambda (props-of prop msg)
		 (has-item? unit props-of
			    (th/ (@/ (value prop)) msg)))
	       $properties-accessor-list$
	       $property-list$
	       $property-headers$)
	 (th/ (@/ (value "ltime")) ($$ "期限"))
	 (th/ (@/ (value "ctime")) ($$ "登録日"))
	 (th/ (@/ (value "mtime")) ($$ "更新日"))))
   (tbody/
    (map/ (lambda (m)
	    (define (prop-td/ prop-of props-of code disp)
	      (let1 val (prop-of m)
		(has-item? unit props-of
			   (td/ (@/ (value (code val)))
				(disp val)))))
	    (define (time-over? musume)
	      (and (limit-of musume)
		   (date>=? (today) (sys-time->date (limit-of musume)))))
	    (let ((status (status-of m))
		  (songs (songs-of m)))
	      (tr/ (@/ (class (string-append #`"status-,(code-of status)"
					     " "
					     (if (time-over? m) "timeover" ""))))
		   (devel:td/ (a/cont/
			       (@/ (onClick (format "return confirm('~a')?true:false"
						    ($$ "本当に削除しますか？"))))
			       (@@/ (cont remove-musume (key-of m)))
			       ($$ "削除")))
		   (let1 val (format "~3,'0d" (mno-of m))
		     (td/ (@/ (value val))
                          (link-of m :action "edit" :body val)))
		   (let1 val (mname-of m)
		     (td/ (@/ (value val))
                          (link-of m :body (node-set
                                            (list (@/ (onClick "apply_flter_state(this)"))
                                                  val)))
			  (format " (~a)" (length songs))))
		   (prop-td/ priority-of priorities-of level-of disp-name-of)
		   (prop-td/ status-of statuss-of code-of disp-name-of)
		   (prop-td/ type-of types-of code-of disp-name-of)
		   (prop-td/ category-of categories-of code-of disp-name-of)
		   (prop-td/ assign-of fans-of fan-name-of fan-name-of)
		   (let1 val (limit-of m)
		     (td/ (@/ (value val))
			  (if val
			      (sys-strftime "%Y/%m/%d" (sys-localtime val))
			      "-")))
		   (let1 val (ctime-of m)
		     (td/ (@/ (value val))
			  (sys-strftime "%Y/%m/%d %H:%M"
					(sys-localtime val))))
		   (let1 val (ctime-of (car songs))
		     (td/ (@/ (value val))
			  (sys-strftime "%Y/%m/%d %H:%M"
					(sys-localtime val)))))))
	  musumes))))

(define (musume-new-table/ unit date limit-date target-date getter setter)
  (define (make-col n refer)
    (has-item? unit refer
	       (td/
		(select/
		 (@/ (name n))
		 (map/ (lambda (item)
			 (option/ (@/ (value (code-of item)))
				  (disp-name-of item)))
		       (refer unit))))))
  (table/
   (tr/
    (td/ (table/
	  (tr/
	   (map/ (lambda (props-of msg)
		   (has-item? unit props-of (th/ msg)))
		 (drop-right $properties-accessor-list$ 1)
		 (drop-right $property-headers$ 1))
	   (th/ ($$ "アサイン")))
	  (tr/
	   (map/ make-col $property-list$ $properties-accessor-list$)
	   (td/ (input/ (@/ (type "button") (onclick "submit();") (value ($$ "新しい娘。加入"))))))))
    (td/ (@/ (rowspan 2) (id "limit-calendar"))
	 (calendar/ date limit-date target-date getter setter)))
   (tr/
    (td/ (table/ (tr/ (td/ ($$ "タイトル") (span/ (@/ (class "warning")) ($$ "(※)")))
		      (td/ (input/ (@/ (type "text") (name "name")
				       (id "focus") (size 80)))
			   (error:span/ (@/ (class "warning")) (set-error-message #f))))
                 (tr/
                  (td/)
                  (td/ (span/ (@/ (onclick (format "popup_linkselect(event, ~s)" (key-of unit))))
                              (clickable ($$ "案件へのリンク")))
		       (span/ (@/ (class "warning")) "「案件へのリンク」は現在開発中です。まだ使用しないでください。")))
		 (tr/ (td/ ($$ "内容"))
		      (td/ (textarea/ (@/ (type "text") (name "melody") (id "melody")
					  (rows 20) (cols 80)))))
		 (tr/ (td/ ($$ "ファイル"))
		      (td/ (input/ (@/ (type "file") (name "file")))
			   (input/ (@/ (type "hidden") (name "filename") (value ""))))))))
   (tr/
    (td/ (input/ (@/ (type "button") (onclick "submit();") (value ($$ "新しい娘。加入"))))))))

;;-------------------------------------------------------------
;; high level  parts collection
;;-------------------------------------------------------------
(define (unit-list-table/)
  (let1 unsubscriptions (unsubscriptions-of (current-fan))
    (table/ (@/ (class "listing"))
            (thead/
             (tr/ (devel:th/) (admin:th/)
                  (th/ ($$ "ユニット名"))
                  (th/ ($$  "概要"))
                  (th/ ($$ "ファン"))
                  (th/ ($$ "購読"))))
            (tbody/
             (node-set
              (map-with-index
               (lambda (idx u)
                 (developer-or-fan?
                  u
                  (tr/ (@/ (class (if (odd? idx) "odd" "even")))
                       (devel:td/
                        (link-of u :action "edit" :body ($$ "設定")))
                       (admin:td/
                        (a/cont/
                         (@/ (onClick (format "return confirm('~a')?true:false"
                                              ($$ "本当に削除しますか？"))))
                         (@@/ (cont unit-fallout (key-of u)))
                         ($$ "削除")))
                       (td/ (link-of u)
                            (format " (~a)"
                                    (length (all-active-musumes u))))
                       (td/ (description-of u))
                       (td/ (string-join
                             (filter-map (lambda (f)
                                           (and (not (equal? "   " (code-of f)))
                                                (fan-name-of f)))
                                         (fans-of u)) " , "))
                       (td/
                        (unit-member? u
                          (let1 subscription? (not (memq u unsubscriptions))
                            (a/cont/ (@/ (class "clickable")
					 (title (if subscription?
						    ($$ "娘。からのお便りを停止します")
						    ($$ "娘。からのお便りをもらう"))))
				     (@@/ (cont (cut (lambda ()
                                                       (update! (ref (current-fan) 'unsubscriptions)
                                                                (lambda (ls)
                                                                  (let1 ls (or ls '())
                                                                    (if subscription?
                                                                        (if (memq u ls)
                                                                            bkmks
									    (cons u ls))
									(delete u ls)))))
                                                       (redirect/cont (cont **))))))
                                     (if subscription?
                                         ($$ "○")
					 ($$ "×")))))))))
               (all-units)))))))

(define (create-unit-form/ . unit)
  (let1 unit (get-optional unit #f)
    (devel:list/
     (h2/ (if unit
	      (format ($$ "『~a』ユニット設定") (unit-name-of unit))
	      ($$ "新ユニット結成")))
     (form/cont/
      (@/ (onsubmit "return submitForm(this)"))
      (@@/ (cont (entry-lambda (:keyword name desc notify-addresses
				:mvkeyword fans priority status type category)
		     (if (or (string-null? name)
			     (null? (kahua-context-ref* "fans")))
			 (begin
			   (set-error-message ($$ "ユニット名入力とファン選択は必須です。"))
			   (if unit
                               (redirect-to unit "edit")
                             (redirect/cont (cont **))))
			 (set-error-message #f))
		   (if unit
		       (apply unit-makeover! unit name desc notify-addresses
			      (map kahua-context-ref* (drop-right $full-property-list$ 1)))
		       (create-new-unit name desc fans priority status type category notify-addresses))
                   (redirect/cont (cont **)))))
      (table/
       (tr/ (@/ (onclick "toggle_fulllist(event)"))
	    (th/ (@/ (colspan 2)) (clickable ($$ "優先度")))
	    (th/ (@/ (colspan 2)) (clickable ($$ "ステータス")))
	    (th/ (@/ (colspan 2)) (clickable ($$ "タイプ")))
	    (th/ (@/ (colspan 2)) (clickable ($$ "カテゴリ"))))
       (tr/
	(map/ (lambda (n items)
		(list/
		 (td/
		  (select/ (@/ (id n) (name n) (size "5") (multiple "true"))
			   (map/ (lambda (item)
				   (if unit
				       (option/ (@/ (value (code-of item))
						    (selected (has? unit item)))
						(disp-name-of item))
				       (option/ (@/ (value (code-of item)))
						(disp-name-of item))))
				 items)))
		 (td/ (updown/ n))))
	      (drop-right $property-list$ 1)
	      (if unit
		  (map (lambda (acc all)
			 (append (acc unit)
				 (lset-difference eq? (all) (acc unit))))
		       (drop-right $properties-accessor-list$ 1)
		       (drop-right $all-properties-list$ 1))
		  (map (lambda (all) (all))
		       (drop-right $all-properties-list$ 1))))))
      (table/
       (tr/ (td/ ($$ "ユニット名") (span/ (@/ (class "warning")) ($$ "(※)")))
	    (td/
	     (textarea/ (@/ (type "text") (name "name")
			    (rows 1) (cols 32))
			(if unit (unit-name-of unit) ""))
	     (error:span/ (@/ (class "warning")) (set-error-message #f))))
       (tr/ (td/ ($$  "概要"))
	    (td/ (@/ (colspan 2))
		 (textarea/ (@/ (type "text") (name "desc")
				(rows 10) (cols 80))
			    (if unit (description-of unit) ""))))
       (tr/ (@/ (align "left"))
	    (td/ ($$ "ファン") (span/ (@/ (class "warning")) ($$ "(※)")))
	    (td/
	     (table/
	      (tr/
	       (td/
		(select/ (@/ (id "fans") (name "fans") (size "5") (multiple "true"))
			 (map/ (lambda (fan)
				 (let1 f (fan-name-of fan)
				   (if unit
				       (option/ (@/ (value f)
						    (selected (fan-to? unit fan)))
						f)
				       (option/ (@/ (value f)) f))))
			       (if unit
				   (append (fans-of unit)
					   (lset-difference eq? (all-fans)
							    (fans-of unit)))
				   (all-fans)))))
	       (td/ (updown/ "fans"))))))
       (tr/ (td/ ($$ "通知アドレス"))
            (td/
             (textarea/ (@/ (type "text") (name "notify-addresses")
                            (rows 2) (cols 20))
                        (if unit (string-join
                                  (notify-addresses-of unit) "\n")
                          "")))))
      (if unit
	  (input/ (@/ (type "submit") (value ($$ "確定"))))
	  (input/ (@/ (type "submit") (value ($$ "新ユニット結成")))))))))

;;-------------------------------------------------------------
;; calendar
;;-------------------------------------------------------------
;;
;; dateはデフォルト今日で移動すればその月の日付、
;; date: これで表示する月を決定
;; limit: 現在musumeに設定されている期限
;; target: 選択中の期限
;; getter/setter: targetに対するアクセサ
;;
(define (day/ date) (x->string (date-day date)))
(define (month/ date) (x->string (date-month date)))
(define (year/ date) (x->string (date-year date)))
(define (ymd/ date) #`",(year/ date)/,(month/ date)/,(day/ date)")

(define (calendar-header/ parent/ date . args)
  (tr/ (@/ (class "operation"))
       (th/ (a/cont/async/ (@/ (title ($$ "前年へ")))
			   (@@/ (id "limit-calendar")
				(cont (lambda _
					(apply parent/ (nth-month-before 12 date) args)))) "<<"))
       (th/ (a/cont/async/ (@/ (title ($$ "前月へ")))
			   (@@/ (id "limit-calendar")
				(cont (lambda _
					(apply parent/ (prev-month date) args)))) "<"))
       (th/ (@/ (colspan 3))
	    (a/cont/async/ (@/ (title ($$ "現在の月へ")))
			   (@@/ (id "limit-calendar")
				(cont (lambda _
					(apply parent/ (today) args))))
			   (format "~4a - ~2,,,'0@a" (year/ date) (month/ date))))
       (th/ (a/cont/async/ (@/ (title ($$ "次月へ")))
			   (@@/ (id "limit-calendar")
				(cont (lambda _
					(apply parent/ (next-month date) args)))) ">"))
       (th/ (a/cont/async/ (@/ (title ($$ "次年へ")))
			   (@@/ (id "limit-calendar")
				(cont (lambda _
					(apply parent/ (nth-month-after 12 date) args)))) ">>"))))
  

(define (calendar/ date limit target getter setter)
  (table/
   (@/ (class "calendar"))
   (caption/ (@/ (class "calendar")) ($$ "期限"))
   (tr/ (@/ (class "limit-fromto"))
	(td/ (@/ (colspan 3))
	     (if limit (ymd/ limit) ""))
	(td/ (if (or limit target) "→" ""))
	(td/ (@/ (colspan 3))
	     (if target (ymd/ target) "")))
   (calendar-header/ calendar/ date limit target getter setter)
   (tr/ (@/ (class "weekname"))
	(node-set
	 (map (lambda (w a)
		(th/ (@/ (class a)) (x->string w)))
	      "日月火水木金土"
	      '("sunday" "workday" "workday" "workday" "workday" "workday" "saturday"))))
   (map/ (lambda (week)
	   (tr/
	    (map/ (lambda (d)
		    (td/
		     (receive (type msg)
			 (holiday? d)
		       (@/ (class (string-join
				   (list (list-ref '("workday" "saturday" "sunday" "holiday" "compensate" "holy")
						   type)
					 (if (and limit (date=? limit d)) "limit" "")
					 (if (and (getter) (date=? (getter) d)) "target" "")
					 (if (date=? (today) d) "today" "")
					 (if (same-month? d date) "" "other-month"))))
			   (title msg)))
		     (a/cont/async/ (@@/ (id "limit-calendar")
					 (cont (lambda _
						 (setter d)
						 (calendar/ date limit d getter setter))))
				    (day/ d))))
		  week)))
	 (date-slices-of-month date #t))
   (tr/ (@/ (class "calendar-footer"))
    (th/ (@/ (colspan 3))
	 (a/cont/async/ (@/ (class "clickable") (title ($$ "期限無しにします")))
			(@@/ (id "limit-calendar")
			     (cont (lambda _
				     (setter #f)
				     (calendar/ (today) limit #f getter setter)))) ($$ "期限削除")))
    (th/ (help-button/ "calendar"))
    (th/ (@/ (colspan 3))
	 (a/cont/async/ (@/ (class "clickable") (title ($$ "期限の変更をキャンセルします")))
			(@@/ (id "limit-calendar")
			     (cont (lambda _
				     (setter limit)
				     (calendar/ (today) limit limit getter setter)))) ($$ "変更中止"))))))

;
; タスクカレンダー
;
(define (task-calendar-table/ date)
  (define (collect-musumes-with-limit date)
    (filter (lambda (m)
	      (and (limit-of m)
		   (same-date? date (sys-time->date (limit-of m)))))
	    (append-map all-musumes
			(all-units (current-fan)))))
  (table/
   (@/ (class "task calendar"))
   (calendar-header/ task-calendar-table/ date)
   (tr/ (node-set
	 (map (lambda (w a)
		(th/ (@/ (class a)) (x->string w)))
	      "日月火水木金土"
	      '("sunday" "workday" "workday" "workday" "workday" "workday" "saturday"))))
   (map/ (lambda (week)
	   (tr/
	    (map/ (lambda (d)
		    (let1 ms (collect-musumes-with-limit d)
		      (receive (type msg)
			  (holiday? d)
			(td/
			 (@/ (class (string-join
				     (list (list-ref '("workday" "saturday" "sunday" "holiday" "compensate" "holy")
						     type)
					   (if (date=? (today) d) "today" "")
					   (if (same-month? d date) "" "other-month")))))
			 (div/ (span/ (@/ (class "date")) (day/ d) (if msg #`" ,msg" ""))
			       (map/ (lambda (m)
				       (link-of m))
				     ms))))))
		  week)))
	 (date-slices-of-month date #t))))
