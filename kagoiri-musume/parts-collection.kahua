;; -*- coding: euc-jp; mode: scheme -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: parts-collection.kahua,v 1.23 2005/11/16 16:52:11 cut-sea Exp $
;;
;; utility tags
(define list/ (compose node-set list))

(define (options option-list . selected-value)
  (let1 selected (and (not (null? selected-value))
                      (car selected-value))
    (map (lambda (p)
         (option/ (@/ (value (code-of p))
                      (selected (equal? (code-of p) selected)))
                  (disp-name-of p)))
       option-list)))

;; simple macro
(define-macro (generate-node-with-checker new-tag orig-tag pred)
  `(define-macro (,new-tag . nodes)
     `(if (,',pred) (,',orig-tag ,@nodes) "")))

(define gen-node/checker generate-node-with-checker)


;; multiple define
(define-macro (define-checker-tags prefix pred tags-list)
  (let ((new-tags-list (map (lambda (tag)
			      (string->symbol #`",prefix,tag"))
			    tags-list)))
    `(begin
       ,@(map (lambda (new orig)
		`(gen-node/checker ,new ,orig ,pred))
	      new-tags-list
	      tags-list))))

;; イマイチ
;;
(define-checker-tags admin: admin?
  (a/ a/cont/ dd/ div/ dt/ form/ form/cont/ h1/ h2/ h3/ h4/ h5/ h6/
      hr/ input/ li/ list/ pre/ select/ table/ tbody/ td/ textarea/ th/ thead/ ul/))

(define-checker-tags common: common?
  (a/ a/cont/ dd/ div/ dt/ form/ form/cont/ h1/ h2/ h3/ h4/ h5/ h6/
      hr/ input/ li/ list/ pre/ select/ table/ tbody/ td/ textarea/ th/ thead/ ul/))

(define-checker-tags devel: developer?
  (a/ a/cont/ dd/ div/ dt/ form/ form/cont/ h1/ h2/ h3/ h4/ h5/ h6/
      hr/ input/ li/ list/ pre/ select/ table/ tbody/ td/ textarea/ th/ thead/ ul/))

(define-checker-tags client: client?
  (a/ a/cont/ dd/ div/ dt/ form/ form/cont/ h1/ h2/ h3/ h4/ h5/ h6/
      hr/ input/ li/ list/ pre/ select/ table/ tbody/ td/ textarea/ th/ thead/ ul/))

(define-checker-tags error: error?
  (span/))


;;;; define-checker creates checker macro
;;;
;; [syntax] define-checker (name args ...) condition
;;
;; (define-checker (<node n)
;;      (< 0 n))
;;;
;; [syntax] <node args ... body
;;
;; (<node 1 "yes")
;; -> "yes"
;; (<node -1 "yes")
;; -> ""
(define-macro (define-checker name&args condition)
  (let ((name (car name&args))
        (args (cdr name&args)))
    `(define-macro (,name ,@args body)
       `(if ((lambda ,',args
               ,',condition)
             ,@,(cons 'list args))
            ,body
          ""))))

(define-checker (unit-member? unit)
  (memq (current-fan) (ref unit 'fans)))

(define-checker (developer-or-fan? unit)
  (or (kahua-user-has-role? (kahua-current-user) '(developer))
      (memq (current-fan) (ref unit 'fans))))

(define-checker (has-item? unit props-of)
  (not (null? (props-of unit))))

(define-checker (composer? song)
  (eq? (current-fan) (fan-of song)))

;;-------------------------------------------------------------
;; low level  parts collection
;;-------------------------------------------------------------
(define (updown/ props)
  (list/
   (div/ (@/ (class "clickable")
	     (onclick #`"up_select(this,, ',|props|')"))
	 "↑")
   (div/ (@/ (class "clickable")
	     (onclick #`"down_select(this,, ',|props|')"))
	 "↓")))
(define (change-passwrod-table/ old new again)
  (table/
   (tr/ (th/ ($$ "旧パスワード"))
	(td/ (input/ (@/ (type "password") (name old) (id "focus")
			 (value "")) "")))
   (tr/ (th/ ($$ "新パスワード"))
	(td/ (input/ (@/ (type "password") (name new)
			 (value "")) "")))
   (tr/ (th/ ($$ "新パスワード(確認)"))
	(td/ (input/ (@/ (type "password") (name again)
			 (value "")) "")))))

(define (musume-menu/ unit-id)
  (ul/ (@/ (class "menu"))
       (li/ (a/cont/ (@@/ (cont musume-list unit-id)) ($$ "娘。一覧")))
       (common:li/ (a/cont/ (@@/ (cont musume-new unit-id)) ($$ "新しい娘。")))))


(define (require-fan-message unit)
  (format ($$ "『~a』のファンとしてのアカウントが必要です") (unit-name-of unit)))


;;-------------------------------------------------------------
;; high level  parts collection
;;-------------------------------------------------------------
(define (unit-list-table/)
  (table/ (@/ (class "listing"))
	  (thead/
	   (tr/ (devel:th/) (devel:th/)
		(th/ ($$ "ユニット名"))
		(th/ ($$  "概要"))
		(th/ ($$ "ファン"))))
	  (tbody/
	   (node-set
	    (map-with-index
	     (lambda (idx u)
	       (developer-or-fan?
		u
		(tr/ (@/ (class (if (odd? idx) "odd" "even")))
		     (devel:td/
		      (a/cont/
		       (@@/ (cont unit-edit (key-of u)))
		       ($$ "編集")))
		     (devel:td/
		      (a/cont/
		       (@/ (onClick (format "return confirm('~a')?true:false"
					    ($$ "本当に削除しますか？"))))
		       (@@/ (cont unit-fallout (key-of u)))
		       ($$ "削除")))
		     (td/ (a/cont/
			   (@@/ (cont musume-list (key-of u)))
			   (unit-name-of u))
			  (format " (~a)"
				  (length (all-active-musumes u))))
		     (td/ (description-of u))
		     (td/ (string-join
			   (filter-map (lambda (f)
					 (and (not (equal? "   " (code-of f)))
					      (fan-name-of f)))
				       (fans-of u)) " , ")))))
	     (all-units))))))

(define (create-unit-form/ . unit)
  (let1 unit (get-optional unit #f)
    (devel:list/
     (h2/ (if unit
	      (format ($$ "『~a』ユニット編集") (unit-name-of unit))
	      ($$ "新ユニット結成")))
     (form/cont/
      (@/ (onsubmit "return submitForm(this)"))
      (@@/ (cont (entry-lambda (:keyword name desc)
		     (if (or (string-null? name)
			     (null? (kahua-context-ref* "fans")))
			 (begin
			   (set-error-message ($$ "ユニット名入力とファン選択は必須です。"))
			   (if unit
			       (redirect-page #`"unit-edit/,(key-of unit)")
			       (redirect-page "unit-list")))
			 (set-error-message #f))
		   (if unit
		       (apply unit-makeover! unit name desc
			      (map kahua-context-ref* (drop-right $full-property-list$ 1)))
		       (create-new-unit name desc))
		   (redirect-page "unit-list"))))
      (table/
       (tr/ (@/ (onclick "toggle_fulllist(event)"))
	    (th/ (@/ (colspan 2)) (clickable ($$ "優先度")))
	    (th/ (@/ (colspan 2)) (clickable ($$ "ステータス")))
	    (th/ (@/ (colspan 2)) (clickable ($$ "タイプ")))
	    (th/ (@/ (colspan 2)) (clickable ($$ "カテゴリ"))))
       (tr/
	(map/ (lambda (n items)
		(list/
		 (td/
		  (select/ (@/ (id n) (name n) (size "5") (multiple "true"))
			   (map/ (lambda (item)
				   (if unit
				       (option/ (@/ (value (code-of item))
						    (selected (has? unit item)))
						(disp-name-of item))
				       (option/ (@/ (value (code-of item)))
						(disp-name-of item))))
				 items)))
		 (td/ (updown/ n))))
	      (drop-right $property-list$ 1)
	      (if unit
		  (map (lambda (acc all)
			 (append (acc unit)
				 (lset-difference eq? (all) (acc unit))))
		       (drop-right $properties-accessor-list$ 1)
		       (drop-right $all-properties-list$ 1))
		  (map (lambda (all) (all))
		       (drop-right $all-properties-list$ 1))))))
      (table/
       (tr/ (td/ ($$ "ユニット名") (span/ (@/ (class "warning")) ($$ "(※)")))
	    (td/
	     (textarea/ (@/ (type "text") (name "name")
			    (rows 1) (cols 32))
			(if unit (unit-name-of unit) ""))
	     (error:span/ (@/ (class "warning")) (set-error-message #f))))
       (tr/ (td/ ($$  "概要"))
	    (td/ (@/ (colspan 2))
		 (textarea/ (@/ (type "text") (name "desc")
				(rows 10) (cols 80))
			    (if unit (description-of unit) ""))))
       (tr/ (@/ (align "left"))
	    (td/ ($$ "ファン") (span/ (@/ (class "warning")) ($$ "(※)")))
	    (td/
	     (table/
	      (tr/
	       (td/
		(select/ (@/ (id "fans") (name "fans") (size "5") (multiple "true"))
			 (map/ (lambda (fan)
				 (let1 f (fan-name-of fan)
				   (if unit
				       (option/ (@/ (value f)
						    (selected (fan-to? unit fan)))
						f)
				       (option/ (@/ (value f)) f))))
			       (if unit
				   (append (fans-of unit)
					   (lset-difference eq? (all-fans)
							    (fans-of unit)))
				   (all-fans)))))
	       (td/ (updown/ "fans")))))))
      (if unit
	  (input/ (@/ (type "submit") (value ($$ "確定"))))
	  (input/ (@/ (type "submit") (value ($$ "新ユニット結成")))))))))
