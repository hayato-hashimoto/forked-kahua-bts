;; -*- coding: euc-jp; mode: scheme -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: parts-collection.kahua,v 1.3 2005/10/26 16:17:43 cut-sea Exp $
;;
(define (options option-list . selected-value)
  (let1 selected (and (not (null? selected-value))
                      (car selected-value))
    (map (lambda (p)
         (option/ (@/ (value (code-of p))
                      (selected (equal? (code-of p) selected)))
                  (disp-name-of p)))
       option-list)))

;; simple macro
(define-macro (generate-node-with-checker new-tag orig-tag pred)
  `(define-macro (,new-tag . nodes)
     `(if (,',pred) (,',orig-tag ,@nodes) identity)))

(define gen-node/checker generate-node-with-checker)


;; multiple define
(define-macro (define-checker-tags prefix pred tags-list)
  (let ((new-tags-list (map (lambda (tag)
			      (string->symbol #`",prefix,tag"))
			    tags-list)))
    `(begin
       ,@(map (lambda (new orig)
		`(gen-node/checker ,new ,orig ,pred))
	      new-tags-list
	      tags-list))))


