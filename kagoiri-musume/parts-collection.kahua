;; -*- coding: euc-jp; mode: scheme -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: parts-collection.kahua,v 1.14 2005/11/13 13:22:02 cut-sea Exp $
;;
(define (options option-list . selected-value)
  (let1 selected (and (not (null? selected-value))
                      (car selected-value))
    (map (lambda (p)
         (option/ (@/ (value (code-of p))
                      (selected (equal? (code-of p) selected)))
                  (disp-name-of p)))
       option-list)))

;; simple macro
(define-macro (generate-node-with-checker new-tag orig-tag pred)
  `(define-macro (,new-tag . nodes)
     `(if (,',pred) (,',orig-tag ,@nodes) "")))

(define gen-node/checker generate-node-with-checker)


;; multiple define
(define-macro (define-checker-tags prefix pred tags-list)
  (let ((new-tags-list (map (lambda (tag)
			      (string->symbol #`",prefix,tag"))
			    tags-list)))
    `(begin
       ,@(map (lambda (new orig)
		`(gen-node/checker ,new ,orig ,pred))
	      new-tags-list
	      tags-list))))

;; イマイチ
;;
(define-checker-tags admin: admin?
  (a/ a/cont/ dd/ div/ dt/ form/ form/cont/ h1/ h2/ h3/ h4/ h5/ h6/
      hr/ input/ li/ pre/ select/ table/ tbody/ td/ textarea/ th/ thead/ ul/))

(define-checker-tags common: common?
  (a/ a/cont/ dd/ div/ dt/ form/ form/cont/ h1/ h2/ h3/ h4/ h5/ h6/
      hr/ input/ li/ pre/ select/ table/ tbody/ td/ textarea/ th/ thead/ ul/))

(define-checker-tags devel: developer?
  (a/ a/cont/ dd/ div/ dt/ form/ form/cont/ h1/ h2/ h3/ h4/ h5/ h6/
      hr/ input/ li/ pre/ select/ table/ tbody/ td/ textarea/ th/ thead/ ul/))

(define-checker-tags client: client?
  (a/ a/cont/ dd/ div/ dt/ form/ form/cont/ h1/ h2/ h3/ h4/ h5/ h6/
      hr/ input/ li/ pre/ select/ table/ tbody/ td/ textarea/ th/ thead/ ul/))

(define-checker-tags error: error?
  (span/))


;;;; define-checker creates checker macro
;;;
;; [syntax] define-checker (name args ...) condition
;;
;; (define-checker (<node n)
;;      (< 0 n))
;;;
;; [syntax] <node args ... body
;;
;; (<node 1 "yes")
;; -> "yes"
;; (<node -1 "yes")
;; -> ""
(define-macro (define-checker name&args condition)
  (let ((name (car name&args))
        (args (cdr name&args)))
    `(define-macro (,name ,@args body)
       `(if ((lambda ,',args
               ,',condition)
             ,@,(cons 'list args))
            ,body
          ""))))

(define-checker (unit-member? unit)
  (memq (current-fan) (ref unit 'fans)))

(define-checker (developer-or-fan? unit)
  (or (kahua-user-has-role? (kahua-current-user) '(developer))
      (memq (current-fan) (ref unit 'fans))))

(define-checker (has-item? unit props-of)
  (not (null? (props-of unit))))

(define-checker (composer? song)
  (eq? (current-fan) (fan-of song)))

;; parts
;;
