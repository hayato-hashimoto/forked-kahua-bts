;; -*- coding: euc-jp; mode: kahua -*-
;;
;;  Copyright (c) 2005 Kahua.Org, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; $Id: song.kahua,v 1.1 2006/03/18 11:29:13 shibata Exp $
;;
;;
;; song means one of issue.
;;
(define-class <song> (<kahua-persistent-base>)
  ((seq-no          :allocation :persistent :init-keyword :seq-no
		    :init-value #f :accessor seq-no-of)
   (musume          :allocation :persistent :init-keyword :musume
		    :accessor musume-of)
   (melody          :allocation :persistent :init-keyword :melody
		    :accessor melody-of)
   (files           :allocation :persistent :init-keyword :files
		    :init-value '() :accessor files-of)
   (fan             :allocation :persistent :init-keyword :fan
		    :init-value #f :accessor fan-of)
   (ctime           :allocation :persistent :init-keyword :ctime
		    :init-thunk sys-time :accessor ctime-of)
   (delete          :allocation :persistent :init-keyword :delete
		    :init-value #f :accessor delete-of)
   ))

(define-method persistent-initialize ((obj <song>) initargs)
  (next-method)
  (let* ((musume (musume-of obj))
	 (songs (songs-of musume)))
    (set! (seq-no-of obj) (next-seq-no musume))
    (set! (songs-of musume) (cons obj songs))))

(define-method object-compare ((obj1 <song>) (obj2 <song>))
  (compare (ctime-of obj1) (ctime-of obj2)))

(define-method active? ((song <song>))
  (not (delete-of song)))
